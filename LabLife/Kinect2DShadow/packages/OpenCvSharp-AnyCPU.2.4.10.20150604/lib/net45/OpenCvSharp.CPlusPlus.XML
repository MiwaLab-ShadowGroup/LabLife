<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenCvSharp.CPlusPlus</name>
    </assembly>
    <members>
        <member name="T:OpenCvSharp.CPlusPlus.Cv2">
            <summary>
            OpenCV Functions of C++ I/F (cv::xxx) 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Cv2.GC_BGD">
            <summary>
            GrabCut mask value [background]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Cv2.GC_FGD">
            <summary>
            GrabCut mask value [foreground]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Cv2.GC_PR_BGD">
            <summary>
            GrabCut mask value [most probably background]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Cv2.GC_PR_FGD">
            <summary>
            GrabCut mask value [most probably foreground]
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ToPtr(OpenCvSharp.ICvPtrHolder)">
            <summary>
            引数がnullの時はIntPtr.Zeroに変換する
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FAST(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.KeyPoint[]@,System.Int32,System.Boolean)">
            <summary>
            detects corners using FAST algorithm by E. Rosten
            </summary>
            <param name="image"></param>
            <param name="keypoints"></param>
            <param name="threshold"></param>
            <param name="nonmaxSupression"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FASTX(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.KeyPoint[]@,System.Int32,System.Boolean,System.Int32)">
            <summary>
            detects corners using FAST algorithm by E. Rosten
            </summary>
            <param name="image"></param>
            <param name="keypoints"></param>
            <param name="threshold"></param>
            <param name="nonmaxSupression"></param>
            <param name="type"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.DrawKeypoints(OpenCvSharp.CPlusPlus.Mat,System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.KeyPoint},OpenCvSharp.CPlusPlus.Mat,System.Nullable{OpenCvSharp.CPlusPlus.Scalar},OpenCvSharp.CPlusPlus.DrawMatchesFlags)">
            <summary>
            Draw keypoints.
            </summary>
            <param name="image"></param>
            <param name="keypoints"></param>
            <param name="outImage"></param>
            <param name="color"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.DrawMatches(OpenCvSharp.CPlusPlus.Mat,System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.KeyPoint},OpenCvSharp.CPlusPlus.Mat,System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.KeyPoint},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.DMatch},OpenCvSharp.CPlusPlus.Mat,System.Nullable{OpenCvSharp.CPlusPlus.Scalar},System.Nullable{OpenCvSharp.CPlusPlus.Scalar},System.Collections.Generic.IEnumerable{System.Byte},OpenCvSharp.CPlusPlus.DrawMatchesFlags)">
            <summary>
            Draws matches of keypints from two images on output image.
            </summary>
            <param name="img1"></param>
            <param name="keypoints1"></param>
            <param name="img2"></param>
            <param name="keypoints2"></param>
            <param name="matches1To2"></param>
            <param name="outImg"></param>
            <param name="matchColor"></param>
            <param name="singlePointColor"></param>
            <param name="matchesMask"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.DrawMatches(OpenCvSharp.CPlusPlus.Mat,System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.KeyPoint},OpenCvSharp.CPlusPlus.Mat,System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.KeyPoint},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.DMatch}},OpenCvSharp.CPlusPlus.Mat,System.Nullable{OpenCvSharp.CPlusPlus.Scalar},System.Nullable{OpenCvSharp.CPlusPlus.Scalar},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},OpenCvSharp.CPlusPlus.DrawMatchesFlags)">
            <summary>
            Draws matches of keypints from two images on output image.
            </summary>
            <param name="img1"></param>
            <param name="keypoints1"></param>
            <param name="img2"></param>
            <param name="keypoints2"></param>
            <param name="matches1To2"></param>
            <param name="outImg"></param>
            <param name="matchColor"></param>
            <param name="singlePointColor"></param>
            <param name="matchesMask"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.InitModule_ML">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.InitModule_Contrib">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ApplyColorMap(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.ColorMapMode)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="colormap"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Inpaint(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double,OpenCvSharp.InpaintMethod)">
            <summary>
            restores the damaged image areas using one of the available intpainting algorithms
            </summary>
            <param name="src"></param>
            <param name="inpaintMask"></param>
            <param name="dst"></param>
            <param name="inpaintRadius"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FastNlMeansDenoising(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Single,System.Int32,System.Int32)">
            <summary>
            Perform image denoising using Non-local Means Denoising algorithm 
            with several computational optimizations. Noise expected to be a gaussian white noise
            </summary>
            <param name="src">Input 8-bit 1-channel, 2-channel or 3-channel image.</param>
            <param name="dst">Output image with the same size and type as src .</param>
            <param name="h">
            Parameter regulating filter strength. Big h value perfectly removes noise but also removes image details, 
            smaller h value preserves details but also preserves some noise</param>
            <param name="templateWindowSize">
            Size in pixels of the template patch that is used to compute weights. Should be odd. Recommended value 7 pixels</param>
            <param name="searchWindowSize">
            Size in pixels of the window that is used to compute weighted average for given pixel. 
            Should be odd. Affect performance linearly: greater searchWindowsSize - greater denoising time. Recommended value 21 pixels</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FastNlMeansDenoisingColored(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Modification of fastNlMeansDenoising function for colored images
            </summary>
            <param name="src">Input 8-bit 3-channel image.</param>
            <param name="dst">Output image with the same size and type as src.</param>
            <param name="h">Parameter regulating filter strength for luminance component. 
            Bigger h value perfectly removes noise but also removes image details, smaller h value preserves details but also preserves some noise</param>
            <param name="hColor">The same as h but for color components. For most images value equals 10 will be enought 
            to remove colored noise and do not distort colors</param>
            <param name="templateWindowSize">
            Size in pixels of the template patch that is used to compute weights. Should be odd. Recommended value 7 pixels</param>
            <param name="searchWindowSize">
            Size in pixels of the window that is used to compute weighted average for given pixel. Should be odd. 
            Affect performance linearly: greater searchWindowsSize - greater denoising time. Recommended value 21 pixels</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FastNlMeansDenoisingMulti(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.InputArray},OpenCvSharp.CPlusPlus.OutputArray,System.Int32,System.Int32,System.Single,System.Int32,System.Int32)">
            <summary>
            Modification of fastNlMeansDenoising function for images sequence where consequtive images have been captured 
            in small period of time. For example video. This version of the function is for grayscale images or for manual manipulation with colorspaces.
            </summary>
            <param name="srcImgs">Input 8-bit 1-channel, 2-channel or 3-channel images sequence. All images should have the same type and size.</param>
            <param name="dst"> Output image with the same size and type as srcImgs images.</param>
            <param name="imgToDenoiseIndex">Target image to denoise index in srcImgs sequence</param>
            <param name="temporalWindowSize">Number of surrounding images to use for target image denoising. 
            Should be odd. Images from imgToDenoiseIndex - temporalWindowSize / 2 to imgToDenoiseIndex - temporalWindowSize / 2 
            from srcImgs will be used to denoise srcImgs[imgToDenoiseIndex] image.</param>
            <param name="h">Parameter regulating filter strength for luminance component. Bigger h value perfectly removes noise but also removes image details, 
            smaller h value preserves details but also preserves some noise</param>
            <param name="templateWindowSize">Size in pixels of the template patch that is used to compute weights. Should be odd. Recommended value 7 pixels</param>
            <param name="searchWindowSize">Size in pixels of the window that is used to compute weighted average for given pixel. 
            Should be odd. Affect performance linearly: greater searchWindowsSize - greater denoising time. Recommended value 21 pixels</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FastNlMeansDenoisingMulti(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},OpenCvSharp.CPlusPlus.OutputArray,System.Int32,System.Int32,System.Single,System.Int32,System.Int32)">
            <summary>
            Modification of fastNlMeansDenoising function for images sequence where consequtive images have been captured 
            in small period of time. For example video. This version of the function is for grayscale images or for manual manipulation with colorspaces.
            </summary>
            <param name="srcImgs">Input 8-bit 1-channel, 2-channel or 3-channel images sequence. All images should have the same type and size.</param>
            <param name="dst"> Output image with the same size and type as srcImgs images.</param>
            <param name="imgToDenoiseIndex">Target image to denoise index in srcImgs sequence</param>
            <param name="temporalWindowSize">Number of surrounding images to use for target image denoising. 
            Should be odd. Images from imgToDenoiseIndex - temporalWindowSize / 2 to imgToDenoiseIndex - temporalWindowSize / 2 
            from srcImgs will be used to denoise srcImgs[imgToDenoiseIndex] image.</param>
            <param name="h">Parameter regulating filter strength for luminance component. Bigger h value perfectly removes noise but also removes image details, 
            smaller h value preserves details but also preserves some noise</param>
            <param name="templateWindowSize">Size in pixels of the template patch that is used to compute weights. Should be odd. Recommended value 7 pixels</param>
            <param name="searchWindowSize">Size in pixels of the window that is used to compute weighted average for given pixel. 
            Should be odd. Affect performance linearly: greater searchWindowsSize - greater denoising time. Recommended value 21 pixels</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FastNlMeansDenoisingColoredMulti(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.InputArray},OpenCvSharp.CPlusPlus.OutputArray,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Modification of fastNlMeansDenoisingMulti function for colored images sequences
            </summary>
            <param name="srcImgs">Input 8-bit 3-channel images sequence. All images should have the same type and size.</param>
            <param name="dst">Output image with the same size and type as srcImgs images.</param>
            <param name="imgToDenoiseIndex">Target image to denoise index in srcImgs sequence</param>
            <param name="temporalWindowSize">Number of surrounding images to use for target image denoising. Should be odd. 
            Images from imgToDenoiseIndex - temporalWindowSize / 2 to imgToDenoiseIndex - temporalWindowSize / 2 from srcImgs 
            will be used to denoise srcImgs[imgToDenoiseIndex] image.</param>
            <param name="h">Parameter regulating filter strength for luminance component. Bigger h value perfectly removes noise 
            but also removes image details, smaller h value preserves details but also preserves some noise.</param>
            <param name="hColor"> The same as h but for color components.</param>
            <param name="templateWindowSize">Size in pixels of the template patch that is used to compute weights. Should be odd. Recommended value 7 pixels</param>
            <param name="searchWindowSize">Size in pixels of the window that is used to compute weighted average for given pixel. 
            Should be odd. Affect performance linearly: greater searchWindowsSize - greater denoising time. Recommended value 21 pixels</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FastNlMeansDenoisingColoredMulti(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},OpenCvSharp.CPlusPlus.OutputArray,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Modification of fastNlMeansDenoisingMulti function for colored images sequences
            </summary>
            <param name="srcImgs">Input 8-bit 3-channel images sequence. All images should have the same type and size.</param>
            <param name="dst">Output image with the same size and type as srcImgs images.</param>
            <param name="imgToDenoiseIndex">Target image to denoise index in srcImgs sequence</param>
            <param name="temporalWindowSize">Number of surrounding images to use for target image denoising. Should be odd. 
            Images from imgToDenoiseIndex - temporalWindowSize / 2 to imgToDenoiseIndex - temporalWindowSize / 2 from srcImgs 
            will be used to denoise srcImgs[imgToDenoiseIndex] image.</param>
            <param name="h">Parameter regulating filter strength for luminance component. Bigger h value perfectly removes noise 
            but also removes image details, smaller h value preserves details but also preserves some noise.</param>
            <param name="hColor"> The same as h but for color components.</param>
            <param name="templateWindowSize">Size in pixels of the template patch that is used to compute weights. Should be odd. Recommended value 7 pixels</param>
            <param name="searchWindowSize">Size in pixels of the window that is used to compute weighted average for given pixel. 
            Should be odd. Affect performance linearly: greater searchWindowsSize - greater denoising time. Recommended value 21 pixels</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.InitModule_NonFree">
            <summary>
            You need to call this method before using SIFT/SURF functions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.InitModule_Video">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.UpdateMotionHistory(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputOutputArray,System.Double,System.Double)">
            <summary>
            Updates motion history image using the current silhouette
            </summary>
            <param name="silhouette">Silhouette mask that has non-zero pixels where the motion occurs.</param>
            <param name="mhi">Motion history image that is updated by the function (single-channel, 32-bit floating-point).</param>
            <param name="timestamp">Current time in milliseconds or other units.</param>
            <param name="duration">Maximal duration of the motion track in the same units as timestamp .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalcMotionGradient(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double,System.Double,System.Int32)">
            <summary>
            Computes the motion gradient orientation image from the motion history image
            </summary>
            <param name="mhi">Motion history single-channel floating-point image.</param>
            <param name="mask">Output mask image that has the type CV_8UC1 and the same size as mhi. 
            Its non-zero elements mark pixels where the motion gradient data is correct.</param>
            <param name="orientation">Output motion gradient orientation image that has the same type and the same size as mhi. 
            Each pixel of the image is a motion orientation, from 0 to 360 degrees.</param>
            <param name="delta1">Minimal (or maximal) allowed difference between mhi values within a pixel neighborhood.</param>
            <param name="delta2">Maximal (or minimal) allowed difference between mhi values within a pixel neighborhood. 
            That is, the function finds the minimum ( m(x,y) ) and maximum ( M(x,y) ) mhi values over 3x3 neighborhood of each pixel 
            and marks the motion orientation at (x, y) as valid only if: 
            min(delta1, delta2) &lt;= M(x,y)-m(x,y) &lt;= max(delta1, delta2).</param>
            <param name="apertureSize"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalcGlobalOrientation(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,System.Double,System.Double)">
            <summary>
            Computes the global orientation of the selected motion history image part
            </summary>
            <param name="orientation">Motion gradient orientation image calculated by the function CalcMotionGradient() .</param>
            <param name="mask">Mask image. It may be a conjunction of a valid gradient mask, also calculated by CalcMotionGradient() ,
            and the mask of a region whose direction needs to be calculated.</param>
            <param name="mhi">Motion history image calculated by UpdateMotionHistory() .</param>
            <param name="timestamp">Timestamp passed to UpdateMotionHistory() .</param>
            <param name="duration">Maximum duration of a motion track in milliseconds, passed to UpdateMotionHistory() .</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SegmentMotion(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.Rect[]@,System.Double,System.Double)">
            <summary>
            Splits a motion history image into a few parts corresponding to separate independent motions 
            (for example, left hand, right hand).
            </summary>
            <param name="mhi">Motion history image.</param>
            <param name="segmask">Image where the found mask should be stored, single-channel, 32-bit floating-point.</param>
            <param name="boundingRects">Vector containing ROIs of motion connected components.</param>
            <param name="timestamp">Current time in milliseconds or other units.</param>
            <param name="segThresh">Segmentation threshold that is recommended to be equal to the interval between motion history “steps” or greater.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CamShift(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Rect@,OpenCvSharp.CPlusPlus.TermCriteria)">
            <summary>
            Finds an object center, size, and orientation.
            </summary>
            <param name="probImage">Back projection of the object histogram. </param>
            <param name="window">Initial search window.</param>
            <param name="criteria">Stop criteria for the underlying MeanShift() .</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MeanShift(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Rect@,OpenCvSharp.CPlusPlus.TermCriteria)">
            <summary>
            Finds an object on a back projection image.
            </summary>
            <param name="probImage">Back projection of the object histogram.</param>
            <param name="window">Initial search window.</param>
            <param name="criteria">Stop criteria for the iterative search algorithm.</param>
            <returns>Number of iterations CAMSHIFT took to converge.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.BuildOpticalFlowPyramid(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.Size,System.Int32,System.Boolean,OpenCvSharp.BorderType,OpenCvSharp.BorderType,System.Boolean)">
            <summary>
            Constructs a pyramid which can be used as input for calcOpticalFlowPyrLK
            </summary>
            <param name="img">8-bit input image.</param>
            <param name="pyramid">output pyramid.</param>
            <param name="winSize">window size of optical flow algorithm. 
            Must be not less than winSize argument of calcOpticalFlowPyrLK(). 
            It is needed to calculate required padding for pyramid levels.</param>
            <param name="maxLevel">0-based maximal pyramid level number.</param>
            <param name="withDerivatives">set to precompute gradients for the every pyramid level. 
            If pyramid is constructed without the gradients then calcOpticalFlowPyrLK() will 
            calculate them internally.</param>
            <param name="pyrBorder">the border mode for pyramid layers.</param>
            <param name="derivBorder">the border mode for gradients.</param>
            <param name="tryReuseInputImage">put ROI of input image into the pyramid if possible. 
            You can pass false to force data copying.</param>
            <returns>number of levels in constructed pyramid. Can be less than maxLevel.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalcOpticalFlowPyrLK(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Int32,System.Nullable{OpenCvSharp.CPlusPlus.TermCriteria},OpenCvSharp.CPlusPlus.OpticalFlowFlags,System.Double)">
            <summary>
            computes sparse optical flow using multi-scale Lucas-Kanade algorithm
            </summary>
            <param name="prevImg"></param>
            <param name="nextImg"></param>
            <param name="prevPts"></param>
            <param name="nextPts"></param>
            <param name="status"></param>
            <param name="err"></param>
            <param name="winSize"></param>
            <param name="maxLevel"></param>
            <param name="criteria"></param>
            <param name="flags"></param>
            <param name="minEigThreshold"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalcOpticalFlowPyrLK(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Point2f[],OpenCvSharp.CPlusPlus.Point2f[]@,System.Byte[]@,System.Single[]@,System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Int32,System.Nullable{OpenCvSharp.CPlusPlus.TermCriteria},OpenCvSharp.CPlusPlus.OpticalFlowFlags,System.Double)">
            <summary>
            computes sparse optical flow using multi-scale Lucas-Kanade algorithm
            </summary>
            <param name="prevImg"></param>
            <param name="nextImg"></param>
            <param name="prevPts"></param>
            <param name="nextPts"></param>
            <param name="status"></param>
            <param name="err"></param>
            <param name="winSize"></param>
            <param name="maxLevel"></param>
            <param name="criteria"></param>
            <param name="flags"></param>
            <param name="minEigThreshold"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalcOpticalFlowFarneback(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputOutputArray,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,OpenCvSharp.CPlusPlus.OpticalFlowFlags)">
            <summary>
            Computes a dense optical flow using the Gunnar Farneback's algorithm.
            </summary>
            <param name="prev">first 8-bit single-channel input image.</param>
            <param name="next">second input image of the same size and the same type as prev.</param>
            <param name="flow">computed flow image that has the same size as prev and type CV_32FC2.</param>
            <param name="pyrScale">parameter, specifying the image scale (&lt;1) to build pyramids for each image; 
            pyrScale=0.5 means a classical pyramid, where each next layer is twice smaller than the previous one.</param>
            <param name="levels">number of pyramid layers including the initial image; 
            levels=1 means that no extra layers are created and only the original images are used.</param>
            <param name="winsize">averaging window size; larger values increase the algorithm robustness to 
            image noise and give more chances for fast motion detection, but yield more blurred motion field.</param>
            <param name="iterations">number of iterations the algorithm does at each pyramid level.</param>
            <param name="polyN">size of the pixel neighborhood used to find polynomial expansion in each pixel; 
            larger values mean that the image will be approximated with smoother surfaces, 
            yielding more robust algorithm and more blurred motion field, typically poly_n =5 or 7.</param>
            <param name="polySigma">standard deviation of the Gaussian that is used to smooth derivatives used as 
            a basis for the polynomial expansion; for polyN=5, you can set polySigma=1.1, 
            for polyN=7, a good value would be polySigma=1.5.</param>
            <param name="flags">operation flags that can be a combination of OPTFLOW_USE_INITIAL_FLOW and/or OPTFLOW_FARNEBACK_GAUSSIAN</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.EstimateRigidTransform(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,System.Boolean)">
            <summary>
            Estimates the best-fit Euqcidean, similarity, affine or perspective transformation
            that maps one 2D point set to another or one image to another.
            </summary>
            <param name="src">First input 2D point set stored in std::vector or Mat, or an image stored in Mat.</param>
            <param name="dst">Second input 2D point set of the same size and the same type as A, or another image.</param>
            <param name="fullAffine">If true, the function finds an optimal affine transformation with no additional restrictions (6 degrees of freedom). 
            Otherwise, the class of transformations to choose from is limited to combinations of translation, rotation, and uniform scaling (5 degrees of freedom).</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalcOpticalFlowSF(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,System.Int32,System.Int32,System.Int32)">
            <summary>
            computes dense optical flow using Simple Flow algorithm
            </summary>
            <param name="from">First 8-bit 3-channel image.</param>
            <param name="to">Second 8-bit 3-channel image</param>
            <param name="flow">Estimated flow</param>
            <param name="layers">Number of layers</param>
            <param name="averagingBlockSize">Size of block through which we sum up when calculate cost function for pixel</param>
            <param name="maxFlow">maximal flow that we search at each level</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalcOpticalFlowSF(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            computes dense optical flow using Simple Flow algorithm
            </summary>
            <param name="from">First 8-bit 3-channel image.</param>
            <param name="to">Second 8-bit 3-channel image</param>
            <param name="flow">Estimated flow</param>
            <param name="layers">Number of layers</param>
            <param name="averagingBlockSize">Size of block through which we sum up when calculate cost function for pixel</param>
            <param name="maxFlow">maximal flow that we search at each level</param>
            <param name="sigmaDist">vector smooth spatial sigma parameter</param>
            <param name="sigmaColor">vector smooth color sigma parameter</param>
            <param name="postprocessWindow">window size for postprocess cross bilateral filter</param>
            <param name="sigmaDistFix">spatial sigma for postprocess cross bilateralf filter</param>
            <param name="sigmaColorFix">color sigma for postprocess cross bilateral filter</param>
            <param name="occThr">threshold for detecting occlusions</param>
            <param name="upscaleAveragingRadius">window size for bilateral upscale operation</param>
            <param name="upscaleSigmaDist">spatial sigma for bilateral upscale operation</param>
            <param name="upscaleSigmaColor">color sigma for bilateral upscale operation</param>
            <param name="speedUpThr">threshold to detect point with irregular flow - where flow should be recalculated after upscale</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateOptFlow_DualTVL1">
            <summary>
            Implementation of the Zach, Pock and Bischof Dual TV-L1 Optical Flow method
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateFrameSource_Empty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateFrameSource_Video(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateFrameSource_Video_GPU(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateFrameSource_Camera(System.Int32)">
            <summary>
            
            </summary>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateSuperResolution_BTVL1">
            <summary>
            Create Bilateral TV-L1 Super Resolution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateSuperResolution_BTVL1_GPU">
            <summary>
            Create Bilateral TV-L1 Super Resolution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateSuperResolution_BTVL1_OCL">
            <summary>
            Create Bilateral TV-L1 Super Resolution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateOptFlow_Farneback">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateOptFlow_Farneback_GPU">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateOptFlow_Farneback_OCL">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateOptFlow_Simple">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateOptFlow_DualTVL1Ex">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateOptFlow_DualTVL1_GPU">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateOptFlow_DualTVL1_OCL">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateOptFlow_Brox_GPU">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateOptFlow_PyrLK_GPU">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateOptFlow_PyrLK_OCL">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Rodrigues(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            converts rotation vector to rotation matrix or vice versa using Rodrigues transformation
            </summary>
            <param name="src">Input rotation vector (3x1 or 1x3) or rotation matrix (3x3).</param>
            <param name="dst">Output rotation matrix (3x3) or rotation vector (3x1 or 1x3), respectively.</param>
            <param name="jacobian">Optional output Jacobian matrix, 3x9 or 9x3, which is a matrix of partial derivatives of the output array components with respect to the input array components.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Rodrigues(System.Double[],System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            converts rotation vector to rotation matrix using Rodrigues transformation
            </summary>
            <param name="vector">Input rotation vector (3x1).</param>
            <param name="matrix">Output rotation matrix (3x3).</param>
            <param name="jacobian">Optional output Jacobian matrix, 3x9, which is a matrix of partial derivatives of the output array components with respect to the input array components.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Rodrigues(System.Double[],System.Double[0:,0:]@)">
            <summary>
            converts rotation vector to rotation matrix using Rodrigues transformation
            </summary>
            <param name="vector">Input rotation vector (3x1).</param>
            <param name="matrix">Output rotation matrix (3x3).</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Rodrigues(System.Double[0:,0:],System.Double[]@,System.Double[0:,0:]@)">
            <summary>
            converts rotation matrix to rotation vector using Rodrigues transformation
            </summary>
            <param name="matrix">Input rotation matrix (3x3).</param>
            <param name="vector">Output rotation vector (3x1).</param>
            <param name="jacobian">Optional output Jacobian matrix, 3x9, which is a matrix of partial derivatives of the output array components with respect to the input array components.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Rodrigues(System.Double[0:,0:],System.Double[]@)">
            <summary>
            converts rotation matrix to rotation vector using Rodrigues transformation
            </summary>
            <param name="matrix">Input rotation matrix (3x3).</param>
            <param name="vector">Output rotation vector (3x1).</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FindHomography(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.HomographyMethod,System.Double,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            computes the best-fit perspective transformation mapping srcPoints to dstPoints.
            </summary>
            <param name="srcPoints">Coordinates of the points in the original plane, a matrix of the type CV_32FC2</param>
            <param name="dstPoints">Coordinates of the points in the target plane, a matrix of the type CV_32FC2</param>
            <param name="method">Method used to computed a homography matrix.</param>
            <param name="ransacReprojThreshold">Maximum allowed reprojection error to treat a point pair as an inlier (used in the RANSAC method only)</param>
            <param name="mask"> Optional output mask set by a robust method ( CV_RANSAC or CV_LMEDS ). Note that the input mask values are ignored.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FindHomography(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2d},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2d},OpenCvSharp.HomographyMethod,System.Double,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            computes the best-fit perspective transformation mapping srcPoints to dstPoints.
            </summary>
            <param name="srcPoints">Coordinates of the points in the original plane</param>
            <param name="dstPoints">Coordinates of the points in the target plane</param>
            <param name="method">Method used to computed a homography matrix.</param>
            <param name="ransacReprojThreshold">Maximum allowed reprojection error to treat a point pair as an inlier (used in the RANSAC method only)</param>
            <param name="mask"> Optional output mask set by a robust method ( CV_RANSAC or CV_LMEDS ). Note that the input mask values are ignored.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.RQDecomp3x3(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Computes RQ decomposition of 3x3 matrix
            </summary>
            <param name="src">3x3 input matrix.</param>
            <param name="mtxR">Output 3x3 upper-triangular matrix.</param>
            <param name="mtxQ"> Output 3x3 orthogonal matrix.</param>
            <param name="qx">Optional output 3x3 rotation matrix around x-axis.</param>
            <param name="qy">Optional output 3x3 rotation matrix around y-axis.</param>
            <param name="qz">Optional output 3x3 rotation matrix around z-axis.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.RQDecomp3x3(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Computes RQ decomposition of 3x3 matrix
            </summary>
            <param name="src">3x3 input matrix.</param>
            <param name="mtxR">Output 3x3 upper-triangular matrix.</param>
            <param name="mtxQ"> Output 3x3 orthogonal matrix.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.RQDecomp3x3(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Computes RQ decomposition of 3x3 matrix
            </summary>
            <param name="src">3x3 input matrix.</param>
            <param name="mtxR">Output 3x3 upper-triangular matrix.</param>
            <param name="mtxQ"> Output 3x3 orthogonal matrix.</param>
            <param name="qx">Optional output 3x3 rotation matrix around x-axis.</param>
            <param name="qy">Optional output 3x3 rotation matrix around y-axis.</param>
            <param name="qz">Optional output 3x3 rotation matrix around z-axis.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.DecomposeProjectionMatrix(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Decomposes the projection matrix into camera matrix and the rotation martix and the translation vector
            </summary>
            <param name="projMatrix">3x4 input projection matrix P.</param>
            <param name="cameraMatrix">Output 3x3 camera matrix K.</param>
            <param name="rotMatrix">Output 3x3 external rotation matrix R.</param>
            <param name="transVect">Output 4x1 translation vector T.</param>
            <param name="rotMatrixX">Optional 3x3 rotation matrix around x-axis.</param>
            <param name="rotMatrixY">Optional 3x3 rotation matrix around y-axis.</param>
            <param name="rotMatrixZ">Optional 3x3 rotation matrix around z-axis.</param>
            <param name="eulerAngles">ptional three-element vector containing three Euler angles of rotation in degrees.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.DecomposeProjectionMatrix(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[]@,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[]@)">
            <summary>
            Decomposes the projection matrix into camera matrix and the rotation martix and the translation vector
            </summary>
            <param name="projMatrix">3x4 input projection matrix P.</param>
            <param name="cameraMatrix">Output 3x3 camera matrix K.</param>
            <param name="rotMatrix">Output 3x3 external rotation matrix R.</param>
            <param name="transVect">Output 4x1 translation vector T.</param>
            <param name="rotMatrixX">Optional 3x3 rotation matrix around x-axis.</param>
            <param name="rotMatrixY">Optional 3x3 rotation matrix around y-axis.</param>
            <param name="rotMatrixZ">Optional 3x3 rotation matrix around z-axis.</param>
            <param name="eulerAngles">ptional three-element vector containing three Euler angles of rotation in degrees.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.DecomposeProjectionMatrix(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[]@)">
            <summary>
            Decomposes the projection matrix into camera matrix and the rotation martix and the translation vector
            </summary>
            <param name="projMatrix">3x4 input projection matrix P.</param>
            <param name="cameraMatrix">Output 3x3 camera matrix K.</param>
            <param name="rotMatrix">Output 3x3 external rotation matrix R.</param>
            <param name="transVect">Output 4x1 translation vector T.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MatMulDeriv(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            computes derivatives of the matrix product w.r.t each of the multiplied matrix coefficients
            </summary>
            <param name="a">First multiplied matrix.</param>
            <param name="b">Second multiplied matrix.</param>
            <param name="dABdA">First output derivative matrix d(A*B)/dA of size A.rows*B.cols X A.rows*A.cols .</param>
            <param name="dABdB">Second output derivative matrix d(A*B)/dB of size A.rows*B.cols X B.rows*B.cols .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ComposeRT(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            composes 2 [R|t] transformations together. Also computes the derivatives of the result w.r.t the arguments
            </summary>
            <param name="rvec1">First rotation vector.</param>
            <param name="tvec1">First translation vector.</param>
            <param name="rvec2">Second rotation vector.</param>
            <param name="tvec2">Second translation vector.</param>
            <param name="rvec3">Output rotation vector of the superposition.</param>
            <param name="tvec3">Output translation vector of the superposition.</param>
            <param name="dr3dr1">Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and tvec2, respectively.</param>
            <param name="dr3dt1">Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and tvec2, respectively.</param>
            <param name="dr3dr2">Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and tvec2, respectively.</param>
            <param name="dr3dt2">Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and tvec2, respectively.</param>
            <param name="dt3dr1">Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and tvec2, respectively.</param>
            <param name="dt3dt1">Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and tvec2, respectively.</param>
            <param name="dt3dr2">Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and tvec2, respectively.</param>
            <param name="dt3dt2">Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and tvec2, respectively.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ComposeRT(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[]@,System.Double[]@,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            composes 2 [R|t] transformations together. Also computes the derivatives of the result w.r.t the arguments
            </summary>
            <param name="rvec1">First rotation vector.</param>
            <param name="tvec1">First translation vector.</param>
            <param name="rvec2">Second rotation vector.</param>
            <param name="tvec2">Second translation vector.</param>
            <param name="rvec3">Output rotation vector of the superposition.</param>
            <param name="tvec3">Output translation vector of the superposition.</param>
            <param name="dr3dr1">Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and tvec2, respectively.</param>
            <param name="dr3dt1">Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and tvec2, respectively.</param>
            <param name="dr3dr2">Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and tvec2, respectively.</param>
            <param name="dr3dt2">Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and tvec2, respectively.</param>
            <param name="dt3dr1">Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and tvec2, respectively.</param>
            <param name="dt3dt1">Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and tvec2, respectively.</param>
            <param name="dt3dr2">Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and tvec2, respectively.</param>
            <param name="dt3dt2">Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and tvec2, respectively.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ComposeRT(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            composes 2 [R|t] transformations together. Also computes the derivatives of the result w.r.t the arguments
            </summary>
            <param name="rvec1">First rotation vector.</param>
            <param name="tvec1">First translation vector.</param>
            <param name="rvec2">Second rotation vector.</param>
            <param name="tvec2">Second translation vector.</param>
            <param name="rvec3">Output rotation vector of the superposition.</param>
            <param name="tvec3">Output translation vector of the superposition.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ProjectPoints(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double)">
            <summary>
            projects points from the model coordinate space to the image coordinates. 
            Also computes derivatives of the image coordinates w.r.t the intrinsic 
            and extrinsic camera parameters
            </summary>
            <param name="objectPoints">Array of object points, 3xN/Nx3 1-channel or 
            1xN/Nx1 3-channel, where N is the number of points in the view.</param>
            <param name="rvec">Rotation vector (3x1).</param>
            <param name="tvec">Translation vector (3x1).</param>
            <param name="cameraMatrix">Camera matrix (3x3)</param>
            <param name="distCoeffs">Input vector of distortion coefficients 
            (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, or 8 elements. 
            If the vector is null, the zero distortion coefficients are assumed.</param>
            <param name="imagePoints">Output array of image points, 2xN/Nx2 1-channel 
            or 1xN/Nx1 2-channel</param>
            <param name="jacobian">Optional output 2Nx(10 + numDistCoeffs) jacobian matrix 
            of derivatives of image points with respect to components of the rotation vector, 
            translation vector, focal lengths, coordinates of the principal point and 
            the distortion coefficients. In the old interface different components of 
            the jacobian are returned via different output parameters.</param>
            <param name="aspectRatio">Optional “fixed aspect ratio” parameter. 
            If the parameter is not 0, the function assumes that the aspect ratio (fx/fy) 
            is fixed and correspondingly adjusts the jacobian matrix.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ProjectPoints(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point3d},System.Double[],System.Double[],System.Double[0:,0:],System.Double[],OpenCvSharp.CPlusPlus.Point2d[]@,System.Double[0:,0:]@,System.Double)">
            <summary>
            projects points from the model coordinate space to the image coordinates. 
            Also computes derivatives of the image coordinates w.r.t the intrinsic 
            and extrinsic camera parameters
            </summary>
            <param name="objectPoints">Array of object points, 3xN/Nx3 1-channel or 
            1xN/Nx1 3-channel, where N is the number of points in the view.</param>
            <param name="rvec">Rotation vector (3x1).</param>
            <param name="tvec">Translation vector (3x1).</param>
            <param name="cameraMatrix">Camera matrix (3x3)</param>
            <param name="distCoeffs">Input vector of distortion coefficients 
            (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, or 8 elements. 
            If the vector is null, the zero distortion coefficients are assumed.</param>
            <param name="imagePoints">Output array of image points, 2xN/Nx2 1-channel 
            or 1xN/Nx1 2-channel</param>
            <param name="jacobian">Optional output 2Nx(10 + numDistCoeffs) jacobian matrix 
            of derivatives of image points with respect to components of the rotation vector, 
            translation vector, focal lengths, coordinates of the principal point and 
            the distortion coefficients. In the old interface different components of 
            the jacobian are returned via different output parameters.</param>
            <param name="aspectRatio">Optional “fixed aspect ratio” parameter. 
            If the parameter is not 0, the function assumes that the aspect ratio (fx/fy) 
            is fixed and correspondingly adjusts the jacobian matrix.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SolvePnP(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Boolean,OpenCvSharp.CPlusPlus.SolvePnPFlag)">
            <summary>
            Finds an object pose from 3D-2D point correspondences.
            </summary>
            <param name="objectPoints"> Array of object points in the object coordinate space, 3xN/Nx3 1-channel or 1xN/Nx1 3-channel, 
            where N is the number of points. vector&lt;Point3f&gt; can be also passed here.</param>
            <param name="imagePoints">Array of corresponding image points, 2xN/Nx2 1-channel or 1xN/Nx1 2-channel, 
            where N is the number of points. vector&lt;Point2f&gt; can be also passed here.</param>
            <param name="cameraMatrix">Input camera matrix</param>
            <param name="distCoeffs">Input vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, or 8 elements. 
            If the vector is null, the zero distortion coefficients are assumed.</param>
            <param name="rvec">Output rotation vector that, together with tvec , brings points from the model coordinate system to the 
            camera coordinate system.</param>
            <param name="tvec">Output translation vector.</param>
            <param name="useExtrinsicGuess">If true, the function uses the provided rvec and tvec values as initial approximations of 
            the rotation and translation vectors, respectively, and further optimizes them.</param>
            <param name="flags">Method for solving a PnP problem:</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SolvePnP(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point3f},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},System.Double[0:,0:],System.Collections.Generic.IEnumerable{System.Double},System.Double[]@,System.Double[]@,System.Boolean,OpenCvSharp.CPlusPlus.SolvePnPFlag)">
            <summary>
            Finds an object pose from 3D-2D point correspondences.
            </summary>
            <param name="objectPoints"> Array of object points in the object coordinate space, 3xN/Nx3 1-channel or 1xN/Nx1 3-channel, 
            where N is the number of points. vector&lt;Point3f&gt; can be also passed here.</param>
            <param name="imagePoints">Array of corresponding image points, 2xN/Nx2 1-channel or 1xN/Nx1 2-channel, 
            where N is the number of points. vector&lt;Point2f&gt; can be also passed here.</param>
            <param name="cameraMatrix">Input camera matrix</param>
            <param name="distCoeffs">Input vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, or 8 elements. 
            If the vector is null, the zero distortion coefficients are assumed.</param>
            <param name="rvec">Output rotation vector that, together with tvec , brings points from the model coordinate system to the 
            camera coordinate system.</param>
            <param name="tvec">Output translation vector.</param>
            <param name="useExtrinsicGuess">If true, the function uses the provided rvec and tvec values as initial approximations of 
            the rotation and translation vectors, respectively, and further optimizes them.</param>
            <param name="flags">Method for solving a PnP problem:</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SolvePnPRansac(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Boolean,System.Int32,System.Single,System.Int32,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.SolvePnPFlag)">
            <summary>
            computes the camera pose from a few 3D points and the corresponding projections. The outliers are possible.
            </summary>
            <param name="objectPoints">Array of object points in the object coordinate space, 3xN/Nx3 1-channel or 1xN/Nx1 3-channel, 
            where N is the number of points. List&lt;Point3f&gt; can be also passed here.</param>
            <param name="imagePoints">Array of corresponding image points, 2xN/Nx2 1-channel or 1xN/Nx1 2-channel, where N is the number of points. 
            List&lt;Point2f&gt; can be also passed here.</param>
            <param name="cameraMatrix">Input 3x3 camera matrix</param>
            <param name="distCoeffs">Input vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, or 8 elements. 
            If the vector is null, the zero distortion coefficients are assumed.</param>
            <param name="rvec">Output rotation vector that, together with tvec , brings points from the model coordinate system 
            to the camera coordinate system.</param>
            <param name="tvec">Output translation vector.</param>
            <param name="useExtrinsicGuess">If true, the function uses the provided rvec and tvec values as initial approximations 
            of the rotation and translation vectors, respectively, and further optimizes them.</param>
            <param name="iterationsCount">Number of iterations.</param>
            <param name="reprojectionError">Inlier threshold value used by the RANSAC procedure. 
            The parameter value is the maximum allowed distance between the observed and computed point projections to consider it an inlier.</param>
            <param name="minInliersCount">Number of inliers. If the algorithm at some stage finds more inliers than minInliersCount , it finishes.</param>
            <param name="inliers">Output vector that contains indices of inliers in objectPoints and imagePoints .</param>
            <param name="flags">Method for solving a PnP problem</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SolvePnPRansac(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point3f},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},System.Double[0:,0:],System.Collections.Generic.IEnumerable{System.Double},System.Double[]@,System.Double[]@)">
            <summary>
            computes the camera pose from a few 3D points and the corresponding projections. The outliers are possible.
            </summary>
            <param name="objectPoints">Array of object points in the object coordinate space, 3xN/Nx3 1-channel or 1xN/Nx1 3-channel, 
            where N is the number of points. List&lt;Point3f&gt; can be also passed here.</param>
            <param name="imagePoints">Array of corresponding image points, 2xN/Nx2 1-channel or 1xN/Nx1 2-channel, where N is the number of points. 
            List&lt;Point2f&gt; can be also passed here.</param>
            <param name="cameraMatrix">Input 3x3 camera matrix</param>
            <param name="distCoeffs">Input vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, or 8 elements. 
            If the vector is null, the zero distortion coefficients are assumed.</param>
            <param name="rvec">Output rotation vector that, together with tvec , brings points from the model coordinate system 
            to the camera coordinate system.</param>
            <param name="tvec">Output translation vector.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SolvePnPRansac(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point3f},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},System.Double[0:,0:],System.Collections.Generic.IEnumerable{System.Double},System.Double[]@,System.Double[]@,System.Int32[]@,System.Boolean,System.Int32,System.Single,System.Int32,OpenCvSharp.CPlusPlus.SolvePnPFlag)">
            <summary>
            computes the camera pose from a few 3D points and the corresponding projections. The outliers are possible.
            </summary>
            <param name="objectPoints">Array of object points in the object coordinate space, 3xN/Nx3 1-channel or 1xN/Nx1 3-channel, 
            where N is the number of points. List&lt;Point3f&gt; can be also passed here.</param>
            <param name="imagePoints">Array of corresponding image points, 2xN/Nx2 1-channel or 1xN/Nx1 2-channel, where N is the number of points. 
            List&lt;Point2f&gt; can be also passed here.</param>
            <param name="cameraMatrix">Input 3x3 camera matrix</param>
            <param name="distCoeffs">Input vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, or 8 elements. 
            If the vector is null, the zero distortion coefficients are assumed.</param>
            <param name="rvec">Output rotation vector that, together with tvec , brings points from the model coordinate system 
            to the camera coordinate system.</param>
            <param name="tvec">Output translation vector.</param>
            <param name="useExtrinsicGuess">If true, the function uses the provided rvec and tvec values as initial approximations 
            of the rotation and translation vectors, respectively, and further optimizes them.</param>
            <param name="iterationsCount">Number of iterations.</param>
            <param name="reprojectionError">Inlier threshold value used by the RANSAC procedure. 
            The parameter value is the maximum allowed distance between the observed and computed point projections to consider it an inlier.</param>
            <param name="minInliersCount">Number of inliers. If the algorithm at some stage finds more inliers than minInliersCount , it finishes.</param>
            <param name="inliers">Output vector that contains indices of inliers in objectPoints and imagePoints .</param>
            <param name="flags">Method for solving a PnP problem</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.InitCameraMatrix2D(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},OpenCvSharp.CPlusPlus.Size,System.Double)">
            <summary>
            initializes camera matrix from a few 3D points and the corresponding projections.
            </summary>
            <param name="objectPoints">Vector of vectors (vector&lt;vector&lt;Point3d&gt;&gt;) of the calibration pattern points in the calibration pattern coordinate space. In the old interface all the per-view vectors are concatenated.</param>
            <param name="imagePoints">Vector of vectors (vector&lt;vector&lt;Point2d&gt;&gt;) of the projections of the calibration pattern points. In the old interface all the per-view vectors are concatenated.</param>
            <param name="imageSize">Image size in pixels used to initialize the principal point.</param>
            <param name="aspectRatio">If it is zero or negative, both f_x and f_y are estimated independently. Otherwise, f_x = f_y * aspectRatio .</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.InitCameraMatrix2D(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point3d}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2d}},OpenCvSharp.CPlusPlus.Size,System.Double)">
            <summary>
            initializes camera matrix from a few 3D points and the corresponding projections.
            </summary>
            <param name="objectPoints">Vector of vectors of the calibration pattern points in the calibration pattern coordinate space. In the old interface all the per-view vectors are concatenated.</param>
            <param name="imagePoints">Vector of vectors of the projections of the calibration pattern points. In the old interface all the per-view vectors are concatenated.</param>
            <param name="imageSize">Image size in pixels used to initialize the principal point.</param>
            <param name="aspectRatio">If it is zero or negative, both f_x and f_y are estimated independently. Otherwise, f_x = f_y * aspectRatio .</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FindChessboardCorners(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.ChessboardFlag)">
            <summary>
            Finds the positions of internal corners of the chessboard.
            </summary>
            <param name="image">Source chessboard view. It must be an 8-bit grayscale or color image.</param>
            <param name="patternSize">Number of inner corners per a chessboard row and column 
            ( patternSize = Size(points_per_row,points_per_colum) = Size(columns, rows) ).</param>
            <param name="corners">Output array of detected corners.</param>
            <param name="flags">Various operation flags that can be zero or a combination of the ChessboardFlag values</param>
            <returns>The function returns true if all of the corners are found and they are placed in a certain order (row by row, left to right in every row). 
            Otherwise, if the function fails to find all the corners or reorder them, it returns false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FindChessboardCorners(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Point2f[]@,OpenCvSharp.ChessboardFlag)">
            <summary>
            Finds the positions of internal corners of the chessboard.
            </summary>
            <param name="image">Source chessboard view. It must be an 8-bit grayscale or color image.</param>
            <param name="patternSize">Number of inner corners per a chessboard row and column 
            ( patternSize = Size(points_per_row,points_per_colum) = Size(columns, rows) ).</param>
            <param name="corners">Output array of detected corners.</param>
            <param name="flags">Various operation flags that can be zero or a combination of the ChessboardFlag values</param>
            <returns>The function returns true if all of the corners are found and they are placed in a certain order (row by row, left to right in every row). 
            Otherwise, if the function fails to find all the corners or reorder them, it returns false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Find4QuadCornerSubpix(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Size)">
            <summary>
            finds subpixel-accurate positions of the chessboard corners
            </summary>
            <param name="img"></param>
            <param name="corners"></param>
            <param name="regionSize"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Find4QuadCornerSubpix(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Point2f[],OpenCvSharp.CPlusPlus.Size)">
            <summary>
            finds subpixel-accurate positions of the chessboard corners
            </summary>
            <param name="img"></param>
            <param name="corners"></param>
            <param name="regionSize"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.DrawChessboardCorners(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.InputArray,System.Boolean)">
            <summary>
            Renders the detected chessboard corners.
            </summary>
            <param name="image">Destination image. It must be an 8-bit color image.</param>
            <param name="patternSize">Number of inner corners per a chessboard row and column (patternSize = cv::Size(points_per_row,points_per_column)).</param>
            <param name="corners">Array of detected corners, the output of findChessboardCorners.</param>
            <param name="patternWasFound">Parameter indicating whether the complete board was found or not. The return value of findChessboardCorners() should be passed here.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.DrawChessboardCorners(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Size,System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},System.Boolean)">
            <summary>
            Renders the detected chessboard corners.
            </summary>
            <param name="image">Destination image. It must be an 8-bit color image.</param>
            <param name="patternSize">Number of inner corners per a chessboard row and column (patternSize = cv::Size(points_per_row,points_per_column)).</param>
            <param name="corners">Array of detected corners, the output of findChessboardCorners.</param>
            <param name="patternWasFound">Parameter indicating whether the complete board was found or not. The return value of findChessboardCorners() should be passed here.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FindCirclesGrid(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.FindCirclesGridFlag,OpenCvSharp.CPlusPlus.FeatureDetector)">
            <summary>
            Finds centers in the grid of circles.
            </summary>
            <param name="image">grid view of input circles; it must be an 8-bit grayscale or color image.</param>
            <param name="patternSize">number of circles per row and column ( patternSize = Size(points_per_row, points_per_colum) ).</param>
            <param name="centers">output array of detected centers.</param>
            <param name="flags">various operation flags that can be one of the FindCirclesGridFlag values</param>
            <param name="blobDetector">feature detector that finds blobs like dark circles on light background.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FindCirclesGrid(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Point2f[]@,OpenCvSharp.CPlusPlus.FindCirclesGridFlag,OpenCvSharp.CPlusPlus.FeatureDetector)">
            <summary>
            Finds centers in the grid of circles.
            </summary>
            <param name="image">grid view of input circles; it must be an 8-bit grayscale or color image.</param>
            <param name="patternSize">number of circles per row and column ( patternSize = Size(points_per_row, points_per_colum) ).</param>
            <param name="centers">output array of detected centers.</param>
            <param name="flags">various operation flags that can be one of the FindCirclesGridFlag values</param>
            <param name="blobDetector">feature detector that finds blobs like dark circles on light background.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalibrateCamera(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Mat[]@,OpenCvSharp.CPlusPlus.Mat[]@,OpenCvSharp.CalibrationFlag,System.Nullable{OpenCvSharp.CPlusPlus.TermCriteria})">
            <summary>
            finds intrinsic and extrinsic camera parameters from several fews of a known calibration pattern.
            </summary>
            <param name="objectPoints">In the new interface it is a vector of vectors of calibration pattern points in the calibration pattern coordinate space. 
            The outer vector contains as many elements as the number of the pattern views. If the same calibration pattern is shown in each view and 
            it is fully visible, all the vectors will be the same. Although, it is possible to use partially occluded patterns, or even different patterns 
            in different views. Then, the vectors will be different. The points are 3D, but since they are in a pattern coordinate system, then, 
            if the rig is planar, it may make sense to put the model to a XY coordinate plane so that Z-coordinate of each input object point is 0.
            In the old interface all the vectors of object points from different views are concatenated together.</param>
            <param name="imagePoints">In the new interface it is a vector of vectors of the projections of calibration pattern points. 
            imagePoints.Count() and objectPoints.Count() and imagePoints[i].Count() must be equal to objectPoints[i].Count() for each i.</param>
            <param name="imageSize">Size of the image used only to initialize the intrinsic camera matrix.</param>
            <param name="cameraMatrix">Output 3x3 floating-point camera matrix. 
            If CV_CALIB_USE_INTRINSIC_GUESS and/or CV_CALIB_FIX_ASPECT_RATIO are specified, some or all of fx, fy, cx, cy must be 
            initialized before calling the function.</param>
            <param name="distCoeffs">Output vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, or 8 elements.</param>
            <param name="rvecs">Output vector of rotation vectors (see Rodrigues() ) estimated for each pattern view. That is, each k-th rotation vector 
            together with the corresponding k-th translation vector (see the next output parameter description) brings the calibration pattern 
            from the model coordinate space (in which object points are specified) to the world coordinate space, that is, a real position of the 
            calibration pattern in the k-th pattern view (k=0.. M -1)</param>
            <param name="tvecs">Output vector of translation vectors estimated for each pattern view.</param>
            <param name="flags">Different flags that may be zero or a combination of the CalibrationFlag values</param>
            <param name="criteria">Termination criteria for the iterative optimization algorithm.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalibrateCamera(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point3d}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2d}},OpenCvSharp.CPlusPlus.Size,System.Double[0:,0:],System.Double[],OpenCvSharp.CPlusPlus.Vec3d[]@,OpenCvSharp.CPlusPlus.Vec3d[]@,OpenCvSharp.CalibrationFlag,System.Nullable{OpenCvSharp.CPlusPlus.TermCriteria})">
            <summary>
            finds intrinsic and extrinsic camera parameters from several fews of a known calibration pattern.
            </summary>
            <param name="objectPoints">In the new interface it is a vector of vectors of calibration pattern points in the calibration pattern coordinate space. 
            The outer vector contains as many elements as the number of the pattern views. If the same calibration pattern is shown in each view and 
            it is fully visible, all the vectors will be the same. Although, it is possible to use partially occluded patterns, or even different patterns 
            in different views. Then, the vectors will be different. The points are 3D, but since they are in a pattern coordinate system, then, 
            if the rig is planar, it may make sense to put the model to a XY coordinate plane so that Z-coordinate of each input object point is 0.
            In the old interface all the vectors of object points from different views are concatenated together.</param>
            <param name="imagePoints">In the new interface it is a vector of vectors of the projections of calibration pattern points. 
            imagePoints.Count() and objectPoints.Count() and imagePoints[i].Count() must be equal to objectPoints[i].Count() for each i.</param>
            <param name="imageSize">Size of the image used only to initialize the intrinsic camera matrix.</param>
            <param name="cameraMatrix">Output 3x3 floating-point camera matrix. 
            If CV_CALIB_USE_INTRINSIC_GUESS and/or CV_CALIB_FIX_ASPECT_RATIO are specified, some or all of fx, fy, cx, cy must be 
            initialized before calling the function.</param>
            <param name="distCoeffs">Output vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, or 8 elements.</param>
            <param name="rvecs">Output vector of rotation vectors (see Rodrigues() ) estimated for each pattern view. That is, each k-th rotation vector 
            together with the corresponding k-th translation vector (see the next output parameter description) brings the calibration pattern 
            from the model coordinate space (in which object points are specified) to the world coordinate space, that is, a real position of the 
            calibration pattern in the k-th pattern view (k=0.. M -1)</param>
            <param name="tvecs">Output vector of translation vectors estimated for each pattern view.</param>
            <param name="flags">Different flags that may be zero or a combination of the CalibrationFlag values</param>
            <param name="criteria">Termination criteria for the iterative optimization algorithm.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalibrationMatrixValues(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Size,System.Double,System.Double,System.Double@,System.Double@,System.Double@,OpenCvSharp.CPlusPlus.Point2d@,System.Double@)">
            <summary>
            computes several useful camera characteristics from the camera matrix, camera frame resolution and the physical sensor size.
            </summary>
            <param name="cameraMatrix">Input camera matrix that can be estimated by calibrateCamera() or stereoCalibrate() .</param>
            <param name="imageSize">Input image size in pixels.</param>
            <param name="apertureWidth">Physical width of the sensor.</param>
            <param name="apertureHeight">Physical height of the sensor.</param>
            <param name="fovx">Output field of view in degrees along the horizontal sensor axis.</param>
            <param name="fovy">Output field of view in degrees along the vertical sensor axis.</param>
            <param name="focalLength">Focal length of the lens in mm.</param>
            <param name="principalPoint">Principal point in pixels.</param>
            <param name="aspectRatio">fy / fx</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalibrationMatrixValues(System.Double[0:,0:],OpenCvSharp.CPlusPlus.Size,System.Double,System.Double,System.Double@,System.Double@,System.Double@,OpenCvSharp.CPlusPlus.Point2d@,System.Double@)">
            <summary>
            computes several useful camera characteristics from the camera matrix, camera frame resolution and the physical sensor size.
            </summary>
            <param name="cameraMatrix">Input camera matrix that can be estimated by calibrateCamera() or stereoCalibrate() .</param>
            <param name="imageSize">Input image size in pixels.</param>
            <param name="apertureWidth">Physical width of the sensor.</param>
            <param name="apertureHeight">Physical height of the sensor.</param>
            <param name="fovx">Output field of view in degrees along the horizontal sensor axis.</param>
            <param name="fovy">Output field of view in degrees along the vertical sensor axis.</param>
            <param name="focalLength">Focal length of the lens in mm.</param>
            <param name="principalPoint">Principal point in pixels.</param>
            <param name="aspectRatio">fy / fx</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.StereoCalibrate(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.InputArray},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.InputArray},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.InputArray},OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Nullable{OpenCvSharp.CPlusPlus.TermCriteria},OpenCvSharp.CalibrationFlag)">
            <summary>
            finds intrinsic and extrinsic parameters of a stereo camera
            </summary>
            <param name="objectPoints">Vector of vectors of the calibration pattern points.</param>
            <param name="imagePoints1">Vector of vectors of the projections of the calibration pattern points, observed by the first camera.</param>
            <param name="imagePoints2">Vector of vectors of the projections of the calibration pattern points, observed by the second camera.</param>
            <param name="cameraMatrix1">Input/output first camera matrix</param>
            <param name="distCoeffs1">Input/output vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, or 8 elements. 
            The output vector length depends on the flags.</param>
            <param name="cameraMatrix2"> Input/output second camera matrix. The parameter is similar to cameraMatrix1 .</param>
            <param name="distCoeffs2">Input/output lens distortion coefficients for the second camera. The parameter is similar to distCoeffs1 .</param>
            <param name="imageSize">Size of the image used only to initialize intrinsic camera matrix.</param>
            <param name="R">Output rotation matrix between the 1st and the 2nd camera coordinate systems.</param>
            <param name="T">Output translation vector between the coordinate systems of the cameras.</param>
            <param name="E">Output essential matrix.</param>
            <param name="F">Output fundamental matrix.</param>
            <param name="criteria">Termination criteria for the iterative optimization algorithm.</param>
            <param name="flags">Different flags that may be zero or a combination of the CalibrationFlag values</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.StereoCalibrate(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point3d}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2d}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2d}},System.Double[0:,0:],System.Double[],System.Double[0:,0:],System.Double[],OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Nullable{OpenCvSharp.CPlusPlus.TermCriteria},OpenCvSharp.CalibrationFlag)">
            <summary>
            finds intrinsic and extrinsic parameters of a stereo camera
            </summary>
            <param name="objectPoints">Vector of vectors of the calibration pattern points.</param>
            <param name="imagePoints1">Vector of vectors of the projections of the calibration pattern points, observed by the first camera.</param>
            <param name="imagePoints2">Vector of vectors of the projections of the calibration pattern points, observed by the second camera.</param>
            <param name="cameraMatrix1">Input/output first camera matrix</param>
            <param name="distCoeffs1">Input/output vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, or 8 elements. 
            The output vector length depends on the flags.</param>
            <param name="cameraMatrix2"> Input/output second camera matrix. The parameter is similar to cameraMatrix1 .</param>
            <param name="distCoeffs2">Input/output lens distortion coefficients for the second camera. The parameter is similar to distCoeffs1 .</param>
            <param name="imageSize">Size of the image used only to initialize intrinsic camera matrix.</param>
            <param name="R">Output rotation matrix between the 1st and the 2nd camera coordinate systems.</param>
            <param name="T">Output translation vector between the coordinate systems of the cameras.</param>
            <param name="E">Output essential matrix.</param>
            <param name="F">Output fundamental matrix.</param>
            <param name="criteria">Termination criteria for the iterative optimization algorithm.</param>
            <param name="flags">Different flags that may be zero or a combination of the CalibrationFlag values</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.StereoRectify(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.StereoRectificationFlag,System.Double,System.Nullable{OpenCvSharp.CPlusPlus.Size})">
            <summary>
            computes the rectification transformation for a stereo camera from its intrinsic and extrinsic parameters
            </summary>
            <param name="cameraMatrix1">First camera matrix.</param>
            <param name="distCoeffs1">First camera distortion parameters.</param>
            <param name="cameraMatrix2">Second camera matrix.</param>
            <param name="distCoeffs2">Second camera distortion parameters.</param>
            <param name="imageSize">Size of the image used for stereo calibration.</param>
            <param name="R">Rotation matrix between the coordinate systems of the first and the second cameras.</param>
            <param name="T">Translation vector between coordinate systems of the cameras.</param>
            <param name="R1">Output 3x3 rectification transform (rotation matrix) for the first camera.</param>
            <param name="R2"> Output 3x3 rectification transform (rotation matrix) for the second camera.</param>
            <param name="P1">Output 3x4 projection matrix in the new (rectified) coordinate systems for the first camera.</param>
            <param name="P2">Output 3x4 projection matrix in the new (rectified) coordinate systems for the second camera.</param>
            <param name="Q">Output 4x4 disparity-to-depth mapping matrix (see reprojectImageTo3D() ).</param>
            <param name="flags">Operation flags that may be zero or CV_CALIB_ZERO_DISPARITY. 
            If the flag is set, the function makes the principal points of each camera have the same pixel coordinates in the rectified views. 
            And if the flag is not set, the function may still shift the images in the horizontal or vertical direction (depending on the orientation of epipolar lines) to maximize the useful image area.</param>
            <param name="alpha">Free scaling parameter. 
            If it is -1 or absent, the function performs the default scaling. Otherwise, the parameter should be between 0 and 1. 
            alpha=0 means that the rectified images are zoomed and shifted so that only valid pixels are visible (no black areas after rectification). 
            alpha=1 means that the rectified image is decimated and shifted so that all the pixels from the original images from the cameras are retained 
            in the rectified images (no source image pixels are lost). Obviously, any intermediate value yields an intermediate result between those two extreme cases.</param>
            <param name="newImageSize">New image resolution after rectification. The same size should be passed to initUndistortRectifyMap(). When (0,0) is passed (default), it is set to the original imageSize . 
            Setting it to larger value can help you preserve details in the original image, especially when there is a big radial distortion.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.StereoRectify(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.StereoRectificationFlag,System.Double,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Rect@,OpenCvSharp.CPlusPlus.Rect@)">
            <summary>
            computes the rectification transformation for a stereo camera from its intrinsic and extrinsic parameters
            </summary>
            <param name="cameraMatrix1">First camera matrix.</param>
            <param name="distCoeffs1">First camera distortion parameters.</param>
            <param name="cameraMatrix2">Second camera matrix.</param>
            <param name="distCoeffs2">Second camera distortion parameters.</param>
            <param name="imageSize">Size of the image used for stereo calibration.</param>
            <param name="R">Rotation matrix between the coordinate systems of the first and the second cameras.</param>
            <param name="T">Translation vector between coordinate systems of the cameras.</param>
            <param name="R1">Output 3x3 rectification transform (rotation matrix) for the first camera.</param>
            <param name="R2"> Output 3x3 rectification transform (rotation matrix) for the second camera.</param>
            <param name="P1">Output 3x4 projection matrix in the new (rectified) coordinate systems for the first camera.</param>
            <param name="P2">Output 3x4 projection matrix in the new (rectified) coordinate systems for the second camera.</param>
            <param name="Q">Output 4x4 disparity-to-depth mapping matrix (see reprojectImageTo3D() ).</param>
            <param name="flags">Operation flags that may be zero or CV_CALIB_ZERO_DISPARITY. 
            If the flag is set, the function makes the principal points of each camera have the same pixel coordinates in the rectified views. 
            And if the flag is not set, the function may still shift the images in the horizontal or vertical direction (depending on the orientation of epipolar lines) to maximize the useful image area.</param>
            <param name="alpha">Free scaling parameter. 
            If it is -1 or absent, the function performs the default scaling. Otherwise, the parameter should be between 0 and 1. 
            alpha=0 means that the rectified images are zoomed and shifted so that only valid pixels are visible (no black areas after rectification). 
            alpha=1 means that the rectified image is decimated and shifted so that all the pixels from the original images from the cameras are retained 
            in the rectified images (no source image pixels are lost). Obviously, any intermediate value yields an intermediate result between those two extreme cases.</param>
            <param name="newImageSize">New image resolution after rectification. The same size should be passed to initUndistortRectifyMap(). When (0,0) is passed (default), it is set to the original imageSize . 
            Setting it to larger value can help you preserve details in the original image, especially when there is a big radial distortion.</param>
            <param name="validPixROI1">Optional output rectangles inside the rectified images where all the pixels are valid. If alpha=0 , the ROIs cover the whole images. 
            Otherwise, they are likely to be smaller.</param>
            <param name="validPixROI2">Optional output rectangles inside the rectified images where all the pixels are valid. If alpha=0 , the ROIs cover the whole images. 
            Otherwise, they are likely to be smaller.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.StereoRectify(System.Double[0:,0:],System.Double[],System.Double[0:,0:],System.Double[],OpenCvSharp.CPlusPlus.Size,System.Double[0:,0:],System.Double[],System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@,OpenCvSharp.StereoRectificationFlag,System.Double,System.Nullable{OpenCvSharp.CPlusPlus.Size})">
            <summary>
            computes the rectification transformation for a stereo camera from its intrinsic and extrinsic parameters
            </summary>
            <param name="cameraMatrix1">First camera matrix.</param>
            <param name="distCoeffs1">First camera distortion parameters.</param>
            <param name="cameraMatrix2">Second camera matrix.</param>
            <param name="distCoeffs2">Second camera distortion parameters.</param>
            <param name="imageSize">Size of the image used for stereo calibration.</param>
            <param name="R">Rotation matrix between the coordinate systems of the first and the second cameras.</param>
            <param name="T">Translation vector between coordinate systems of the cameras.</param>
            <param name="R1">Output 3x3 rectification transform (rotation matrix) for the first camera.</param>
            <param name="R2"> Output 3x3 rectification transform (rotation matrix) for the second camera.</param>
            <param name="P1">Output 3x4 projection matrix in the new (rectified) coordinate systems for the first camera.</param>
            <param name="P2">Output 3x4 projection matrix in the new (rectified) coordinate systems for the second camera.</param>
            <param name="Q">Output 4x4 disparity-to-depth mapping matrix (see reprojectImageTo3D() ).</param>
            <param name="flags">Operation flags that may be zero or CV_CALIB_ZERO_DISPARITY. 
            If the flag is set, the function makes the principal points of each camera have the same pixel coordinates in the rectified views. 
            And if the flag is not set, the function may still shift the images in the horizontal or vertical direction (depending on the orientation of epipolar lines) to maximize the useful image area.</param>
            <param name="alpha">Free scaling parameter. 
            If it is -1 or absent, the function performs the default scaling. Otherwise, the parameter should be between 0 and 1. 
            alpha=0 means that the rectified images are zoomed and shifted so that only valid pixels are visible (no black areas after rectification). 
            alpha=1 means that the rectified image is decimated and shifted so that all the pixels from the original images from the cameras are retained 
            in the rectified images (no source image pixels are lost). Obviously, any intermediate value yields an intermediate result between those two extreme cases.</param>
            <param name="newImageSize">New image resolution after rectification. The same size should be passed to initUndistortRectifyMap(). When (0,0) is passed (default), it is set to the original imageSize . 
            Setting it to larger value can help you preserve details in the original image, especially when there is a big radial distortion.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.StereoRectify(System.Double[0:,0:],System.Double[],System.Double[0:,0:],System.Double[],OpenCvSharp.CPlusPlus.Size,System.Double[0:,0:],System.Double[],System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@,OpenCvSharp.StereoRectificationFlag,System.Double,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Rect@,OpenCvSharp.CPlusPlus.Rect@)">
            <summary>
            computes the rectification transformation for a stereo camera from its intrinsic and extrinsic parameters
            </summary>
            <param name="cameraMatrix1">First camera matrix.</param>
            <param name="distCoeffs1">First camera distortion parameters.</param>
            <param name="cameraMatrix2">Second camera matrix.</param>
            <param name="distCoeffs2">Second camera distortion parameters.</param>
            <param name="imageSize">Size of the image used for stereo calibration.</param>
            <param name="R">Rotation matrix between the coordinate systems of the first and the second cameras.</param>
            <param name="T">Translation vector between coordinate systems of the cameras.</param>
            <param name="R1">Output 3x3 rectification transform (rotation matrix) for the first camera.</param>
            <param name="R2"> Output 3x3 rectification transform (rotation matrix) for the second camera.</param>
            <param name="P1">Output 3x4 projection matrix in the new (rectified) coordinate systems for the first camera.</param>
            <param name="P2">Output 3x4 projection matrix in the new (rectified) coordinate systems for the second camera.</param>
            <param name="Q">Output 4x4 disparity-to-depth mapping matrix (see reprojectImageTo3D() ).</param>
            <param name="flags">Operation flags that may be zero or CV_CALIB_ZERO_DISPARITY. 
            If the flag is set, the function makes the principal points of each camera have the same pixel coordinates in the rectified views. 
            And if the flag is not set, the function may still shift the images in the horizontal or vertical direction (depending on the orientation of epipolar lines) to maximize the useful image area.</param>
            <param name="alpha">Free scaling parameter. 
            If it is -1 or absent, the function performs the default scaling. Otherwise, the parameter should be between 0 and 1. 
            alpha=0 means that the rectified images are zoomed and shifted so that only valid pixels are visible (no black areas after rectification). 
            alpha=1 means that the rectified image is decimated and shifted so that all the pixels from the original images from the cameras are retained 
            in the rectified images (no source image pixels are lost). Obviously, any intermediate value yields an intermediate result between those two extreme cases.</param>
            <param name="newImageSize">New image resolution after rectification. The same size should be passed to initUndistortRectifyMap(). When (0,0) is passed (default), it is set to the original imageSize . 
            Setting it to larger value can help you preserve details in the original image, especially when there is a big radial distortion.</param>
            <param name="validPixROI1">Optional output rectangles inside the rectified images where all the pixels are valid. If alpha=0 , the ROIs cover the whole images. 
            Otherwise, they are likely to be smaller.</param>
            <param name="validPixROI2">Optional output rectangles inside the rectified images where all the pixels are valid. If alpha=0 , the ROIs cover the whole images. 
            Otherwise, they are likely to be smaller.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.StereoRectifyUncalibrated(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double)">
            <summary>
            computes the rectification transformation for an uncalibrated stereo camera (zero distortion is assumed)
            </summary>
            <param name="points1">Array of feature points in the first image.</param>
            <param name="points2">The corresponding points in the second image. 
            The same formats as in findFundamentalMat() are supported.</param>
            <param name="F">Input fundamental matrix. It can be computed from the same set 
            of point pairs using findFundamentalMat() .</param>
            <param name="imgSize">Size of the image.</param>
            <param name="H1">Output rectification homography matrix for the first image.</param>
            <param name="H2">Output rectification homography matrix for the second image.</param>
            <param name="threshold">Optional threshold used to filter out the outliers. 
            If the parameter is greater than zero, all the point pairs that do not comply 
            with the epipolar geometry (that is, the points for which |points2[i]^T * F * points1[i]| > threshold ) 
            are rejected prior to computing the homographies. Otherwise, all the points are considered inliers.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.StereoRectifyUncalibrated(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2d},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2d},System.Double[0:,0:],OpenCvSharp.CPlusPlus.Size,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double)">
            <summary>
            computes the rectification transformation for an uncalibrated stereo camera (zero distortion is assumed)
            </summary>
            <param name="points1">Array of feature points in the first image.</param>
            <param name="points2">The corresponding points in the second image. 
            The same formats as in findFundamentalMat() are supported.</param>
            <param name="F">Input fundamental matrix. It can be computed from the same set 
            of point pairs using findFundamentalMat() .</param>
            <param name="imgSize">Size of the image.</param>
            <param name="H1">Output rectification homography matrix for the first image.</param>
            <param name="H2">Output rectification homography matrix for the second image.</param>
            <param name="threshold">Optional threshold used to filter out the outliers. 
            If the parameter is greater than zero, all the point pairs that do not comply 
            with the epipolar geometry (that is, the points for which |points2[i]^T * F * points1[i]| > threshold ) 
            are rejected prior to computing the homographies. Otherwise, all the points are considered inliers.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Rectify3Collinear(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.InputArray},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.InputArray},OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Rect@,OpenCvSharp.CPlusPlus.Rect@,OpenCvSharp.StereoRectificationFlag)">
            <summary>
            computes the rectification transformations for 3-head camera, where all the heads are on the same line.
            </summary>
            <param name="cameraMatrix1"></param>
            <param name="distCoeffs1"></param>
            <param name="cameraMatrix2"></param>
            <param name="distCoeffs2"></param>
            <param name="cameraMatrix3"></param>
            <param name="distCoeffs3"></param>
            <param name="imgpt1"></param>
            <param name="imgpt3"></param>
            <param name="imageSize"></param>
            <param name="R12"></param>
            <param name="T12"></param>
            <param name="R13"></param>
            <param name="T13"></param>
            <param name="R1"></param>
            <param name="R2"></param>
            <param name="R3"></param>
            <param name="P1"></param>
            <param name="P2"></param>
            <param name="P3"></param>
            <param name="Q"></param>
            <param name="alpha"></param>
            <param name="newImgSize"></param>
            <param name="roi1"></param>
            <param name="roi2"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetOptimalNewCameraMatrix(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Size,System.Double,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Rect@,System.Boolean)">
            <summary>
            Returns the new camera matrix based on the free scaling parameter.
            </summary>
            <param name="cameraMatrix">Input camera matrix.</param>
            <param name="distCoeffs">Input vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, or 8 elements. 
            If the array is null, the zero distortion coefficients are assumed.</param>
            <param name="imageSize">Original image size.</param>
            <param name="alpha">Free scaling parameter between 0 (when all the pixels in the undistorted image are valid) 
            and 1 (when all the source image pixels are retained in the undistorted image). </param>
            <param name="newImgSize">Image size after rectification. By default,it is set to imageSize .</param>
            <param name="validPixROI">Optional output rectangle that outlines all-good-pixels region in the undistorted image. See roi1, roi2 description in stereoRectify() .</param>
            <param name="centerPrincipalPoint">Optional flag that indicates whether in the new camera matrix the principal point 
            should be at the image center or not. By default, the principal point is chosen to best fit a 
            subset of the source image (determined by alpha) to the corrected image.</param>
            <returns>optimal new camera matrix</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetOptimalNewCameraMatrix(System.Double[0:,0:],System.Double[],OpenCvSharp.CPlusPlus.Size,System.Double,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Rect@,System.Boolean)">
            <summary>
            Returns the new camera matrix based on the free scaling parameter.
            </summary>
            <param name="cameraMatrix">Input camera matrix.</param>
            <param name="distCoeffs">Input vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, or 8 elements. 
            If the array is null, the zero distortion coefficients are assumed.</param>
            <param name="imageSize">Original image size.</param>
            <param name="alpha">Free scaling parameter between 0 (when all the pixels in the undistorted image are valid) 
            and 1 (when all the source image pixels are retained in the undistorted image). </param>
            <param name="newImgSize">Image size after rectification. By default,it is set to imageSize .</param>
            <param name="validPixROI">Optional output rectangle that outlines all-good-pixels region in the undistorted image. See roi1, roi2 description in stereoRectify() .</param>
            <param name="centerPrincipalPoint">Optional flag that indicates whether in the new camera matrix the principal point 
            should be at the image center or not. By default, the principal point is chosen to best fit a 
            subset of the source image (determined by alpha) to the corrected image.</param>
            <returns>optimal new camera matrix</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ConvertPointsToHomogeneous(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            converts point coordinates from normal pixel coordinates to homogeneous coordinates ((x,y)->(x,y,1))
            </summary>
            <param name="src">Input vector of N-dimensional points.</param>
            <param name="dst">Output vector of N+1-dimensional points.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ConvertPointsToHomogeneous(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Vec2f})">
            <summary>
            converts point coordinates from normal pixel coordinates to homogeneous coordinates ((x,y)->(x,y,1))
            </summary>
            <param name="src">Input vector of N-dimensional points.</param>
            <returns>Output vector of N+1-dimensional points.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ConvertPointsToHomogeneous(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Vec3f})">
            <summary>
            converts point coordinates from normal pixel coordinates to homogeneous coordinates ((x,y)->(x,y,1))
            </summary>
            <param name="src">Input vector of N-dimensional points.</param>
            <returns>Output vector of N+1-dimensional points.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ConvertPointsFromHomogeneous(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            converts point coordinates from homogeneous to normal pixel coordinates ((x,y,z)->(x/z, y/z))
            </summary>
            <param name="src">Input vector of N-dimensional points.</param>
            <param name="dst">Output vector of N-1-dimensional points.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ConvertPointsFromHomogeneous(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Vec3f})">
            <summary>
            converts point coordinates from homogeneous to normal pixel coordinates ((x,y,z)->(x/z, y/z))
            </summary>
            <param name="src">Input vector of N-dimensional points.</param>
            <returns>Output vector of N-1-dimensional points.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ConvertPointsFromHomogeneous(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Vec4f})">
            <summary>
            converts point coordinates from homogeneous to normal pixel coordinates ((x,y,z)->(x/z, y/z))
            </summary>
            <param name="src">Input vector of N-dimensional points.</param>
            <returns>Output vector of N-1-dimensional points.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ConvertPointsHomogeneous(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Converts points to/from homogeneous coordinates.
            </summary>
            <param name="src">Input array or vector of 2D, 3D, or 4D points.</param>
            <param name="dst">Output vector of 2D, 3D, or 4D points.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FindFundamentalMat(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.FundamentalMatMethod,System.Double,System.Double,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Calculates a fundamental matrix from the corresponding points in two images.
            </summary>
            <param name="points1">Array of N points from the first image. 
            The point coordinates should be floating-point (single or double precision).</param>
            <param name="points2">Array of the second image points of the same size and format as points1 .</param>
            <param name="method">Method for computing a fundamental matrix.</param>
            <param name="param1">Parameter used for RANSAC. 
            It is the maximum distance from a point to an epipolar line in pixels, beyond which the point is 
            considered an outlier and is not used for computing the final fundamental matrix. It can be set to 
            something like 1-3, depending on the accuracy of the point localization, image resolution, and the image noise.</param>
            <param name="param2">Parameter used for the RANSAC or LMedS methods only. 
            It specifies a desirable level of confidence (probability) that the estimated matrix is correct.</param>
            <param name="mask">Output array of N elements, every element of which is set to 0 for outliers and 
            to 1 for the other points. The array is computed only in the RANSAC and LMedS methods. For other methods, it is set to all 1’s.</param>
            <returns>fundamental matrix</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FindFundamentalMat(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2d},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2d},OpenCvSharp.FundamentalMatMethod,System.Double,System.Double,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Calculates a fundamental matrix from the corresponding points in two images.
            </summary>
            <param name="points1">Array of N points from the first image. 
            The point coordinates should be floating-point (single or double precision).</param>
            <param name="points2">Array of the second image points of the same size and format as points1 .</param>
            <param name="method">Method for computing a fundamental matrix.</param>
            <param name="param1">Parameter used for RANSAC. 
            It is the maximum distance from a point to an epipolar line in pixels, beyond which the point is 
            considered an outlier and is not used for computing the final fundamental matrix. It can be set to 
            something like 1-3, depending on the accuracy of the point localization, image resolution, and the image noise.</param>
            <param name="param2">Parameter used for the RANSAC or LMedS methods only. 
            It specifies a desirable level of confidence (probability) that the estimated matrix is correct.</param>
            <param name="mask">Output array of N elements, every element of which is set to 0 for outliers and 
            to 1 for the other points. The array is computed only in the RANSAC and LMedS methods. For other methods, it is set to all 1’s.</param>
            <returns>fundamental matrix</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ComputeCorrespondEpilines(OpenCvSharp.CPlusPlus.InputArray,System.Int32,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            For points in an image of a stereo pair, computes the corresponding epilines in the other image.
            </summary>
            <param name="points">Input points. N \times 1 or 1 x N matrix of type CV_32FC2 or CV_64FC2.</param>
            <param name="whichImage">Index of the image (1 or 2) that contains the points .</param>
            <param name="F">Fundamental matrix that can be estimated using findFundamentalMat() or stereoRectify() .</param>
            <param name="lines">Output vector of the epipolar lines corresponding to the points in the other image.
             Each line ax + by + c=0 is encoded by 3 numbers (a, b, c) .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ComputeCorrespondEpilines(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2d},System.Int32,System.Double[0:,0:])">
            <summary>
            For points in an image of a stereo pair, computes the corresponding epilines in the other image.
            </summary>
            <param name="points">Input points. N \times 1 or 1 x N matrix of type CV_32FC2 or CV_64FC2.</param>
            <param name="whichImage">Index of the image (1 or 2) that contains the points .</param>
            <param name="F">Fundamental matrix that can be estimated using findFundamentalMat() or stereoRectify() .</param>
            <returns>Output vector of the epipolar lines corresponding to the points in the other image.
             Each line ax + by + c=0 is encoded by 3 numbers (a, b, c) .</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ComputeCorrespondEpilines(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point3d},System.Int32,System.Double[0:,0:])">
            <summary>
            For points in an image of a stereo pair, computes the corresponding epilines in the other image.
            </summary>
            <param name="points">Input points. N \times 1 or 1 x N matrix of type CV_32FC2 or CV_64FC2.</param>
            <param name="whichImage">Index of the image (1 or 2) that contains the points .</param>
            <param name="F">Fundamental matrix that can be estimated using findFundamentalMat() or stereoRectify() .</param>
            <returns>Output vector of the epipolar lines corresponding to the points in the other image.
             Each line ax + by + c=0 is encoded by 3 numbers (a, b, c) .</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.TriangulatePoints(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Reconstructs points by triangulation.
            </summary>
            <param name="projMatr1">3x4 projection matrix of the first camera.</param>
            <param name="projMatr2">3x4 projection matrix of the second camera.</param>
            <param name="projPoints1">2xN array of feature points in the first image. In case of c++ version 
            it can be also a vector of feature points or two-channel matrix of size 1xN or Nx1.</param>
            <param name="projPoints2">2xN array of corresponding points in the second image. In case of c++ version 
            it can be also a vector of feature points or two-channel matrix of size 1xN or Nx1.</param>
            <param name="points4D">4xN array of reconstructed points in homogeneous coordinates.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.TriangulatePoints(System.Double[0:,0:],System.Double[0:,0:],System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2d},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2d})">
            <summary>
            Reconstructs points by triangulation.
            </summary>
            <param name="projMatr1">3x4 projection matrix of the first camera.</param>
            <param name="projMatr2">3x4 projection matrix of the second camera.</param>
            <param name="projPoints1">2xN array of feature points in the first image. In case of c++ version 
            it can be also a vector of feature points or two-channel matrix of size 1xN or Nx1.</param>
            <param name="projPoints2">2xN array of corresponding points in the second image. In case of c++ version 
            it can be also a vector of feature points or two-channel matrix of size 1xN or Nx1.</param>
            <returns>4xN array of reconstructed points in homogeneous coordinates.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CorrectMatches(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Refines coordinates of corresponding points.
            </summary>
            <param name="F">3x3 fundamental matrix.</param>
            <param name="points1">1xN array containing the first set of points.</param>
            <param name="points2">1xN array containing the second set of points.</param>
            <param name="newPoints1">The optimized points1.</param>
            <param name="newPoints2">The optimized points2.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CorrectMatches(System.Double[0:,0:],System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2d},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2d},OpenCvSharp.CPlusPlus.Point2d[]@,OpenCvSharp.CPlusPlus.Point2d[]@)">
            <summary>
            Refines coordinates of corresponding points.
            </summary>
            <param name="F">3x3 fundamental matrix.</param>
            <param name="points1">1xN array containing the first set of points.</param>
            <param name="points2">1xN array containing the second set of points.</param>
            <param name="newPoints1">The optimized points1.</param>
            <param name="newPoints2">The optimized points2.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FilterSpeckles(OpenCvSharp.CPlusPlus.InputOutputArray,System.Double,System.Int32,System.Double,OpenCvSharp.CPlusPlus.InputOutputArray)">
            <summary>
            filters off speckles (small regions of incorrectly computed disparity)
            </summary>
            <param name="img">The input 16-bit signed disparity image</param>
            <param name="newVal">The disparity value used to paint-off the speckles</param>
            <param name="maxSpeckleSize">The maximum speckle size to consider it a speckle. Larger blobs are not affected by the algorithm</param>
            <param name="maxDiff">Maximum difference between neighbor disparity pixels to put them into the same blob. 
            Note that since StereoBM, StereoSGBM and may be other algorithms return a fixed-point disparity map, where disparity values 
            are multiplied by 16, this scale factor should be taken into account when specifying this parameter value.</param>
            <param name="buf">The optional temporary buffer to avoid memory allocation within the function.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetValidDisparityROI(OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.Rect,System.Int32,System.Int32,System.Int32)">
            <summary>
            computes valid disparity ROI from the valid ROIs of the rectified images (that are returned by cv::stereoRectify())
            </summary>
            <param name="roi1"></param>
            <param name="roi2"></param>
            <param name="minDisparity"></param>
            <param name="numberOfDisparities"></param>
            <param name="SADWindowSize"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ValidateDisparity(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.InputArray,System.Int32,System.Int32,System.Int32)">
            <summary>
            validates disparity using the left-right check. The matrix "cost" should be computed by the stereo correspondence algorithm
            </summary>
            <param name="disparity"></param>
            <param name="cost"></param>
            <param name="minDisparity"></param>
            <param name="numberOfDisparities"></param>
            <param name="disp12MaxDisp"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ReprojectImageTo3D(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray,System.Boolean,System.Int32)">
            <summary>
            reprojects disparity image to 3D: (x,y,d)->(X,Y,Z) using the matrix Q returned by cv::stereoRectify
            </summary>
            <param name="disparity">Input single-channel 8-bit unsigned, 16-bit signed, 32-bit signed or 32-bit floating-point disparity image.</param>
            <param name="_3dImage">Output 3-channel floating-point image of the same size as disparity. 
            Each element of _3dImage(x,y) contains 3D coordinates of the point (x,y) computed from the disparity map.</param>
            <param name="Q">4 x 4 perspective transformation matrix that can be obtained with stereoRectify().</param>
            <param name="handleMissingValues">Indicates, whether the function should handle missing values (i.e. points where the disparity was not computed). 
            If handleMissingValues=true, then pixels with the minimal disparity that corresponds to the outliers (see StereoBM::operator() ) are 
            transformed to 3D points with a very large Z value (currently set to 10000).</param>
            <param name="ddepth">he optional output array depth. If it is -1, the output image will have CV_32F depth. 
            ddepth can also be set to CV_16S, CV_32S or CV_32F.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.EstimateAffine3D(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double,System.Double)">
            <summary>
            Computes an optimal affine transformation between two 3D point sets.
            </summary>
            <param name="src">First input 3D point set.</param>
            <param name="dst">Second input 3D point set.</param>
            <param name="outVal">Output 3D affine transformation matrix 3 x 4 .</param>
            <param name="inliers">Output vector indicating which points are inliers.</param>
            <param name="ransacThreshold">Maximum reprojection error in the RANSAC algorithm to consider a point as an inlier.</param>
            <param name="confidence">Confidence level, between 0 and 1, for the estimated transformation. 
            Anything between 0.95 and 0.99 is usually good enough. Values too close to 1 can slow down the estimation significantly. 
            Values lower than 0.8-0.9 can result in an incorrectly estimated transformation.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.NamedWindow(System.String)">
            <summary>
            Creates a window.
            </summary>
            <param name="winname">Name of the window in the window caption that may be used as a window identifier.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.NamedWindow(System.String,OpenCvSharp.WindowMode)">
            <summary>
            Creates a window.
            </summary>
            <param name="winname">Name of the window in the window caption that may be used as a window identifier.</param>
            <param name="flags">
            Flags of the window. Currently the only supported flag is CV WINDOW AUTOSIZE. If this is set, 
            the window size is automatically adjusted to fit the displayed image (see imshow ), and the user can not change the window size manually.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.DestroyWindow(System.String)">
            <summary>
            
            </summary>
            <param name="winName"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.DestroyAllWindows">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ImShow(System.String,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Displays the image in the specified window
            </summary>
            <param name="winname">Name of the window.</param>
            <param name="mat">Image to be shown.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ImRead(System.String,OpenCvSharp.LoadMode)">
            <summary>
            Loads an image from a file.
            </summary>
            <param name="fileName">Name of file to be loaded.</param>
            <param name="flags">Specifies color type of the loaded image</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ImWrite(System.String,OpenCvSharp.CPlusPlus.Mat,System.Int32[])">
            <summary>
            Saves an image to a specified file.
            </summary>
            <param name="fileName"></param>
            <param name="img"></param>
            <param name="prms"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ImWrite(System.String,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            Saves an image to a specified file.
            </summary>
            <param name="fileName"></param>
            <param name="img"></param>
            <param name="prms"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ImDecode(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.LoadMode)">
            <summary>
            Reads image from the specified buffer in memory.
            </summary>
            <param name="buf">The input array of vector of bytes.</param>
            <param name="flags">The same flags as in imread</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ImDecode(System.Byte[],OpenCvSharp.LoadMode)">
            <summary>
            Reads image from the specified buffer in memory.
            </summary>
            <param name="buf">The input array of vector of bytes.</param>
            <param name="flags">The same flags as in imread</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ImEncode(System.String,OpenCvSharp.CPlusPlus.InputArray,System.Byte[]@,System.Int32[])">
            <summary>
            Compresses the image and stores it in the memory buffer
            </summary>
            <param name="ext">The file extension that defines the output format</param>
            <param name="img">The image to be written</param>
            <param name="buf"></param>
            <param name="prms"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ImEncode(System.String,OpenCvSharp.CPlusPlus.InputArray,System.Byte[]@,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            Compresses the image and stores it in the memory buffer
            </summary>
            <param name="ext">The file extension that defines the output format</param>
            <param name="img">The image to be written</param>
            <param name="buf"></param>
            <param name="prms"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.StartWindowThread">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.WaitKey(System.Int32)">
            <summary>
            Waits for a pressed key.
            </summary>
            <param name="delay">Delay in milliseconds. 0 is the special value that means ”forever”</param>
            <returns>Returns the code of the pressed key or -1 if no key was pressed before the specified time had elapsed.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ResizeWindow(System.String,System.Int32,System.Int32)">
            <summary>
            Resizes window to the specified size
            </summary>
            <param name="winName">Window name</param>
            <param name="width">The new window width</param>
            <param name="height">The new window height</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MoveWindow(System.String,System.Int32,System.Int32)">
            <summary>
            Moves window to the specified position
            </summary>
            <param name="winName">Window name</param>
            <param name="x">The new x-coordinate of the window</param>
            <param name="y">The new y-coordinate of the window</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SetWindowProperty(System.String,OpenCvSharp.WindowProperty,OpenCvSharp.WindowPropertyValue)">
            <summary>
            Changes parameters of a window dynamically.
            </summary>
            <param name="winName">Name of the window.</param>
            <param name="propId">Window property to retrieve.</param>
            <param name="propValue">New value of the window property.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SetWindowProperty(System.String,OpenCvSharp.WindowProperty,System.Double)">
            <summary>
            Changes parameters of a window dynamically.
            </summary>
            <param name="winName">Name of the window.</param>
            <param name="propId">Window property to retrieve.</param>
            <param name="propValue">New value of the window property.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetWindowProperty(System.String,OpenCvSharp.WindowProperty)">
            <summary>
            Provides parameters of a window.
            </summary>
            <param name="winName">Name of the window.</param>
            <param name="propId">Window property to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SetMouseCallback(System.String,OpenCvSharp.CvMouseCallback)">
            <summary>
            Sets the callback function for mouse events occuting within the specified window.
            </summary>
            <param name="windowName">Name of the window. </param>
            <param name="onMouse">Reference to the function to be called every time mouse event occurs in the specified window. </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SetNumThreads(System.Int32)">
            <summary>
            
            </summary>
            <param name="nthreads"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetNumThreads">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetThreadNum">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetBuildInformation">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetTickCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetTickFrequency">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetCpuTickCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CheckHardwareSupport(OpenCvSharp.HardwareSupport)">
            <summary>
            
            </summary>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FetNumberOfCpus">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FastMalloc(System.Int64)">
            <summary>
            
            </summary>
            <param name="bufSize"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FastFree(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SetUseOptimized(System.Boolean)">
            <summary>
            Turns on/off available optimization.
            The function turns on or off the optimized code in OpenCV. Some optimization can not be enabled
            or disabled, but, for example, most of SSE code in OpenCV can be temporarily turned on or off this way.
            </summary>
            <param name="onoff"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.UseOptimized">
            <summary>
            Returns the current optimization status.
            The function returns the current optimization status, which is controlled by cv::setUseOptimized().
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.AlignSize(System.Int32,System.Int32)">
            <summary>
            Aligns buffer size by the certain number of bytes
            This small inline function aligns a buffer size by 
            the certian number of bytes by enlarging it.
            </summary>
            <param name="sz"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CvArrToMat(OpenCvSharp.CvArr,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            
            </summary>
            <param name="arr"></param>
            <param name="copyData"></param>
            <param name="allowND"></param>
            <param name="coiMode"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ExtractImageCOI(OpenCvSharp.CvArr,OpenCvSharp.CPlusPlus.OutputArray,System.Int32)">
            <summary>
            Extract the selected image channel
            </summary>
            <param name="arr">The source array. It should be a pointer to CvMat or IplImage</param>
            <param name="coiimg">The destination array; will have single-channel, and the same size and the same depth as src</param>
            <param name="coi">If the parameter is &gt;=0, it specifies the channel to extract; 
            If it is &lt;0, src must be a pointer to IplImage with valid COI set - then the selected COI is extracted. [By default this is -1]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.InsertImageCOI(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CvArr,System.Int32)">
            <summary>
            
            </summary>
            <param name="coiimg"></param>
            <param name="arr"></param>
            <param name="coi">[By default this is -1]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Abs(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Computes absolute value of each matrix element
            </summary>
            <param name="src">matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Abs(OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            Computes absolute value of each matrix element
            </summary>
            <param name="src">matrix expression</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Add(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray,System.Int32)">
            <summary>
            Computes the per-element sum of two arrays or an array and a scalar.
            </summary>
            <param name="src1">The first source array</param>
            <param name="src2">The second source array. It must have the same size and same type as src1</param>
            <param name="dst">The destination array; it will have the same size and same type as src1</param>
            <param name="mask">The optional operation mask, 8-bit single channel array; specifies elements of the destination array to be changed. [By default this is null]</param>
            <param name="dtype"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Subtract(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray,System.Int32)">
            <summary>
            Calculates per-element difference between two arrays or array and a scalar
            </summary>
            <param name="src1">The first source array</param>
            <param name="src2">The second source array. It must have the same size and same type as src1</param>
            <param name="dst">The destination array; it will have the same size and same type as src1</param>
            <param name="mask">The optional operation mask, 8-bit single channel array; specifies elements of the destination array to be changed. [By default this is null]</param>
            <param name="dtype"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Multiply(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double,System.Int32)">
            <summary>
            Calculates the per-element scaled product of two arrays
            </summary>
            <param name="src1">The first source array</param>
            <param name="src2">The second source array of the same size and the same type as src1</param>
            <param name="dst">The destination array; will have the same size and the same type as src1</param>
            <param name="scale">The optional scale factor. [By default this is 1]</param>
            <param name="dtype"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Divide(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double,System.Int32)">
            <summary>
            Performs per-element division of two arrays or a scalar by an array.
            </summary>
            <param name="src1">The first source array</param>
            <param name="src2">The second source array; should have the same size and same type as src1</param>
            <param name="dst">The destination array; will have the same size and same type as src2</param>
            <param name="scale">Scale factor [By default this is 1]</param>
            <param name="dtype"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Divide(System.Double,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32)">
            <summary>
            Performs per-element division of two arrays or a scalar by an array.
            </summary>
            <param name="scale">Scale factor</param>
            <param name="src2">The first source array</param>
            <param name="dst">The destination array; will have the same size and same type as src2</param>
            <param name="dtype"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ScaleAdd(OpenCvSharp.CPlusPlus.InputArray,System.Double,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            adds scaled array to another one (dst = alpha*src1 + src2)
            </summary>
            <param name="src1"></param>
            <param name="alpha"></param>
            <param name="src2"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.AddWeighted(OpenCvSharp.CPlusPlus.InputArray,System.Double,OpenCvSharp.CPlusPlus.InputArray,System.Double,System.Double,OpenCvSharp.CPlusPlus.OutputArray,System.Int32)">
            <summary>
            computes weighted sum of two arrays (dst = alpha*src1 + beta*src2 + gamma)
            </summary>
            <param name="src1"></param>
            <param name="alpha"></param>
            <param name="src2"></param>
            <param name="beta"></param>
            <param name="gamma"></param>
            <param name="dst"></param>
            <param name="dtype"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ConvertScaleAbs(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double,System.Double)">
            <summary>
            Scales, computes absolute values and converts the result to 8-bit.
            </summary>
            <param name="src">The source array</param>
            <param name="dst">The destination array</param>
            <param name="alpha">The optional scale factor. [By default this is 1]</param>
            <param name="beta">The optional delta added to the scaled values. [By default this is 0]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.LUT(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32)">
            <summary>
            transforms array of numbers using a lookup table: dst(i)=lut(src(i))
            </summary>
            <param name="src">Source array of 8-bit elements</param>
            <param name="lut">Look-up table of 256 elements. 
            In the case of multi-channel source array, the table should either have 
            a single channel (in this case the same table is used for all channels)
             or the same number of channels as in the source array</param>
            <param name="dst">Destination array; 
            will have the same size and the same number of channels as src, 
            and the same depth as lut</param>
            <param name="interpolation"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.LUT(OpenCvSharp.CPlusPlus.InputArray,System.Byte[],OpenCvSharp.CPlusPlus.OutputArray,System.Int32)">
            <summary>
            transforms array of numbers using a lookup table: dst(i)=lut(src(i))
            </summary>
            <param name="src">Source array of 8-bit elements</param>
            <param name="lut">Look-up table of 256 elements. 
            In the case of multi-channel source array, the table should either have 
            a single channel (in this case the same table is used for all channels) 
            or the same number of channels as in the source array</param>
            <param name="dst">Destination array; 
            will have the same size and the same number of channels as src, 
            and the same depth as lut</param>
            <param name="interpolation"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Sum(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            computes sum of array elements
            </summary>
            <param name="src">The source array; must have 1 to 4 channels</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CountNonZero(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            computes the number of nonzero array elements
            </summary>
            <param name="mtx">Single-channel array</param>
            <returns>number of non-zero elements in mtx</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FindNonZero(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            returns the list of locations of non-zero pixels
            </summary>
            <param name="src"></param>
            <param name="idx"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Mean(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            computes mean value of selected array elements
            </summary>
            <param name="src">The source array; it should have 1 to 4 channels
             (so that the result can be stored in Scalar)</param>
            <param name="mask">The optional operation mask</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MeanStdDev(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            computes mean value and standard deviation of all or selected array elements
            </summary>
            <param name="src">The source array; it should have 1 to 4 channels 
            (so that the results can be stored in Scalar's)</param>
            <param name="mean">The output parameter: computed mean value</param>
            <param name="stddev">The output parameter: computed standard deviation</param>
            <param name="mask">The optional operation mask</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MeanStdDev(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Scalar@,OpenCvSharp.CPlusPlus.Scalar@,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            computes mean value and standard deviation of all or selected array elements
            </summary>
            <param name="src">The source array; it should have 1 to 4 channels 
            (so that the results can be stored in Scalar's)</param>
            <param name="mean">The output parameter: computed mean value</param>
            <param name="stddev">The output parameter: computed standard deviation</param>
            <param name="mask">The optional operation mask</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Norm(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.NormType,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Calculates absolute array norm, absolute difference norm, or relative difference norm.
            </summary>
            <param name="src1">The first source array</param>
            <param name="normType">Type of the norm</param>
            <param name="mask">The optional operation mask</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Norm(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.NormType,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            computes norm of selected part of the difference between two arrays
            </summary>
            <param name="src1">The first source array</param>
            <param name="src2">The second source array of the same size and the same type as src1</param>
            <param name="normType">Type of the norm</param>
            <param name="mask">The optional operation mask</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.BatchDistance(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.NormType,System.Int32,OpenCvSharp.CPlusPlus.InputArray,System.Int32,System.Boolean)">
            <summary>
            naive nearest neighbor finder
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="dist"></param>
            <param name="dtype"></param>
            <param name="nidx"></param>
            <param name="normType"></param>
            <param name="k"></param>
            <param name="mask"></param>
            <param name="update"></param>
            <param name="crosscheck"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Normalize(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double,System.Double,OpenCvSharp.NormType,System.Int32,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            scales and shifts array elements so that either the specified norm (alpha) 
            or the minimum (alpha) and maximum (beta) array values get the specified values
            </summary>
            <param name="src">The source array</param>
            <param name="dst">The destination array; will have the same size as src</param>
            <param name="alpha">The norm value to normalize to or the lower range boundary 
            in the case of range normalization</param>
            <param name="beta">The upper range boundary in the case of range normalization; 
            not used for norm normalization</param>
            <param name="normType">The normalization type</param>
            <param name="dtype">When the parameter is negative, 
            the destination array will have the same type as src, 
            otherwise it will have the same number of channels as src and the depth =CV_MAT_DEPTH(rtype)</param>
            <param name="mask">The optional operation mask</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MinMaxLoc(OpenCvSharp.CPlusPlus.InputArray,System.Double@,System.Double@)">
            <summary>
            finds global minimum and maximum array elements and returns their values and their locations
            </summary>
            <param name="src">The source single-channel array</param>
            <param name="minVal">Pointer to returned minimum value</param>
            <param name="maxVal">Pointer to returned maximum value</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MinMaxLoc(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Point@,OpenCvSharp.CPlusPlus.Point@)">
            <summary>
            finds global minimum and maximum array elements and returns their values and their locations
            </summary>
            <param name="src">The source single-channel array</param>
            <param name="minLoc">Pointer to returned minimum location</param>
            <param name="maxLoc">Pointer to returned maximum location</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MinMaxLoc(OpenCvSharp.CPlusPlus.InputArray,System.Double@,System.Double@,OpenCvSharp.CPlusPlus.Point@,OpenCvSharp.CPlusPlus.Point@,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            finds global minimum and maximum array elements and returns their values and their locations
            </summary>
            <param name="src">The source single-channel array</param>
            <param name="minVal">Pointer to returned minimum value</param>
            <param name="maxVal">Pointer to returned maximum value</param>
            <param name="minLoc">Pointer to returned minimum location</param>
            <param name="maxLoc">Pointer to returned maximum location</param>
            <param name="mask">The optional mask used to select a sub-array</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MinMaxIdx(OpenCvSharp.CPlusPlus.InputArray,System.Double@,System.Double@)">
            <summary>
            finds global minimum and maximum array elements and returns their values and their locations
            </summary>
            <param name="src">The source single-channel array</param>
            <param name="minVal">Pointer to returned minimum value</param>
            <param name="maxVal">Pointer to returned maximum value</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MinMaxIdx(OpenCvSharp.CPlusPlus.InputArray,System.Int32@,System.Int32@)">
            <summary>
            finds global minimum and maximum array elements and returns their values and their locations
            </summary>
            <param name="src">The source single-channel array</param>
            <param name="minIdx"></param>
            <param name="maxIdx"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MinMaxIdx(OpenCvSharp.CPlusPlus.InputArray,System.Double@,System.Double@,System.Int32@,System.Int32@,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            finds global minimum and maximum array elements and returns their values and their locations
            </summary>
            <param name="src">The source single-channel array</param>
            <param name="minVal">Pointer to returned minimum value</param>
            <param name="maxVal">Pointer to returned maximum value</param>
            <param name="minIdx"></param>
            <param name="maxIdx"></param>
            <param name="mask"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Reduce(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.ReduceDimension,OpenCvSharp.ReduceOperation,System.Int32)">
            <summary>
            transforms 2D matrix to 1D row or column vector by taking sum, minimum, maximum or mean value over all the rows
            </summary>
            <param name="src">The source 2D matrix</param>
            <param name="dst">The destination vector. 
            Its size and type is defined by dim and dtype parameters</param>
            <param name="dim">The dimension index along which the matrix is reduced. 
            0 means that the matrix is reduced to a single row and 1 means that the matrix is reduced to a single column</param>
            <param name="rtype"></param>
            <param name="dtype">When it is negative, the destination vector will have 
            the same type as the source matrix, otherwise, its type will be CV_MAKE_TYPE(CV_MAT_DEPTH(dtype), mtx.channels())</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Merge(OpenCvSharp.CPlusPlus.Mat[],OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            makes multi-channel array out of several single-channel arrays
            </summary>
            <param name="mv"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Split(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat[]@)">
            <summary>
            Copies each plane of a multi-channel array to a dedicated array
            </summary>
            <param name="src">The source multi-channel array</param>
            <param name="mv">The destination array or vector of arrays; 
            The number of arrays must match mtx.channels() . 
            The arrays themselves will be reallocated if needed</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Split(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Copies each plane of a multi-channel array to a dedicated array
            </summary>
            <param name="src">The source multi-channel array</param>
            <returns>The number of arrays must match mtx.channels() . 
            The arrays themselves will be reallocated if needed</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MixChannels(OpenCvSharp.CPlusPlus.Mat[],OpenCvSharp.CPlusPlus.Mat[],System.Int32[])">
            <summary>
            copies selected channels from the input arrays to the selected channels of the output arrays
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="fromTo"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ExtractChannel(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32)">
            <summary>
            extracts a single channel from src (coi is 0-based index)
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="coi"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.InsertChannel(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputOutputArray,System.Int32)">
            <summary>
            inserts a single channel to dst (coi is 0-based index)
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="coi"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Flip(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.FlipMode)">
            <summary>
            reverses the order of the rows, columns or both in a matrix
            </summary>
            <param name="src">The source array</param>
            <param name="dst">The destination array; will have the same size and same type as src</param>
            <param name="flipCode">Specifies how to flip the array: 
            0 means flipping around the x-axis, positive (e.g., 1) means flipping around y-axis, 
            and negative (e.g., -1) means flipping around both axes. See also the discussion below for the formulas.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Repeat(OpenCvSharp.CPlusPlus.InputArray,System.Int32,System.Int32,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            replicates the input matrix the specified number of times in the horizontal and/or vertical direction
            </summary>
            <param name="src">The source array to replicate</param>
            <param name="ny">How many times the src is repeated along the vertical axis</param>
            <param name="nx">How many times the src is repeated along the horizontal axis</param>
            <param name="dst">The destination array; will have the same type as src</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Repeat(OpenCvSharp.CPlusPlus.Mat,System.Int32,System.Int32)">
            <summary>
            replicates the input matrix the specified number of times in the horizontal and/or vertical direction
            </summary>
            <param name="src">The source array to replicate</param>
            <param name="ny">How many times the src is repeated along the vertical axis</param>
            <param name="nx">How many times the src is repeated along the horizontal axis</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.HConcat(OpenCvSharp.CPlusPlus.Mat[],OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.HConcat(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.VConcat(OpenCvSharp.CPlusPlus.Mat[],OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.VConcat(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.BitwiseAnd(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            computes bitwise conjunction of the two arrays (dst = src1 &amp; src2)
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="dst"></param>
            <param name="mask"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.BitwiseOr(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            computes bitwise disjunction of the two arrays (dst = src1 | src2)
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="dst"></param>
            <param name="mask"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.BitwiseXor(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            computes bitwise exclusive-or of the two arrays (dst = src1 ^ src2)
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="dst"></param>
            <param name="mask"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.BitwiseNot(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            inverts each bit of array (dst = ~src)
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="mask"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Absdiff(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            computes element-wise absolute difference of two arrays (dst = abs(src1 - src2))
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.InRange(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            set mask elements for those array elements which are within the element-specific bounding box (dst = lowerb &lt;= src &amp;&amp; src &lt; upperb)
            </summary>
            <param name="src">The first source array</param>
            <param name="lowerb">The inclusive lower boundary array of the same size and type as src</param>
            <param name="upperb">The exclusive upper boundary array of the same size and type as src</param>
            <param name="dst">The destination array, will have the same size as src and CV_8U type</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.InRange(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            set mask elements for those array elements which are within the element-specific bounding box (dst = lowerb &lt;= src &amp;&amp; src &lt; upperb)
            </summary>
            <param name="src">The first source array</param>
            <param name="lowerb">The inclusive lower boundary array of the same size and type as src</param>
            <param name="upperb">The exclusive upper boundary array of the same size and type as src</param>
            <param name="dst">The destination array, will have the same size as src and CV_8U type</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Compare(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.ArrComparison)">
            <summary>
            compares elements of two arrays (dst = src1 [cmpop] src2)
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="dst"></param>
            <param name="cmpop"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Min(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            computes per-element minimum of two arrays (dst = min(src1, src2))
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Min(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            computes per-element minimum of two arrays (dst = min(src1, src2))
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Min(OpenCvSharp.CPlusPlus.Mat,System.Double,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            computes per-element minimum of array and scalar (dst = min(src1, src2))
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Max(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            computes per-element maximum of two arrays (dst = max(src1, src2))
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Max(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            computes per-element maximum of two arrays (dst = max(src1, src2))
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Max(OpenCvSharp.CPlusPlus.Mat,System.Double,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            computes per-element maximum of array and scalar (dst = max(src1, src2))
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Sqrt(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            computes square root of each matrix element (dst = src**0.5)
            </summary>
            <param name="src">The source floating-point array</param>
            <param name="dst">The destination array; will have the same size and the same type as src</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Pow(OpenCvSharp.CPlusPlus.InputArray,System.Double,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            raises the input matrix elements to the specified power (b = a**power)
            </summary>
            <param name="src">The source array</param>
            <param name="power">The exponent of power</param>
            <param name="dst">The destination array; will have the same size and the same type as src</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Exp(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            computes exponent of each matrix element (dst = e**src)
            </summary>
            <param name="src">The source array</param>
            <param name="dst">The destination array; will have the same size and same type as src</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Exp(System.Single[])">
            <summary>
            
            </summary>
            <param name="src">The source array</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Log(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            computes natural logarithm of absolute value of each matrix element: dst = log(abs(src))
            </summary>
            <param name="src">The source array</param>
            <param name="dst">The destination array; will have the same size and same type as src</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Log(System.Single[])">
            <summary>
            
            </summary>
            <param name="src">The source array</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CubeRoot(System.Single)">
            <summary>
            computes cube root of the argument
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FastAtan2(System.Single,System.Single)">
            <summary>
            computes the angle in degrees (0..360) of the vector (x,y)
            </summary>
            <param name="y"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FastAtan2(System.Single[],System.Single[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="x"></param>
            <param name="angleInDegrees"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PolarToCart(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Boolean)">
            <summary>
            converts polar coordinates to Cartesian
            </summary>
            <param name="magnitude"></param>
            <param name="angle"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="angleInDegrees"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CartToPolar(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Boolean)">
            <summary>
            converts Cartesian coordinates to polar
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="magnitude"></param>
            <param name="angle"></param>
            <param name="angleInDegrees"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Phase(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Boolean)">
            <summary>
            computes angle (angle(i)) of each (x(i), y(i)) vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="angle"></param>
            <param name="angleInDegrees"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Magnitude(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            computes magnitude (magnitude(i)) of each (x(i), y(i)) vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="magnitude"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Magnitude(System.Single[],System.Single[])">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CheckRange(OpenCvSharp.CPlusPlus.InputArray,System.Boolean)">
            <summary>
            checks that each matrix element is within the specified range.
            </summary>
            <param name="src">The array to check</param>
            <param name="quiet">The flag indicating whether the functions quietly 
            return false when the array elements are out of range, 
            or they throw an exception.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CheckRange(OpenCvSharp.CPlusPlus.InputArray,System.Boolean,OpenCvSharp.CPlusPlus.Point@,System.Double,System.Double)">
            <summary>
            checks that each matrix element is within the specified range.
            </summary>
            <param name="src">The array to check</param>
            <param name="quiet">The flag indicating whether the functions quietly 
            return false when the array elements are out of range, 
            or they throw an exception.</param>
            <param name="pos">The optional output parameter, where the position of 
            the first outlier is stored.</param>
            <param name="minVal">The inclusive lower boundary of valid values range</param>
            <param name="maxVal">The exclusive upper boundary of valid values range</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PatchNaNs(OpenCvSharp.CPlusPlus.InputOutputArray,System.Double)">
            <summary>
            converts NaN's to the given number
            </summary>
            <param name="a"></param>
            <param name="val"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Gemm(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,System.Double,OpenCvSharp.CPlusPlus.InputArray,System.Double,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.GemmOperation)">
            <summary>
            implements generalized matrix product algorithm GEMM from BLAS
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="alpha"></param>
            <param name="src3"></param>
            <param name="gamma"></param>
            <param name="dst"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MulTransposed(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Boolean,OpenCvSharp.CPlusPlus.InputArray,System.Double,System.Int32)">
            <summary>
            multiplies matrix by its transposition from the left or from the right
            </summary>
            <param name="src">The source matrix</param>
            <param name="dst">The destination square matrix</param>
            <param name="aTa">Specifies the multiplication ordering; see the description below</param>
            <param name="delta">The optional delta matrix, subtracted from src before the 
            multiplication. When the matrix is empty ( delta=Mat() ), it’s assumed to be 
            zero, i.e. nothing is subtracted, otherwise if it has the same size as src, 
            then it’s simply subtracted, otherwise it is "repeated" to cover the full src 
            and then subtracted. Type of the delta matrix, when it's not empty, must be the 
            same as the type of created destination matrix, see the rtype description</param>
            <param name="scale">The optional scale factor for the matrix product</param>
            <param name="dtype">When it’s negative, the destination matrix will have the 
            same type as src . Otherwise, it will have type=CV_MAT_DEPTH(rtype), 
            which should be either CV_32F or CV_64F</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Transpose(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            transposes the matrix
            </summary>
            <param name="src">The source array</param>
            <param name="dst">The destination array of the same type as src</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Transform(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            performs affine transformation of each element of multi-channel input matrix
            </summary>
            <param name="src">The source array; must have as many channels (1 to 4) as mtx.cols or mtx.cols-1</param>
            <param name="dst">The destination array; will have the same size and depth as src and as many channels as mtx.rows</param>
            <param name="m">The transformation matrix</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PerspectiveTransform(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            performs perspective transformation of each element of multi-channel input matrix
            </summary>
            <param name="src">The source two-channel or three-channel floating-point array; 
            each element is 2D/3D vector to be transformed</param>
            <param name="dst">The destination array; it will have the same size and same type as src</param>
            <param name="m">3x3 or 4x4 transformation matrix</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CompleteSymm(OpenCvSharp.CPlusPlus.InputOutputArray,System.Boolean)">
            <summary>
            extends the symmetrical matrix from the lower half or from the upper half
            </summary>
            <param name="mtx"> Input-output floating-point square matrix</param>
            <param name="lowerToUpper">If true, the lower half is copied to the upper half, 
            otherwise the upper half is copied to the lower half</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SetIdentity(OpenCvSharp.CPlusPlus.InputOutputArray,System.Nullable{OpenCvSharp.CPlusPlus.Scalar})">
            <summary>
            initializes scaled identity matrix
            </summary>
            <param name="mtx">The matrix to initialize (not necessarily square)</param>
            <param name="s">The value to assign to the diagonal elements</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Determinant(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            computes determinant of a square matrix
            </summary>
            <param name="mtx">The input matrix; must have CV_32FC1 or CV_64FC1 type and square size</param>
            <returns>determinant of the specified matrix.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Trace(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            computes trace of a matrix
            </summary>
            <param name="mtx">The source matrix</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Invert(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.MatrixDecomposition)">
            <summary>
            computes inverse or pseudo-inverse matrix
            </summary>
            <param name="src">The source floating-point MxN matrix</param>
            <param name="dst">The destination matrix; will have NxM size and the same type as src</param>
            <param name="flags">The inversion method</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Solve(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.MatrixDecomposition)">
            <summary>
            solves linear system or a least-square problem
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="dst"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Sort(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.SortFlag)">
            <summary>
            sorts independently each matrix row or each matrix column
            </summary>
            <param name="src">The source single-channel array</param>
            <param name="dst">The destination array of the same size and the same type as src</param>
            <param name="flags">The operation flags, a combination of the SortFlag values</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SortIdx(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.SortFlag)">
            <summary>
            sorts independently each matrix row or each matrix column
            </summary>
            <param name="src">The source single-channel array</param>
            <param name="dst">The destination integer array of the same size as src</param>
            <param name="flags">The operation flags, a combination of SortFlag values</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SolveCubic(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            finds real roots of a cubic polynomial
            </summary>
            <param name="coeffs">The equation coefficients, an array of 3 or 4 elements</param>
            <param name="roots">The destination array of real roots which will have 1 or 3 elements</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SolvePoly(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32)">
            <summary>
            finds real and complex roots of a polynomial
            </summary>
            <param name="coeffs">The array of polynomial coefficients</param>
            <param name="roots">The destination (complex) array of roots</param>
            <param name="maxIters">The maximum number of iterations the algorithm does</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Eigen(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32,System.Int32)">
            <summary>
            Computes eigenvalues of a symmetric matrix.
            </summary>
            <param name="src">The input matrix; must have CV_32FC1 or CV_64FC1 type, 
            square size and be symmetric: src^T == src</param>
            <param name="eigenvalues">The output vector of eigenvalues of the same type as src; 
            The eigenvalues are stored in the descending order.</param>
            <param name="lowindex">Optional index of largest eigenvalue/-vector to calculate.</param>
            <param name="highindex">Optional index of smallest eigenvalue/-vector to calculate.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Eigen(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32,System.Int32)">
            <summary>
            Computes eigenvalues and eigenvectors of a symmetric matrix.
            </summary>
            <param name="src">The input matrix; must have CV_32FC1 or CV_64FC1 type, 
            square size and be symmetric: src^T == src</param>
            <param name="eigenvalues">The output vector of eigenvalues of the same type as src; 
            The eigenvalues are stored in the descending order.</param>
            <param name="eigenvectors">The output matrix of eigenvectors; 
            It will have the same size and the same type as src; The eigenvectors are stored 
            as subsequent matrix rows, in the same order as the corresponding eigenvalues</param>
            <param name="lowindex">Optional index of largest eigenvalue/-vector to calculate.</param>
            <param name="highindex">Optional index of smallest eigenvalue/-vector to calculate.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Eigen(OpenCvSharp.CPlusPlus.InputArray,System.Boolean,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Computes eigenvalues and eigenvectors of a symmetric matrix.
            </summary>
            <param name="src">The input matrix; must have CV_32FC1 or CV_64FC1 type, 
            square size and be symmetric: src^T == src</param>
            <param name="computeEigenvectors"></param>
            <param name="eigenvalues">The output vector of eigenvalues of the same type as src; 
            The eigenvalues are stored in the descending order.</param>
            <param name="eigenvectors">The output matrix of eigenvectors; 
            It will have the same size and the same type as src; The eigenvectors are stored 
            as subsequent matrix rows, in the same order as the corresponding eigenvalues</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalcCovarMatrix(OpenCvSharp.CPlusPlus.Mat[],OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CovarMatrixFlag)">
            <summary>
            computes covariation matrix of a set of samples
            </summary>
            <param name="samples"></param>
            <param name="covar"></param>
            <param name="mean"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalcCovarMatrix(OpenCvSharp.CPlusPlus.Mat[],OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CovarMatrixFlag,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            computes covariation matrix of a set of samples
            </summary>
            <param name="samples"></param>
            <param name="covar"></param>
            <param name="mean"></param>
            <param name="flags"></param>
            <param name="ctype"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalcCovarMatrix(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CovarMatrixFlag)">
            <summary>
            computes covariation matrix of a set of samples
            </summary>
            <param name="samples"></param>
            <param name="covar"></param>
            <param name="mean"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalcCovarMatrix(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CovarMatrixFlag,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            computes covariation matrix of a set of samples
            </summary>
            <param name="samples"></param>
            <param name="covar"></param>
            <param name="mean"></param>
            <param name="flags"></param>
            <param name="ctype"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PCACompute(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="mean"></param>
            <param name="eigenvectors"></param>
            <param name="maxComponents"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PCAComputeVar(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="mean"></param>
            <param name="eigenvectors"></param>
            <param name="retainedVariance"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PCAProject(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="mean"></param>
            <param name="eigenvectors"></param>
            <param name="result"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PCABackProject(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="mean"></param>
            <param name="eigenvectors"></param>
            <param name="result"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SVDecomp(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.SVDFlag)">
            <summary>
            computes SVD of src
            </summary>
            <param name="src"></param>
            <param name="w"></param>
            <param name="u"></param>
            <param name="vt"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SVBackSubst(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            performs back substitution for the previously computed SVD
            </summary>
            <param name="w"></param>
            <param name="u"></param>
            <param name="vt"></param>
            <param name="rhs"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Mahalanobis(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="icovar"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Mahalonobis(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            computes Mahalanobis distance between two vectors: sqrt((v1-v2)'*icovar*(v1-v2)), where icovar is the inverse covariation matrix
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="icovar"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Dft(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.DftFlag2,System.Int32)">
            <summary>
            Performs a forward Discrete Fourier transform of 1D or 2D floating-point array.
            </summary>
            <param name="src">The source array, real or complex</param>
            <param name="dst">The destination array, which size and type depends on the flags</param>
            <param name="flags">Transformation flags, a combination of the DftFlag2 values</param>
            <param name="nonzeroRows">When the parameter != 0, the function assumes that 
            only the first nonzeroRows rows of the input array ( DFT_INVERSE is not set) 
            or only the first nonzeroRows of the output array ( DFT_INVERSE is set) contain non-zeros, 
            thus the function can handle the rest of the rows more efficiently and 
            thus save some time. This technique is very useful for computing array cross-correlation 
            or convolution using DFT</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Idft(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.DftFlag2,System.Int32)">
            <summary>
            Performs an inverse Discrete Fourier transform of 1D or 2D floating-point array.
            </summary>
            <param name="src">The source array, real or complex</param>
            <param name="dst">The destination array, which size and type depends on the flags</param>
            <param name="flags">Transformation flags, a combination of the DftFlag2 values</param>
            <param name="nonzeroRows">When the parameter != 0, the function assumes that 
            only the first nonzeroRows rows of the input array ( DFT_INVERSE is not set) 
            or only the first nonzeroRows of the output array ( DFT_INVERSE is set) contain non-zeros, 
            thus the function can handle the rest of the rows more efficiently and 
            thus save some time. This technique is very useful for computing array cross-correlation 
            or convolution using DFT</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Dct(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.DctFlag2)">
            <summary>
            Performs forward or inverse 1D or 2D Discrete Cosine Transformation
            </summary>
            <param name="src">The source floating-point array</param>
            <param name="dst">The destination array; will have the same size and same type as src</param>
            <param name="flags">Transformation flags, a combination of DctFlag2 values</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Idct(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.DctFlag2)">
            <summary>
            Performs inverse 1D or 2D Discrete Cosine Transformation
            </summary>
            <param name="src">The source floating-point array</param>
            <param name="dst">The destination array; will have the same size and same type as src</param>
            <param name="flags">Transformation flags, a combination of DctFlag2 values</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MulSpectrums(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.MulSpectrumsFlag,System.Boolean)">
            <summary>
            computes element-wise product of the two Fourier spectrums. The second spectrum can optionally be conjugated before the multiplication
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="flags"></param>
            <param name="conjB"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetOptimalDFTSize(System.Int32)">
            <summary>
            computes the minimal vector size vecsize1 >= vecsize so that the dft() of the vector of length vecsize1 can be computed efficiently
            </summary>
            <param name="vecsize"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Kmeans(OpenCvSharp.CPlusPlus.InputArray,System.Int32,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.TermCriteria,System.Int32,OpenCvSharp.KMeansFlag,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            clusters the input data using k-Means algorithm
            </summary>
            <param name="data"></param>
            <param name="k"></param>
            <param name="bestLabels"></param>
            <param name="criteria"></param>
            <param name="attempts"></param>
            <param name="flags"></param>
            <param name="centers"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.TheRNG">
            <summary>
            returns the thread-local Random number generator
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Randu(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            fills array with uniformly-distributed random numbers from the range [low, high)
            </summary>
            <param name="dst">The output array of random numbers. 
            The array must be pre-allocated and have 1 to 4 channels</param>
            <param name="low">The inclusive lower boundary of the generated random numbers</param>
            <param name="high">The exclusive upper boundary of the generated random numbers</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Randu(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            fills array with uniformly-distributed random numbers from the range [low, high)
            </summary>
            <param name="dst">The output array of random numbers. 
            The array must be pre-allocated and have 1 to 4 channels</param>
            <param name="low">The inclusive lower boundary of the generated random numbers</param>
            <param name="high">The exclusive upper boundary of the generated random numbers</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Randn(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            fills array with normally-distributed random numbers with the specified mean and the standard deviation
            </summary>
            <param name="dst">The output array of random numbers. 
            The array must be pre-allocated and have 1 to 4 channels</param>
            <param name="mean">The mean value (expectation) of the generated random numbers</param>
            <param name="stddev">The standard deviation of the generated random numbers</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Randn(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            fills array with normally-distributed random numbers with the specified mean and the standard deviation
            </summary>
            <param name="dst">The output array of random numbers. 
            The array must be pre-allocated and have 1 to 4 channels</param>
            <param name="mean">The mean value (expectation) of the generated random numbers</param>
            <param name="stddev">The standard deviation of the generated random numbers</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.RandShuffle(OpenCvSharp.CPlusPlus.InputOutputArray,System.Double,OpenCvSharp.CPlusPlus.RNG)">
            <summary>
            shuffles the input array elements
            </summary>
            <param name="dst">The input/output numerical 1D array</param>
            <param name="iterFactor">The scale factor that determines the number of random swap operations.</param>
            <param name="rng">The optional random number generator used for shuffling. 
            If it is null, theRng() is used instead.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Line(OpenCvSharp.CPlusPlus.Mat,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1X">First point's x-coordinate of the line segment. </param>
            <param name="pt1Y">First point's y-coordinate of the line segment. </param>
            <param name="pt2X">Second point's x-coordinate of the line segment. </param>
            <param name="pt2Y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. [By default this is 1]</param>
            <param name="lineType">Type of the line. [By default this is LineType.Link8]</param>
            <param name="shift">Number of fractional bits in the point coordinates. [By default this is 0]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Line(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="img">The image. </param>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. [By default this is 1]</param>
            <param name="lineType">Type of the line. [By default this is LineType.Link8]</param>
            <param name="shift">Number of fractional bits in the point coordinates. [By default this is 0]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Rectangle(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values make the function to draw a filled rectangle. [By default this is 1]</param>
            <param name="lineType">Type of the line, see cvLine description. [By default this is LineType.Link8]</param>
            <param name="shift">Number of fractional bits in the point coordinates. [By default this is 0]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Rectangle(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="img">Image. </param>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values make the function to draw a filled rectangle. [By default this is 1]</param>
            <param name="lineType">Type of the line, see cvLine description. [By default this is LineType.Link8]</param>
            <param name="shift">Number of fractional bits in the point coordinates. [By default this is 0]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Circle(OpenCvSharp.CPlusPlus.Mat,System.Int32,System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="centerX">X-coordinate of the center of the circle. </param>
            <param name="centerY">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. [By default this is 1]</param>
            <param name="lineType">Type of the circle boundary. [By default this is LineType.Link8]</param>
            <param name="shift">Number of fractional bits in the center coordinates and radius value. [By default this is 0]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Circle(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Point,System.Int32,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="img">Image where the circle is drawn. </param>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. [By default this is 1]</param>
            <param name="lineType">Type of the circle boundary. [By default this is LineType.Link8]</param>
            <param name="shift">Number of fractional bits in the center coordinates and radius value. [By default this is 0]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Ellipse(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Size,System.Double,System.Double,System.Double,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="img">Image. </param>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="startAngle">Starting angle of the elliptic arc. </param>
            <param name="endAngle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse arc. [By default this is 1]</param>
            <param name="lineType">Type of the ellipse boundary. [By default this is LineType.Link8]</param>
            <param name="shift">Number of fractional bits in the center coordinates and axes' values. [By default this is 0]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Ellipse(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.RotatedRect,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="img">Image. </param>
            <param name="box">The enclosing box of the ellipse drawn </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse boundary. [By default this is 1]</param>
            <param name="lineType">Type of the ellipse boundary. [By default this is LineType.Link8]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FillConvexPoly(OpenCvSharp.CPlusPlus.Mat,System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point},OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Fills a convex polygon.
            </summary>
            <param name="img">Image</param>
            <param name="pts">The polygon vertices</param>
            <param name="color">Polygon color</param>
            <param name="lineType">Type of the polygon boundaries</param>
            <param name="shift">The number of fractional bits in the vertex coordinates</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FillPoly(OpenCvSharp.CPlusPlus.Mat,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point}},OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.LineType,System.Int32,System.Nullable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            Fills the area bounded by one or more polygons
            </summary>
            <param name="img">Image</param>
            <param name="pts">Array of polygons, each represented as an array of points</param>
            <param name="color">Polygon color</param>
            <param name="lineType">Type of the polygon boundaries</param>
            <param name="shift">The number of fractional bits in the vertex coordinates</param>
            <param name="offset"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Polylines(OpenCvSharp.CPlusPlus.Mat,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point}},System.Boolean,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            draws one or more polygonal curves
            </summary>
            <param name="img"></param>
            <param name="pts"></param>
            <param name="isClosed"></param>
            <param name="color"></param>
            <param name="thickness"></param>
            <param name="lineType"></param>
            <param name="shift"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ClipLine(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Point@,OpenCvSharp.CPlusPlus.Point@)">
            <summary>
            Clips the line against the image rectangle
            </summary>
            <param name="imgSize">The image size</param>
            <param name="pt1">The first line point</param>
            <param name="pt2">The second line point</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ClipLine(OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.Point@,OpenCvSharp.CPlusPlus.Point@)">
            <summary>
            Clips the line against the image rectangle
            </summary>
            <param name="imgRect">sThe image rectangle</param>
            <param name="pt1">The first line point</param>
            <param name="pt2">The second line point</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PutText(OpenCvSharp.CPlusPlus.Mat,System.String,OpenCvSharp.CPlusPlus.Point,OpenCvSharp.FontFace,System.Double,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Boolean)">
            <summary>
            renders text string in the image
            </summary>
            <param name="img"></param>
            <param name="text"></param>
            <param name="org"></param>
            <param name="fontFace"></param>
            <param name="fontScale"></param>
            <param name="color"></param>
            <param name="thickness"></param>
            <param name="lineType"></param>
            <param name="bottomLeftOrigin"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetTextSize(System.String,OpenCvSharp.FontFace,System.Double,System.Int32,System.Int32@)">
            <summary>
            returns bounding box of the text string
            </summary>
            <param name="text"></param>
            <param name="fontFace"></param>
            <param name="fontScale"></param>
            <param name="thickness"></param>
            <param name="baseLine"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetGaborKernel(OpenCvSharp.CPlusPlus.Size,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="ksize"></param>
            <param name="sigma"></param>
            <param name="theta"></param>
            <param name="lambd"></param>
            <param name="gamma"></param>
            <param name="psi"></param>
            <param name="ktype"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetStructuringElement(OpenCvSharp.CPlusPlus.StructuringElementShape,OpenCvSharp.CPlusPlus.Size)">
            <summary>
            
            </summary>
            <param name="shape"></param>
            <param name="ksize"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetStructuringElement(OpenCvSharp.CPlusPlus.StructuringElementShape,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Point)">
            <summary>
            
            </summary>
            <param name="shape"></param>
            <param name="ksize"></param>
            <param name="anchor"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CopyMakeBorder(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.BorderType,System.Nullable{OpenCvSharp.CPlusPlus.Scalar})">
            <summary>
            Forms a border around the image
            </summary>
            <param name="src">The source image</param>
            <param name="dst">The destination image; will have the same type as src and 
            the size Size(src.cols+left+right, src.rows+top+bottom)</param>
            <param name="top">Specify how much pixels in each direction from the source image rectangle one needs to extrapolate</param>
            <param name="bottom">Specify how much pixels in each direction from the source image rectangle one needs to extrapolate</param>
            <param name="left">Specify how much pixels in each direction from the source image rectangle one needs to extrapolate</param>
            <param name="right">Specify how much pixels in each direction from the source image rectangle one needs to extrapolate</param>
            <param name="borderType">The border type</param>
            <param name="value">The border value if borderType == Constant</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MedianBlur(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32)">
            <summary>
            Smoothes image using median filter
            </summary>
            <param name="src">The source 1-, 3- or 4-channel image. 
            When ksize is 3 or 5, the image depth should be CV_8U , CV_16U or CV_32F. 
            For larger aperture sizes it can only be CV_8U</param>
            <param name="dst">The destination array; will have the same size and the same type as src</param>
            <param name="ksize">The aperture linear size. It must be odd and more than 1, i.e. 3, 5, 7 ...</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GaussianBlur(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.Size,System.Double,System.Double,OpenCvSharp.BorderType)">
            <summary>
            Blurs an image using a Gaussian filter.
            </summary>
            <param name="src">input image; the image can have any number of channels, which are processed independently, 
            but the depth should be CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.</param>
            <param name="dst">output image of the same size and type as src.</param>
            <param name="ksize">Gaussian kernel size. ksize.width and ksize.height can differ but they both must be positive and odd. 
            Or, they can be zero’s and then they are computed from sigma* .</param>
            <param name="sigmaX">Gaussian kernel standard deviation in X direction.</param>
            <param name="sigmaY">Gaussian kernel standard deviation in Y direction; if sigmaY is zero, it is set to be equal to sigmaX, 
            if both sigmas are zeros, they are computed from ksize.width and ksize.height, 
            respectively (see getGaussianKernel() for details); to fully control the result 
            regardless of possible future modifications of all this semantics, it is recommended to specify all of ksize, sigmaX, and sigmaY.</param>
            <param name="borderType">pixel extrapolation method</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.BilateralFilter(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32,System.Double,System.Double,OpenCvSharp.BorderType)">
            <summary>
            Applies bilateral filter to the image
            </summary>
            <param name="src">The source 8-bit or floating-point, 1-channel or 3-channel image</param>
            <param name="dst">The destination image; will have the same size and the same type as src</param>
            <param name="d">The diameter of each pixel neighborhood, that is used during filtering. 
            If it is non-positive, it's computed from sigmaSpace</param>
            <param name="sigmaColor">Filter sigma in the color space. 
            Larger value of the parameter means that farther colors within the pixel neighborhood 
            will be mixed together, resulting in larger areas of semi-equal color</param>
            <param name="sigmaSpace">Filter sigma in the coordinate space. 
            Larger value of the parameter means that farther pixels will influence each other 
            (as long as their colors are close enough; see sigmaColor). Then d>0 , it specifies 
            the neighborhood size regardless of sigmaSpace, otherwise d is proportional to sigmaSpace</param>
            <param name="borderType"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.AdaptiveBilateralFilter(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.Size,System.Double,System.Double,System.Nullable{OpenCvSharp.CPlusPlus.Point},OpenCvSharp.BorderType)">
            <summary>
            Applies the adaptive bilateral filter to an image.
            </summary>
            <param name="src">The source image</param>
            <param name="dst">The destination image; will have the same size and the same type as src</param>
            <param name="ksize">The kernel size. This is the neighborhood where the local variance will be calculated, 
            and where pixels will contribute (in a weighted manner).</param>
            <param name="sigmaSpace">Filter sigma in the coordinate space. 
            Larger value of the parameter means that farther pixels will influence each other 
            (as long as their colors are close enough; see sigmaColor). Then d>0, it specifies the neighborhood 
            size regardless of sigmaSpace, otherwise d is proportional to sigmaSpace.</param>
            <param name="maxSigmaColor">Maximum allowed sigma color (will clamp the value calculated in the 
            ksize neighborhood. Larger value of the parameter means that more dissimilar pixels will 
            influence each other (as long as their colors are close enough; see sigmaColor). 
            Then d>0, it specifies the neighborhood size regardless of sigmaSpace, otherwise d is proportional to sigmaSpace.</param>
            <param name="anchor">The anchor point. The default value Point(-1,-1) means that the anchor is at the kernel center</param>
            <param name="borderType">Pixel extrapolation method.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.BoxFilter(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Size,System.Nullable{OpenCvSharp.CPlusPlus.Point},System.Boolean,OpenCvSharp.BorderType)">
            <summary>
            Smoothes image using box filter
            </summary>
            <param name="src">The source image</param>
            <param name="dst">The destination image; will have the same size and the same type as src</param>
            <param name="ddepth"></param>
            <param name="ksize">The smoothing kernel size</param>
            <param name="anchor">The anchor point. The default value Point(-1,-1) means that the anchor is at the kernel center</param>
            <param name="normalize">Indicates, whether the kernel is normalized by its area or not</param>
            <param name="borderType">The border mode used to extrapolate pixels outside of the image</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Blur(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.Size,System.Nullable{OpenCvSharp.CPlusPlus.Point},OpenCvSharp.BorderType)">
            <summary>
            Smoothes image using normalized box filter
            </summary>
            <param name="src">The source image</param>
            <param name="dst">The destination image; will have the same size and the same type as src</param>
            <param name="ksize">The smoothing kernel size</param>
            <param name="anchor">The anchor point. The default value Point(-1,-1) means that the anchor is at the kernel center</param>
            <param name="borderType">The border mode used to extrapolate pixels outside of the image</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Filter2D(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.InputArray,System.Nullable{OpenCvSharp.CPlusPlus.Point},System.Double,OpenCvSharp.BorderType)">
            <summary>
            Convolves an image with the kernel
            </summary>
            <param name="src">The source image</param>
            <param name="dst">The destination image. It will have the same size and the same number of channels as src</param>
            <param name="ddepth">The desired depth of the destination image. If it is negative, it will be the same as src.depth()</param>
            <param name="kernel">Convolution kernel (or rather a correlation kernel), 
            a single-channel floating point matrix. If you want to apply different kernels to 
            different channels, split the image into separate color planes using split() and process them individually</param>
            <param name="anchor">The anchor of the kernel that indicates the relative position of 
            a filtered point within the kernel. The anchor should lie within the kernel. 
            The special default value (-1,-1) means that the anchor is at the kernel center</param>
            <param name="delta">The optional value added to the filtered pixels before storing them in dst</param>
            <param name="borderType">The pixel extrapolation method</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.SepFilter2D(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,System.Nullable{OpenCvSharp.CPlusPlus.Point},System.Double,OpenCvSharp.BorderType)">
            <summary>
            Applies separable linear filter to an image
            </summary>
            <param name="src">The source image</param>
            <param name="dst">The destination image; will have the same size and the same number of channels as src</param>
            <param name="ddepth">The destination image depth</param>
            <param name="kernelX">The coefficients for filtering each row</param>
            <param name="kernelY">The coefficients for filtering each column</param>
            <param name="anchor">The anchor position within the kernel; The default value (-1, 1) means that the anchor is at the kernel center</param>
            <param name="delta">The value added to the filtered results before storing them</param>
            <param name="borderType">The pixel extrapolation method</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Sobel(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.MatType,System.Int32,System.Int32,System.Int32,System.Double,System.Double,OpenCvSharp.BorderType)">
            <summary>
            Calculates the first, second, third or mixed image derivatives using an extended Sobel operator
            </summary>
            <param name="src">The source image</param>
            <param name="dst">The destination image; will have the same size and the same number of channels as src</param>
            <param name="ddepth">The destination image depth</param>
            <param name="xorder">Order of the derivative x</param>
            <param name="yorder">Order of the derivative y</param>
            <param name="ksize">Size of the extended Sobel kernel, must be 1, 3, 5 or 7</param>
            <param name="scale">The optional scale factor for the computed derivative values (by default, no scaling is applied</param>
            <param name="delta">The optional delta value, added to the results prior to storing them in dst</param>
            <param name="borderType">The pixel extrapolation method</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Scharr(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.MatType,System.Int32,System.Int32,System.Double,System.Double,OpenCvSharp.BorderType)">
            <summary>
            Calculates the first x- or y- image derivative using Scharr operator
            </summary>
            <param name="src">The source image</param>
            <param name="dst">The destination image; will have the same size and the same number of channels as src</param>
            <param name="ddepth">The destination image depth</param>
            <param name="xorder">Order of the derivative x</param>
            <param name="yorder">Order of the derivative y</param>
            <param name="scale">The optional scale factor for the computed derivative values (by default, no scaling is applie</param>
            <param name="delta">The optional delta value, added to the results prior to storing them in dst</param>
            <param name="borderType">The pixel extrapolation method</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Laplacian(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.MatType,System.Int32,System.Double,System.Double,OpenCvSharp.BorderType)">
            <summary>
            Calculates the Laplacian of an image
            </summary>
            <param name="src">Source image</param>
            <param name="dst">Destination image; will have the same size and the same number of channels as src</param>
            <param name="ddepth">The desired depth of the destination image</param>
            <param name="ksize">The aperture size used to compute the second-derivative filters</param>
            <param name="scale">The optional scale factor for the computed Laplacian values (by default, no scaling is applied</param>
            <param name="delta">The optional delta value, added to the results prior to storing them in dst</param>
            <param name="borderType">The pixel extrapolation method</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Canny(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Finds edges in an image using Canny algorithm.
            </summary>
            <param name="src">Single-channel 8-bit input image</param>
            <param name="edges">The output edge map. It will have the same size and the same type as image</param>
            <param name="threshold1">The first threshold for the hysteresis procedure</param>
            <param name="threshold2">The second threshold for the hysteresis procedure</param>
            <param name="apertureSize">Aperture size for the Sobel operator [By default this is ApertureSize.Size3]</param>
            <param name="L2gradient">Indicates, whether the more accurate L2 norm should be used to compute the image gradient magnitude (true), or a faster default L1 norm is enough (false). [By default this is false]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Eigen2x2(System.Single[0:,0:],System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CornerEigenValsAndVecs(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32,System.Int32,OpenCvSharp.BorderType)">
            <summary>
            computes both eigenvalues and the eigenvectors of 2x2 derivative covariation matrix  at each pixel. The output is stored as 6-channel matrix.
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="blockSize"></param>
            <param name="ksize"></param>
            <param name="borderType"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PreCornerDetect(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32,OpenCvSharp.BorderType)">
            <summary>
            computes another complex cornerness criteria at each pixel
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="ksize"></param>
            <param name="borderType"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CornerSubPix(OpenCvSharp.CPlusPlus.InputArray,System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CvTermCriteria)">
            <summary>
            adjusts the corner locations with sub-pixel accuracy to maximize the certain cornerness criteria
            </summary>
            <param name="image">Input image.</param>
            <param name="inputCorners">Initial coordinates of the input corners and refined coordinates provided for output.</param>
            <param name="winSize">Half of the side length of the search window.</param>
            <param name="zeroZone">Half of the size of the dead region in the middle of the search zone 
            over which the summation in the formula below is not done. It is used sometimes to avoid possible singularities 
            of the autocorrelation matrix. The value of (-1,-1) indicates that there is no such a size.</param>
            <param name="criteria">Criteria for termination of the iterative process of corner refinement. 
            That is, the process of corner position refinement stops either after criteria.maxCount iterations 
            or when the corner position moves by less than criteria.epsilon on some iteration.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GoodFeaturesToTrack(OpenCvSharp.CPlusPlus.InputArray,System.Int32,System.Double,System.Double,OpenCvSharp.CPlusPlus.InputArray,System.Int32,System.Boolean,System.Double)">
            <summary>
            finds the strong enough corners where the cornerMinEigenVal() or cornerHarris() report the local maxima
            </summary>
            <param name="src">Input 8-bit or floating-point 32-bit, single-channel image.</param>
            <param name="maxCorners">Maximum number of corners to return. If there are more corners than are found, 
            the strongest of them is returned.</param>
            <param name="qualityLevel">Parameter characterizing the minimal accepted quality of image corners. 
            The parameter value is multiplied by the best corner quality measure, which is the minimal eigenvalue 
            or the Harris function response (see cornerHarris() ). The corners with the quality measure less than 
            the product are rejected. For example, if the best corner has the quality measure = 1500, and the qualityLevel=0.01, 
            then all the corners with the quality measure less than 15 are rejected.</param>
            <param name="minDistance">Minimum possible Euclidean distance between the returned corners.</param>
            <param name="mask">Optional region of interest. If the image is not empty
             (it needs to have the type CV_8UC1 and the same size as image ), it specifies the region 
            in which the corners are detected.</param>
            <param name="blockSize">Size of an average block for computing a derivative covariation matrix over each pixel neighborhood.</param>
            <param name="useHarrisDetector">Parameter indicating whether to use a Harris detector</param>
            <param name="k">Free parameter of the Harris detector.</param>
            <returns>Output vector of detected corners.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.HoughLines(OpenCvSharp.CPlusPlus.InputArray,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Finds lines in a binary image using standard Hough transform.
            </summary>
            <param name="image">The 8-bit, single-channel, binary source image. The image may be modified by the function</param>
            <param name="rho">Distance resolution of the accumulator in pixels</param>
            <param name="theta">Angle resolution of the accumulator in radians</param>
            <param name="threshold">The accumulator threshold parameter. Only those lines are returned that get enough votes ( &gt; threshold )</param>
            <param name="srn">For the multi-scale Hough transform it is the divisor for the distance resolution rho. [By default this is 0]</param>
            <param name="stn">For the multi-scale Hough transform it is the divisor for the distance resolution theta. [By default this is 0]</param>
            <returns>The output vector of lines. Each line is represented by a two-element vector (rho, theta) . 
            rho is the distance from the coordinate origin (0,0) (top-left corner of the image) and theta is the line rotation angle in radians</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.HoughLinesP(OpenCvSharp.CPlusPlus.InputArray,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Finds lines segments in a binary image using probabilistic Hough transform.
            </summary>
            <param name="image"></param>
            <param name="rho">Distance resolution of the accumulator in pixels</param>
            <param name="theta">Angle resolution of the accumulator in radians</param>
            <param name="threshold">The accumulator threshold parameter. Only those lines are returned that get enough votes ( &gt; threshold )</param>
            <param name="minLineLength">The minimum line length. Line segments shorter than that will be rejected. [By default this is 0]</param>
            <param name="maxLineGap">The maximum allowed gap between points on the same line to link them. [By default this is 0]</param>
            <returns>The output lines. Each line is represented by a 4-element vector (x1, y1, x2, y2)</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.HoughCircles(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Finds circles in a grayscale image using a Hough transform.
            </summary>
            <param name="image">The 8-bit, single-channel, grayscale input image</param>
            <param name="method">Currently, the only implemented method is HoughCirclesMethod.Gradient</param>
            <param name="dp">The inverse ratio of the accumulator resolution to the image resolution. </param>
            <param name="minDist">Minimum distance between the centers of the detected circles. </param>
            <param name="param1">The first method-specific parameter. [By default this is 100]</param>
            <param name="param2">The second method-specific parameter. [By default this is 100]</param>
            <param name="minRadius">Minimum circle radius. [By default this is 0]</param>
            <param name="maxRadius">Maximum circle radius. [By default this is 0] </param>
            <returns>The output vector found circles. Each vector is encoded as 3-element floating-point vector (x, y, radius)</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MorphologyDefaultBorderValue">
            <summary>
            Default borderValue for Dilate/Erode
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Dilate(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray,System.Nullable{OpenCvSharp.CPlusPlus.Point},System.Int32,OpenCvSharp.BorderType,System.Nullable{OpenCvSharp.CPlusPlus.Scalar})">
            <summary>
            Dilates an image by using a specific structuring element.
            </summary>
            <param name="src">The source image</param>
            <param name="dst">The destination image. It will have the same size and the same type as src</param>
            <param name="element">The structuring element used for dilation. If element=new Mat() , a 3x3 rectangular structuring element is used</param>
            <param name="anchor">Position of the anchor within the element. The default value (-1, -1) means that the anchor is at the element center</param>
            <param name="iterations">The number of times dilation is applied. [By default this is 1]</param>
            <param name="borderType">The pixel extrapolation method. [By default this is BorderType.Constant]</param>
            <param name="borderValue">The border value in case of a constant border. The default value has a special meaning. [By default this is CvCpp.MorphologyDefaultBorderValue()]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Erode(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray,System.Nullable{OpenCvSharp.CvPoint},System.Int32,OpenCvSharp.BorderType,System.Nullable{OpenCvSharp.CvScalar})">
            <summary>
            Erodes an image by using a specific structuring element.
            </summary>
            <param name="src">The source image</param>
            <param name="dst">The destination image. It will have the same size and the same type as src</param>
            <param name="element">The structuring element used for dilation. If element=new Mat(), a 3x3 rectangular structuring element is used</param>
            <param name="anchor">Position of the anchor within the element. The default value (-1, -1) means that the anchor is at the element center</param>
            <param name="iterations">The number of times erosion is applied</param>
            <param name="borderType">The pixel extrapolation method</param>
            <param name="borderValue">The border value in case of a constant border. The default value has a special meaning. [By default this is CvCpp.MorphologyDefaultBorderValue()]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MorphologyEx(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.MorphologyOperation,OpenCvSharp.CPlusPlus.InputArray,System.Nullable{OpenCvSharp.CvPoint},System.Int32,OpenCvSharp.BorderType,System.Nullable{OpenCvSharp.CvScalar})">
            <summary>
            Performs advanced morphological transformations
            </summary>
            <param name="src">Source image</param>
            <param name="dst">Destination image. It will have the same size and the same type as src</param>
            <param name="op">Type of morphological operation</param>
            <param name="element">Structuring element</param>
            <param name="anchor">Position of the anchor within the element. The default value (-1, -1) means that the anchor is at the element center</param>
            <param name="iterations">Number of times erosion and dilation are applied. [By default this is 1]</param>
            <param name="borderType">The pixel extrapolation method. [By default this is BorderType.Constant]</param>
            <param name="borderValue">The border value in case of a constant border. The default value has a special meaning. [By default this is CvCpp.MorphologyDefaultBorderValue()]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Resize(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.Size,System.Double,System.Double,OpenCvSharp.Interpolation)">
            <summary>
            Resizes an image.
            </summary>
            <param name="src">input image.</param>
            <param name="dst">output image; it has the size dsize (when it is non-zero) or the size computed 
            from src.size(), fx, and fy; the type of dst is the same as of src.</param>
            <param name="dsize">output image size; if it equals zero, it is computed as: 
            dsize = Size(round(fx*src.cols), round(fy*src.rows))
            Either dsize or both fx and fy must be non-zero.</param>
            <param name="fx">scale factor along the horizontal axis; when it equals 0, 
            it is computed as: (double)dsize.width/src.cols</param>
            <param name="fy">scale factor along the vertical axis; when it equals 0, 
            it is computed as: (double)dsize.height/src.rows</param>
            <param name="interpolation">interpolation method</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.WarpAffine(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.Interpolation,OpenCvSharp.BorderType,System.Nullable{OpenCvSharp.CPlusPlus.Scalar})">
            <summary>
            Applies an affine transformation to an image.
            </summary>
            <param name="src">input image.</param>
            <param name="dst">output image that has the size dsize and the same type as src.</param>
            <param name="m">2x3 transformation matrix.</param>
            <param name="dsize">size of the output image.</param>
            <param name="flags">combination of interpolation methods and the optional flag 
            WARP_INVERSE_MAP that means that M is the inverse transformation (dst -> src) .</param>
            <param name="borderMode">pixel extrapolation method; when borderMode=BORDER_TRANSPARENT, 
            it means that the pixels in the destination image corresponding to the "outliers" 
            in the source image are not modified by the function.</param>
            <param name="borderValue">value used in case of a constant border; by default, it is 0.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.WarpPerspective(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.Interpolation,OpenCvSharp.BorderType,System.Nullable{OpenCvSharp.CPlusPlus.Scalar})">
            <summary>
            Applies a perspective transformation to an image.
            </summary>
            <param name="src">input image.</param>
            <param name="dst">output image that has the size dsize and the same type as src.</param>
            <param name="m">3x3 transformation matrix.</param>
            <param name="dsize">size of the output image.</param>
            <param name="flags">combination of interpolation methods (INTER_LINEAR or INTER_NEAREST) 
            and the optional flag WARP_INVERSE_MAP, that sets M as the inverse transformation (dst -> src).</param>
            <param name="borderMode">pixel extrapolation method (BORDER_CONSTANT or BORDER_REPLICATE).</param>
            <param name="borderValue">value used in case of a constant border; by default, it equals 0.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.WarpPerspective(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Single[0:,0:],OpenCvSharp.CPlusPlus.Size,OpenCvSharp.Interpolation,OpenCvSharp.BorderType,System.Nullable{OpenCvSharp.CPlusPlus.Scalar})">
            <summary>
            Applies a perspective transformation to an image.
            </summary>
            <param name="src">input image.</param>
            <param name="dst">output image that has the size dsize and the same type as src.</param>
            <param name="m">3x3 transformation matrix.</param>
            <param name="dsize">size of the output image.</param>
            <param name="flags">combination of interpolation methods (INTER_LINEAR or INTER_NEAREST) 
            and the optional flag WARP_INVERSE_MAP, that sets M as the inverse transformation (dst -> src).</param>
            <param name="borderMode">pixel extrapolation method (BORDER_CONSTANT or BORDER_REPLICATE).</param>
            <param name="borderValue">value used in case of a constant border; by default, it equals 0.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Remap(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.Interpolation,OpenCvSharp.BorderType,System.Nullable{OpenCvSharp.CvScalar})">
            <summary>
            Applies a generic geometrical transformation to an image.
            </summary>
            <param name="src">Source image.</param>
            <param name="dst">Destination image. It has the same size as map1 and the same type as src</param>
            <param name="map1">The first map of either (x,y) points or just x values having the type CV_16SC2, CV_32FC1, or CV_32FC2.</param>
            <param name="map2">The second map of y values having the type CV_16UC1, CV_32FC1, or none (empty map if map1 is (x,y) points), respectively.</param>
            <param name="interpolation">Interpolation method. The method INTER_AREA is not supported by this function.</param>
            <param name="borderMode">Pixel extrapolation method. When borderMode=BORDER_TRANSPARENT, 
            it means that the pixels in the destination image that corresponds to the "outliers" in 
            the source image are not modified by the function.</param>
            <param name="borderValue">Value used in case of a constant border. By default, it is 0.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ConvertMaps(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.MatType,System.Boolean)">
            <summary>
            
            </summary>
            <param name="map1"></param>
            <param name="map2"></param>
            <param name="dstmap1"></param>
            <param name="dstmap2"></param>
            <param name="dstmap1Type"></param>
            <param name="nnInterpolation"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetRotationMatrix2D(OpenCvSharp.CPlusPlus.Point2f,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="angle"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.InvertAffineTransform(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Inverts an affine transformation.
            </summary>
            <param name="m">Original affine transformation.</param>
            <param name="im">Output reverse affine transformation.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetPerspectiveTransform(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f})">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetPerspectiveTransform(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetAffineTransform(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f})">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetAffineTransform(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetRectSubPix(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Point2f,OpenCvSharp.CPlusPlus.OutputArray,System.Int32)">
            <summary>
            Retrieves a pixel rectangle from an image with sub-pixel accuracy.
            </summary>
            <param name="image">Source image.</param>
            <param name="patchSize">Size of the extracted patch.</param>
            <param name="center">Floating point coordinates of the center of the extracted rectangle 
            within the source image. The center must be inside the image.</param>
            <param name="patch">Extracted patch that has the size patchSize and the same number of channels as src .</param>
            <param name="patchType">Depth of the extracted pixels. By default, they have the same depth as src.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Integral(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="sum"></param>
            <param name="sdepth"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Integral(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="sum"></param>
            <param name="sqsum"></param>
            <param name="sdepth"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Integral(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="sum"></param>
            <param name="sqsum"></param>
            <param name="tilted"></param>
            <param name="sdepth"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Accumulate(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Adds an image to the accumulator.
            </summary>
            <param name="src">Input image as 1- or 3-channel, 8-bit or 32-bit floating point.</param>
            <param name="dst">Accumulator image with the same number of channels as input image, 32-bit or 64-bit floating-point.</param>
            <param name="mask">Optional operation mask.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.AccumulateSquare(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Adds the square of a source image to the accumulator.
            </summary>
            <param name="src">Input image as 1- or 3-channel, 8-bit or 32-bit floating point.</param>
            <param name="dst">Accumulator image with the same number of channels as input image, 32-bit or 64-bit floating-point.</param>
            <param name="mask">Optional operation mask.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.AccumulateProduct(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Adds the per-element product of two input images to the accumulator.
            </summary>
            <param name="src1">First input image, 1- or 3-channel, 8-bit or 32-bit floating point.</param>
            <param name="src2">Second input image of the same type and the same size as src1</param>
            <param name="dst">Accumulator with the same number of channels as input images, 32-bit or 64-bit floating-point.</param>
            <param name="mask">Optional operation mask.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.AccumulateWeighted(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputOutputArray,System.Double,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Updates a running average.
            </summary>
            <param name="src">Input image as 1- or 3-channel, 8-bit or 32-bit floating point.</param>
            <param name="dst">Accumulator image with the same number of channels as input image, 32-bit or 64-bit floating-point.</param>
            <param name="alpha">Weight of the input image.</param>
            <param name="mask">Optional operation mask.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PSNR(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PhaseCorrelate(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PhaseCorrelateRes(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PhaseCorrelateRes(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,System.Double@)">
            <summary>
            
            </summary>
            <param name="src1"></param>
            <param name="src2"></param>
            <param name="window"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateHanningWindow(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            Computes a Hanning window coefficients in two dimensions.
            </summary>
            <param name="dst">Destination array to place Hann coefficients in</param>
            <param name="winSize">The window size specifications</param>
            <param name="type">Created array type</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Threshold(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double,System.Double,OpenCvSharp.ThresholdType)">
            <summary>
            Applies a fixed-level threshold to each array element.
            </summary>
            <param name="src">input array (single-channel, 8-bit or 32-bit floating point).</param>
            <param name="dst">output array of the same size and type as src.</param>
            <param name="thresh">threshold value.</param>
            <param name="maxval">maximum value to use with the THRESH_BINARY and THRESH_BINARY_INV thresholding types.</param>
            <param name="type">thresholding type (see the details below).</param>
            <returns>the computed threshold value when type == OTSU</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.AdaptiveThreshold(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double,OpenCvSharp.AdaptiveThresholdType,OpenCvSharp.ThresholdType,System.Int32,System.Double)">
            <summary>
            Applies an adaptive threshold to an array.
            </summary>
            <param name="src">Source 8-bit single-channel image.</param>
            <param name="dst">Destination image of the same size and the same type as src .</param>
            <param name="maxValue">Non-zero value assigned to the pixels for which the condition is satisfied. See the details below.</param>
            <param name="adaptiveMethod">Adaptive thresholding algorithm to use, ADAPTIVE_THRESH_MEAN_C or ADAPTIVE_THRESH_GAUSSIAN_C .</param>
            <param name="thresholdType">Thresholding type that must be either THRESH_BINARY or THRESH_BINARY_INV .</param>
            <param name="blockSize">Size of a pixel neighborhood that is used to calculate a threshold value for the pixel: 3, 5, 7, and so on.</param>
            <param name="c">Constant subtracted from the mean or weighted mean (see the details below). 
            Normally, it is positive but may be zero or negative as well.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PyrDown(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Nullable{OpenCvSharp.CPlusPlus.Size},OpenCvSharp.BorderType)">
            <summary>
            Blurs an image and downsamples it.
            </summary>
            <param name="src">input image.</param>
            <param name="dst">output image; it has the specified size and the same type as src.</param>
            <param name="dstSize">size of the output image; by default, it is computed as Size((src.cols+1)/2</param>
            <param name="borderType"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PyrUp(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Nullable{OpenCvSharp.CPlusPlus.Size},OpenCvSharp.BorderType)">
            <summary>
            Upsamples an image and then blurs it.
            </summary>
            <param name="src">input image.</param>
            <param name="dst">output image. It has the specified size and the same type as src.</param>
            <param name="dstSize">size of the output image; by default, it is computed as Size(src.cols*2, (src.rows*2)</param>
            <param name="borderType"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Undistort(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            corrects lens distortion for the given camera matrix and distortion coefficients
            </summary>
            <param name="src">Input (distorted) image.</param>
            <param name="dst">Output (corrected) image that has the same size and type as src .</param>
            <param name="cameraMatrix"> Input camera matrix</param>
            <param name="distCoeffs">Input vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, 
            or 8 elements. If the vector is null, the zero distortion coefficients are assumed.</param>
            <param name="newCameraMatrix">Camera matrix of the distorted image. 
            By default, it is the same as cameraMatrix but you may additionally scale 
            and shift the result by using a different matrix.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.InitUndistortRectifyMap(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            initializes maps for cv::remap() to correct lens distortion and optionally rectify the image
            </summary>
            <param name="cameraMatrix"></param>
            <param name="distCoeffs"></param>
            <param name="r"></param>
            <param name="newCameraMatrix"></param>
            <param name="size"></param>
            <param name="m1Type"></param>
            <param name="map1"></param>
            <param name="map2"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.InitWideAngleProjMap(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Size,System.Int32,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.ProjectionType,System.Double)">
            <summary>
            initializes maps for cv::remap() for wide-angle
            </summary>
            <param name="cameraMatrix"></param>
            <param name="distCoeffs"></param>
            <param name="imageSize"></param>
            <param name="destImageWidth"></param>
            <param name="m1Type"></param>
            <param name="map1"></param>
            <param name="map2"></param>
            <param name="projType"></param>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GetDefaultNewCameraMatrix(OpenCvSharp.CPlusPlus.InputArray,System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Boolean)">
            <summary>
            returns the default new camera matrix (by default it is the same as cameraMatrix unless centerPricipalPoint=true)
            </summary>
            <param name="cameraMatrix">Input camera matrix.</param>
            <param name="imgSize">Camera view image size in pixels.</param>
            <param name="centerPrincipalPoint">Location of the principal point in the new camera matrix. 
            The parameter indicates whether this location should be at the image center or not.</param>
            <returns>the camera matrix that is either an exact copy of the input cameraMatrix 
            (when centerPrinicipalPoint=false), or the modified one (when centerPrincipalPoint=true).</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.UndistortPoints(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Computes the ideal point coordinates from the observed point coordinates.
            </summary>
            <param name="src">Observed point coordinates, 1xN or Nx1 2-channel (CV_32FC2 or CV_64FC2).</param>
            <param name="dst">Output ideal point coordinates after undistortion and reverse perspective transformation. 
            If matrix P is identity or omitted, dst will contain normalized point coordinates.</param>
            <param name="cameraMatrix">Camera matrix</param>
            <param name="distCoeffs">Input vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, or 8 elements. 
            If the vector is null, the zero distortion coefficients are assumed.</param>
            <param name="r">Rectification transformation in the object space (3x3 matrix). 
            R1 or R2 computed by stereoRectify() can be passed here. 
            If the matrix is empty, the identity transformation is used.</param>
            <param name="p">New camera matrix (3x3) or new projection matrix (3x4). 
            P1 or P2 computed by stereoRectify() can be passed here. If the matrix is empty, 
            the identity new camera matrix is used.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalcHist(OpenCvSharp.CPlusPlus.Mat[],System.Int32[],OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32,System.Int32[],OpenCvSharp.CPlusPlus.Rangef[],System.Boolean,System.Boolean)">
            <summary>
            computes the joint dense histogram for a set of images.
            </summary>
            <param name="images"></param>
            <param name="channels"></param>
            <param name="mask"></param>
            <param name="hist"></param>
            <param name="dims"></param>
            <param name="histSize"></param>
            <param name="ranges"></param>
            <param name="uniform"></param>
            <param name="accumulate"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalcHist(OpenCvSharp.CPlusPlus.Mat[],System.Int32[],OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32,System.Int32[],System.Single[][],System.Boolean,System.Boolean)">
            <summary>
            computes the joint dense histogram for a set of images.
            </summary>
            <param name="images"></param>
            <param name="channels"></param>
            <param name="mask"></param>
            <param name="hist"></param>
            <param name="dims"></param>
            <param name="histSize"></param>
            <param name="ranges"></param>
            <param name="uniform"></param>
            <param name="accumulate"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CalcBackProject(OpenCvSharp.CPlusPlus.Mat[],System.Int32[],OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.Rangef[],System.Boolean)">
            <summary>
            computes the joint dense histogram for a set of images.
            </summary>
            <param name="images"></param>
            <param name="channels"></param>
            <param name="hist"></param>
            <param name="backProject"></param>
            <param name="ranges"></param>
            <param name="uniform"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CompareHist(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.HistogramComparison)">
            <summary>
            compares two histograms stored in dense arrays
            </summary>
            <param name="h1">The first compared histogram</param>
            <param name="h2">The second compared histogram of the same size as h1</param>
            <param name="method">The comparison method</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.EqualizeHist(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            normalizes the grayscale image brightness and contrast by normalizing its histogram
            </summary>
            <param name="src">The source 8-bit single channel image</param>
            <param name="dst">The destination image; will have the same size and the same type as src</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CreateCLAHE(System.Double,System.Nullable{OpenCvSharp.CPlusPlus.Size})">
            <summary>
            Creates a predefined CLAHE object
            </summary>
            <param name="clipLimit"></param>
            <param name="tileGridSize"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.EMD(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.DistanceType)">
            <summary>
            
            </summary>
            <param name="signature1"></param>
            <param name="signature2"></param>
            <param name="distType"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.EMD(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.DistanceType,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            
            </summary>
            <param name="signature1"></param>
            <param name="signature2"></param>
            <param name="distType"></param>
            <param name="cost"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.EMD(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.DistanceType,OpenCvSharp.CPlusPlus.InputArray,System.Single@)">
            <summary>
            
            </summary>
            <param name="signature1"></param>
            <param name="signature2"></param>
            <param name="distType"></param>
            <param name="cost"></param>
            <param name="lowerBound"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.EMD(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.DistanceType,OpenCvSharp.CPlusPlus.InputArray,System.Single@,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="signature1"></param>
            <param name="signature2"></param>
            <param name="distType"></param>
            <param name="cost"></param>
            <param name="lowerBound"></param>
            <param name="flow"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Watershed(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputOutputArray)">
            <summary>
            Performs a marker-based image segmentation using the watershed algorithm.
            </summary>
            <param name="image">Input 8-bit 3-channel image.</param>
            <param name="markers">Input/output 32-bit single-channel image (map) of markers. 
            It should have the same size as image.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PyrMeanShiftFiltering(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double,System.Double,System.Int32,System.Nullable{OpenCvSharp.CPlusPlus.TermCriteria})">
            <summary>
            Performs initial step of meanshift segmentation of an image.
            </summary>
            <param name="src">The source 8-bit, 3-channel image.</param>
            <param name="dst">The destination image of the same format and the same size as the source.</param>
            <param name="sp">The spatial window radius.</param>
            <param name="sr">The color window radius.</param>
            <param name="maxLevel">Maximum level of the pyramid for the segmentation.</param>
            <param name="termcrit">Termination criteria: when to stop meanshift iterations.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.GrabCut(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.InputOutputArray,System.Int32,OpenCvSharp.CPlusPlus.GrabCutFlag)">
            <summary>
            Segments the image using GrabCut algorithm
            </summary>
            <param name="img">Input 8-bit 3-channel image.</param>
            <param name="mask">Input/output 8-bit single-channel mask. 
            The mask is initialized by the function when mode is set to GC_INIT_WITH_RECT. 
            Its elements may have Cv2.GC_BGD / Cv2.GC_FGD / Cv2.GC_PR_BGD / Cv2.GC_PR_FGD</param>
            <param name="rect">ROI containing a segmented object. The pixels outside of the ROI are 
            marked as "obvious background". The parameter is only used when mode==GC_INIT_WITH_RECT.</param>
            <param name="bgdModel">Temporary array for the background model. Do not modify it while you are processing the same image.</param>
            <param name="fgdModel">Temporary arrays for the foreground model. Do not modify it while you are processing the same image.</param>
            <param name="iterCount">Number of iterations the algorithm should make before returning the result. 
            Note that the result can be refined with further calls with mode==GC_INIT_WITH_MASK or mode==GC_EVAL .</param>
            <param name="mode">Operation mode that could be one of GrabCutFlag value.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.DistanceTransformWithLabels(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.DistanceType,OpenCvSharp.CPlusPlus.DistanceMaskSize,OpenCvSharp.DistTransformLabelType)">
            <summary>
            builds the discrete Voronoi diagram
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="labels"></param>
            <param name="distanceType"></param>
            <param name="maskSize"></param>
            <param name="labelType"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.DistanceTransform(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.DistanceType,OpenCvSharp.CPlusPlus.DistanceMaskSize)">
            <summary>
            computes the distance transform map
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="distanceType"></param>
            <param name="maskSize"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FloodFill(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            Fills a connected component with the given color.
            </summary>
            <param name="image">Input/output 1- or 3-channel, 8-bit, or floating-point image. 
            It is modified by the function unless the FLOODFILL_MASK_ONLY flag is set in the 
            second variant of the function. See the details below.</param>
            <param name="seedPoint">Starting point.</param>
            <param name="newVal">New value of the repainted domain pixels.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FloodFill(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.Rect@,System.Nullable{OpenCvSharp.CPlusPlus.Scalar},System.Nullable{OpenCvSharp.CPlusPlus.Scalar},OpenCvSharp.FloodFillFlag)">
            <summary>
            Fills a connected component with the given color.
            </summary>
            <param name="image">Input/output 1- or 3-channel, 8-bit, or floating-point image. 
            It is modified by the function unless the FLOODFILL_MASK_ONLY flag is set in the 
            second variant of the function. See the details below.</param>
            <param name="seedPoint">Starting point.</param>
            <param name="newVal">New value of the repainted domain pixels.</param>
            <param name="rect">Optional output parameter set by the function to the 
            minimum bounding rectangle of the repainted domain.</param>
            <param name="loDiff">Maximal lower brightness/color difference between the currently 
            observed pixel and one of its neighbors belonging to the component, or a seed pixel 
            being added to the component.</param>
            <param name="upDiff">Maximal upper brightness/color difference between the currently 
            observed pixel and one of its neighbors belonging to the component, or a seed pixel 
            being added to the component.</param>
            <param name="flags">Operation flags. Lower bits contain a connectivity value, 
            4 (default) or 8, used within the function. Connectivity determines which 
            neighbors of a pixel are considered. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FloodFill(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            Fills a connected component with the given color.
            </summary>
            <param name="image">Input/output 1- or 3-channel, 8-bit, or floating-point image. 
            It is modified by the function unless the FLOODFILL_MASK_ONLY flag is set in the 
            second variant of the function. See the details below.</param>
            <param name="mask">(For the second function only) Operation mask that should be a single-channel 8-bit image, 
            2 pixels wider and 2 pixels taller. The function uses and updates the mask, so you take responsibility of 
            initializing the mask content. Flood-filling cannot go across non-zero pixels in the mask. For example, 
            an edge detector output can be used as a mask to stop filling at edges. It is possible to use the same mask 
            in multiple calls to the function to make sure the filled area does not overlap.</param>
            <param name="seedPoint">Starting point.</param>
            <param name="newVal">New value of the repainted domain pixels.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FloodFill(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.Rect@,System.Nullable{OpenCvSharp.CPlusPlus.Scalar},System.Nullable{OpenCvSharp.CPlusPlus.Scalar},OpenCvSharp.FloodFillFlag)">
            <summary>
            Fills a connected component with the given color.
            </summary>
            <param name="image">Input/output 1- or 3-channel, 8-bit, or floating-point image. 
            It is modified by the function unless the FLOODFILL_MASK_ONLY flag is set in the 
            second variant of the function. See the details below.</param>
            <param name="mask">(For the second function only) Operation mask that should be a single-channel 8-bit image, 
            2 pixels wider and 2 pixels taller. The function uses and updates the mask, so you take responsibility of 
            initializing the mask content. Flood-filling cannot go across non-zero pixels in the mask. For example, 
            an edge detector output can be used as a mask to stop filling at edges. It is possible to use the same mask 
            in multiple calls to the function to make sure the filled area does not overlap.</param>
            <param name="seedPoint">Starting point.</param>
            <param name="newVal">New value of the repainted domain pixels.</param>
            <param name="rect">Optional output parameter set by the function to the 
            minimum bounding rectangle of the repainted domain.</param>
            <param name="loDiff">Maximal lower brightness/color difference between the currently 
            observed pixel and one of its neighbors belonging to the component, or a seed pixel 
            being added to the component.</param>
            <param name="upDiff">Maximal upper brightness/color difference between the currently 
            observed pixel and one of its neighbors belonging to the component, or a seed pixel 
            being added to the component.</param>
            <param name="flags">Operation flags. Lower bits contain a connectivity value, 
            4 (default) or 8, used within the function. Connectivity determines which 
            neighbors of a pixel are considered. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.CvtColor(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.ColorConversion,System.Int32)">
            <summary>
            Converts image from one color space to another
            </summary>
            <param name="src">The source image, 8-bit unsigned, 16-bit unsigned or single-precision floating-point</param>
            <param name="dst">The destination image; will have the same size and the same depth as src</param>
            <param name="code">The color space conversion code</param>
            <param name="dstCn">The number of channels in the destination image; if the parameter is 0, the number of the channels will be derived automatically from src and the code</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Moments(OpenCvSharp.CPlusPlus.InputArray,System.Boolean)">
            <summary>
            Calculates all of the moments 
            up to the third order of a polygon or rasterized shape.
            </summary>
            <param name="array">A raster image (single-channel, 8-bit or floating-point 
            2D array) or an array ( 1xN or Nx1 ) of 2D points ( Point or Point2f )</param>
            <param name="binaryImage">If it is true, then all the non-zero image pixels are treated as 1’s</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Moments(System.Byte[0:,0:],System.Boolean)">
            <summary>
            Calculates all of the moments 
            up to the third order of a polygon or rasterized shape.
            </summary>
            <param name="array">A raster image (8-bit) 2D array</param>
            <param name="binaryImage">If it is true, then all the non-zero image pixels are treated as 1’s</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Moments(System.Single[0:,0:],System.Boolean)">
            <summary>
            Calculates all of the moments 
            up to the third order of a polygon or rasterized shape.
            </summary>
            <param name="array">A raster image (floating-point) 2D array</param>
            <param name="binaryImage">If it is true, then all the non-zero image pixels are treated as 1’s</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Moments(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point},System.Boolean)">
            <summary>
            Calculates all of the moments 
            up to the third order of a polygon or rasterized shape.
            </summary>
            <param name="array">Array of 2D points</param>
            <param name="binaryImage">If it is true, then all the non-zero image pixels are treated as 1’s</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.Moments(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},System.Boolean)">
            <summary>
            Calculates all of the moments 
            up to the third order of a polygon or rasterized shape.
            </summary>
            <param name="array">Array of 2D points</param>
            <param name="binaryImage">If it is true, then all the non-zero image pixels are treated as 1’s</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MatchTemplate(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.MatchTemplateMethod)">
            <summary>
            Computes the proximity map for the raster template and the image where the template is searched for
            </summary>
            <param name="image">Image where the search is running; should be 8-bit or 32-bit floating-point</param>
            <param name="templ">Searched template; must be not greater than the source image and have the same data type</param>
            <param name="result">A map of comparison results; will be single-channel 32-bit floating-point. 
            If image is WxH and templ is wxh then result will be (W-w+1) x (H-h+1).</param>
            <param name="method">Specifies the comparison method</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FindContours(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Point[][]@,OpenCvSharp.CPlusPlus.HiearchyIndex[]@,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,System.Nullable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            Finds contours in a binary image.
            </summary>
            <param name="image">Source, an 8-bit single-channel image. Non-zero pixels are treated as 1’s. 
            Zero pixels remain 0’s, so the image is treated as binary.
            The function modifies the image while extracting the contours.</param> 
            <param name="contours">Detected contours. Each contour is stored as a vector of points.</param>
            <param name="hierarchy">Optional output vector, containing information about the image topology. 
            It has as many elements as the number of contours. For each i-th contour contours[i], 
            the members of the elements hierarchy[i] are set to 0-based indices in contours of the next 
            and previous contours at the same hierarchical level, the first child contour and the parent contour, respectively. 
            If for the contour i there are no next, previous, parent, or nested contours, the corresponding elements of hierarchy[i] will be negative.</param>
            <param name="mode">Contour retrieval mode</param>
            <param name="method">Contour approximation method</param>
            <param name="offset"> Optional offset by which every contour point is shifted. 
            This is useful if the contours are extracted from the image ROI and then they should be analyzed in the whole image context.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FindContours(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Mat[]@,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,System.Nullable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            Finds contours in a binary image.
            </summary>
            <param name="image">Source, an 8-bit single-channel image. Non-zero pixels are treated as 1’s. 
            Zero pixels remain 0’s, so the image is treated as binary.
            The function modifies the image while extracting the contours.</param> 
            <param name="contours">Detected contours. Each contour is stored as a vector of points.</param>
            <param name="hierarchy">Optional output vector, containing information about the image topology. 
            It has as many elements as the number of contours. For each i-th contour contours[i], 
            the members of the elements hierarchy[i] are set to 0-based indices in contours of the next 
            and previous contours at the same hierarchical level, the first child contour and the parent contour, respectively. 
            If for the contour i there are no next, previous, parent, or nested contours, the corresponding elements of hierarchy[i] will be negative.</param>
            <param name="mode">Contour retrieval mode</param>
            <param name="method">Contour approximation method</param>
            <param name="offset"> Optional offset by which every contour point is shifted. 
            This is useful if the contours are extracted from the image ROI and then they should be analyzed in the whole image context.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FindContoursAsArray(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,System.Nullable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            Finds contours in a binary image.
            </summary>
            <param name="image">Source, an 8-bit single-channel image. Non-zero pixels are treated as 1’s. 
            Zero pixels remain 0’s, so the image is treated as binary.
            The function modifies the image while extracting the contours.</param> 
            <param name="mode">Contour retrieval mode</param>
            <param name="method">Contour approximation method</param>
            <param name="offset"> Optional offset by which every contour point is shifted. 
            This is useful if the contours are extracted from the image ROI and then they should be analyzed in the whole image context.</param>
            <returns>Detected contours. Each contour is stored as a vector of points.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FindContoursAsMat(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,System.Nullable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            Finds contours in a binary image.
            </summary>
            <param name="image">Source, an 8-bit single-channel image. Non-zero pixels are treated as 1’s. 
            Zero pixels remain 0’s, so the image is treated as binary.
            The function modifies the image while extracting the contours.</param> 
            <param name="mode">Contour retrieval mode</param>
            <param name="method">Contour approximation method</param>
            <param name="offset"> Optional offset by which every contour point is shifted. 
            This is useful if the contours are extracted from the image ROI and then they should be analyzed in the whole image context.</param>
            <returns>Detected contours. Each contour is stored as a vector of points.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.DrawContours(OpenCvSharp.CPlusPlus.InputOutputArray,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point}},System.Int32,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.HiearchyIndex},System.Int32,System.Nullable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            draws contours in the image
            </summary>
            <param name="image">Destination image.</param>
            <param name="contours">All the input contours. Each contour is stored as a point vector.</param>
            <param name="contourIdx">Parameter indicating a contour to draw. If it is negative, all the contours are drawn.</param>
            <param name="color">Color of the contours.</param>
            <param name="thickness">Thickness of lines the contours are drawn with. If it is negative (for example, thickness=CV_FILLED ), 
            the contour interiors are drawn.</param>
            <param name="lineType">Line connectivity. </param>
            <param name="hierarchy">Optional information about hierarchy. It is only needed if you want to draw only some of the contours</param>
            <param name="maxLevel">Maximal level for drawn contours. If it is 0, only the specified contour is drawn. 
            If it is 1, the function draws the contour(s) and all the nested contours. If it is 2, the function draws the contours, 
            all the nested contours, all the nested-to-nested contours, and so on. This parameter is only taken into account 
            when there is hierarchy available.</param>
            <param name="offset">Optional contour shift parameter. Shift all the drawn contours by the specified offset = (dx, dy)</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.DrawContours(OpenCvSharp.CPlusPlus.InputOutputArray,System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},System.Int32,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,OpenCvSharp.CPlusPlus.Mat,System.Int32,System.Nullable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            draws contours in the image
            </summary>
            <param name="image">Destination image.</param>
            <param name="contours">All the input contours. Each contour is stored as a point vector.</param>
            <param name="contourIdx">Parameter indicating a contour to draw. If it is negative, all the contours are drawn.</param>
            <param name="color">Color of the contours.</param>
            <param name="thickness">Thickness of lines the contours are drawn with. If it is negative (for example, thickness=CV_FILLED ), 
            the contour interiors are drawn.</param>
            <param name="lineType">Line connectivity. </param>
            <param name="hierarchy">Optional information about hierarchy. It is only needed if you want to draw only some of the contours</param>
            <param name="maxLevel">Maximal level for drawn contours. If it is 0, only the specified contour is drawn. 
            If it is 1, the function draws the contour(s) and all the nested contours. If it is 2, the function draws the contours, 
            all the nested contours, all the nested-to-nested contours, and so on. This parameter is only taken into account 
            when there is hierarchy available.</param>
            <param name="offset">Optional contour shift parameter. Shift all the drawn contours by the specified offset = (dx, dy)</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ApproxPolyDP(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double,System.Boolean)">
            <summary>
            Approximates contour or a curve using Douglas-Peucker algorithm
            </summary>
            <param name="curve">The polygon or curve to approximate. 
            Must be 1 x N or N x 1 matrix of type CV_32SC2 or CV_32FC2.</param>
            <param name="approxCurve">The result of the approximation; 
            The type should match the type of the input curve</param>
            <param name="epsilon">Specifies the approximation accuracy. 
            This is the maximum distance between the original curve and its approximation.</param>
            <param name="closed">The result of the approximation; 
            The type should match the type of the input curve</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ApproxPolyDP(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point},System.Double,System.Boolean)">
            <summary>
            Approximates contour or a curve using Douglas-Peucker algorithm
            </summary>
            <param name="curve">The polygon or curve to approximate.</param>
            <param name="epsilon">Specifies the approximation accuracy. 
            This is the maximum distance between the original curve and its approximation.</param>
            <param name="closed">The result of the approximation; 
            The type should match the type of the input curve</param>
            <returns>The result of the approximation; 
            The type should match the type of the input curve</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ApproxPolyDP(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},System.Double,System.Boolean)">
            <summary>
            Approximates contour or a curve using Douglas-Peucker algorithm
            </summary>
            <param name="curve">The polygon or curve to approximate.</param>
            <param name="epsilon">Specifies the approximation accuracy. 
            This is the maximum distance between the original curve and its approximation.</param>
            <param name="closed">If true, the approximated curve is closed 
            (i.e. its first and last vertices are connected), otherwise it’s not</param>
            <returns>The result of the approximation; 
            The type should match the type of the input curve</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ArcLength(OpenCvSharp.CPlusPlus.InputArray,System.Boolean)">
            <summary>
            Calculates a contour perimeter or a curve length.
            </summary>
            <param name="curve">The input vector of 2D points, represented by CV_32SC2 or CV_32FC2 matrix.</param>
            <param name="closed">Indicates, whether the curve is closed or not.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ArcLength(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point},System.Boolean)">
            <summary>
            Calculates a contour perimeter or a curve length.
            </summary>
            <param name="curve">The input vector of 2D points.</param>
            <param name="closed">Indicates, whether the curve is closed or not.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ArcLength(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},System.Boolean)">
            <summary>
            Calculates a contour perimeter or a curve length.
            </summary>
            <param name="curve">The input vector of 2D points.</param>
            <param name="closed">Indicates, whether the curve is closed or not.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.BoundingRect(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Calculates the up-right bounding rectangle of a point set.
            </summary>
            <param name="curve">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix.</param>
            <returns>Minimal up-right bounding rectangle for the specified point set.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.BoundingRect(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            Calculates the up-right bounding rectangle of a point set.
            </summary>
            <param name="curve">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix.</param>
            <returns>Minimal up-right bounding rectangle for the specified point set.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.BoundingRect(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f})">
            <summary>
            Calculates the up-right bounding rectangle of a point set.
            </summary>
            <param name="curve">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix.</param>
            <returns>Minimal up-right bounding rectangle for the specified point set.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ContourArea(OpenCvSharp.CPlusPlus.InputArray,System.Boolean)">
            <summary>
            Calculates the contour area
            </summary>
            <param name="contour">The contour vertices, represented by CV_32SC2 or CV_32FC2 matrix</param>
            <param name="oriented"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ContourArea(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point},System.Boolean)">
            <summary>
            Calculates the contour area
            </summary>
            <param name="contour">The contour vertices, represented by CV_32SC2 or CV_32FC2 matrix</param>
            <param name="oriented"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ContourArea(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},System.Boolean)">
            <summary>
            Calculates the contour area
            </summary>
            <param name="contour">The contour vertices, represented by CV_32SC2 or CV_32FC2 matrix</param>
            <param name="oriented"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MinAreaRect(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Finds the minimum area rotated rectangle enclosing a 2D point set.
            </summary>
            <param name="points">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MinAreaRect(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            Finds the minimum area rotated rectangle enclosing a 2D point set.
            </summary>
            <param name="points">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MinAreaRect(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f})">
            <summary>
            Finds the minimum area rotated rectangle enclosing a 2D point set.
            </summary>
            <param name="points">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MinEnclosingCircle(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Point2f@,System.Single@)">
            <summary>
            Finds the minimum area circle enclosing a 2D point set.
            </summary>
            <param name="points">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix.</param>
            <param name="center">The output center of the circle</param>
            <param name="radius">The output radius of the circle</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MinEnclosingCircle(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point},OpenCvSharp.CPlusPlus.Point2f@,System.Single@)">
            <summary>
            Finds the minimum area circle enclosing a 2D point set.
            </summary>
            <param name="points">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix.</param>
            <param name="center">The output center of the circle</param>
            <param name="radius">The output radius of the circle</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MinEnclosingCircle(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},OpenCvSharp.CPlusPlus.Point2f@,System.Single@)">
            <summary>
            Finds the minimum area circle enclosing a 2D point set.
            </summary>
            <param name="points">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix.</param>
            <param name="center">The output center of the circle</param>
            <param name="radius">The output radius of the circle</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MatchShapes(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.MatchShapesMethod,System.Double)">
            <summary>
            matches two contours using one of the available algorithms
            </summary>
            <param name="contour1"></param>
            <param name="contour2"></param>
            <param name="method"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.MatchShapes(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point},OpenCvSharp.MatchShapesMethod,System.Double)">
            <summary>
            matches two contours using one of the available algorithms
            </summary>
            <param name="contour1"></param>
            <param name="contour2"></param>
            <param name="method"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ConvexHull(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Boolean,System.Boolean)">
            <summary>
            Computes convex hull for a set of 2D points.
            </summary>
            <param name="points">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix</param>
            <param name="hull">The output convex hull. It is either a vector of points that form the 
            hull (must have the same type as the input points), or a vector of 0-based point 
            indices of the hull points in the original array (since the set of convex hull 
            points is a subset of the original point set).</param>
            <param name="clockwise">If true, the output convex hull will be oriented clockwise, 
            otherwise it will be oriented counter-clockwise. Here, the usual screen coordinate 
            system is assumed - the origin is at the top-left corner, x axis is oriented to the right, 
            and y axis is oriented downwards.</param>
            <param name="returnPoints"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ConvexHull(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point},System.Boolean)">
            <summary>
            Computes convex hull for a set of 2D points.
            </summary>
            <param name="points">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix</param>
            <param name="clockwise">If true, the output convex hull will be oriented clockwise, 
            otherwise it will be oriented counter-clockwise. Here, the usual screen coordinate 
            system is assumed - the origin is at the top-left corner, x axis is oriented to the right, 
            and y axis is oriented downwards.</param>
            <returns>The output convex hull. It is a vector of points that form 
            the hull (must have the same type as the input points).</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ConvexHull(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},System.Boolean)">
            <summary>
            Computes convex hull for a set of 2D points.
            </summary>
            <param name="points">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix</param>
            <param name="clockwise">If true, the output convex hull will be oriented clockwise, 
            otherwise it will be oriented counter-clockwise. Here, the usual screen coordinate 
            system is assumed - the origin is at the top-left corner, x axis is oriented to the right, 
            and y axis is oriented downwards.</param>
            <returns>The output convex hull. It is a vector of points that form 
            the hull (must have the same type as the input points).</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ConvexHullIndices(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point},System.Boolean)">
            <summary>
            Computes convex hull for a set of 2D points.
            </summary>
            <param name="points">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix</param>
            <param name="clockwise">If true, the output convex hull will be oriented clockwise, 
            otherwise it will be oriented counter-clockwise. Here, the usual screen coordinate 
            system is assumed - the origin is at the top-left corner, x axis is oriented to the right, 
            and y axis is oriented downwards.</param>
            <returns>The output convex hull. It is a vector of 0-based point indices of the 
            hull points in the original array (since the set of convex hull points is a subset of the original point set).</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ConvexHullIndices(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},System.Boolean)">
            <summary>
            Computes convex hull for a set of 2D points.
            </summary>
            <param name="points">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix</param>
            <param name="clockwise">If true, the output convex hull will be oriented clockwise, 
            otherwise it will be oriented counter-clockwise. Here, the usual screen coordinate 
            system is assumed - the origin is at the top-left corner, x axis is oriented to the right, 
            and y axis is oriented downwards.</param>
            <returns>The output convex hull. It is a vector of 0-based point indices of the 
            hull points in the original array (since the set of convex hull points is a subset of the original point set).</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ConvexityDefects(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Computes the contour convexity defects
            </summary>
            <param name="contour">Input contour.</param>
            <param name="convexHull">Convex hull obtained using convexHull() that 
            should contain indices of the contour points that make the hull.</param>
            <param name="convexityDefects">
            The output vector of convexity defects. 
            Each convexity defect is represented as 4-element integer vector 
            (a.k.a. cv::Vec4i): (start_index, end_index, farthest_pt_index, fixpt_depth), 
            where indices are 0-based indices in the original contour of the convexity defect beginning, 
            end and the farthest point, and fixpt_depth is fixed-point approximation 
            (with 8 fractional bits) of the distance between the farthest contour point and the hull. 
            That is, to get the floating-point value of the depth will be fixpt_depth/256.0.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ConvexityDefects(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the contour convexity defects
            </summary>
            <param name="contour">Input contour.</param>
            <param name="convexHull">Convex hull obtained using convexHull() that 
            should contain indices of the contour points that make the hull.</param>
            <returns>The output vector of convexity defects. 
            Each convexity defect is represented as 4-element integer vector 
            (a.k.a. cv::Vec4i): (start_index, end_index, farthest_pt_index, fixpt_depth), 
            where indices are 0-based indices in the original contour of the convexity defect beginning, 
            end and the farthest point, and fixpt_depth is fixed-point approximation 
            (with 8 fractional bits) of the distance between the farthest contour point and the hull. 
            That is, to get the floating-point value of the depth will be fixpt_depth/256.0. </returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.ConvexityDefects(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the contour convexity defects
            </summary>
            <param name="contour">Input contour.</param>
            <param name="convexHull">Convex hull obtained using convexHull() that 
            should contain indices of the contour points that make the hull.</param>
            <returns>The output vector of convexity defects. 
            Each convexity defect is represented as 4-element integer vector 
            (a.k.a. cv::Vec4i): (start_index, end_index, farthest_pt_index, fixpt_depth), 
            where indices are 0-based indices in the original contour of the convexity defect beginning, 
            end and the farthest point, and fixpt_depth is fixed-point approximation 
            (with 8 fractional bits) of the distance between the farthest contour point and the hull. 
            That is, to get the floating-point value of the depth will be fixpt_depth/256.0. </returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.IsContourConvex(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            returns true if the contour is convex. 
            Does not support contours with self-intersection
            </summary>
            <param name="contour">Input vector of 2D points</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.IsContourConvex(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            returns true if the contour is convex. 
            Does not support contours with self-intersection
            </summary>
            <param name="contour">Input vector of 2D points</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.IsContourConvex(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f})">
            <summary>
            returns true if the contour is convex. D
            oes not support contours with self-intersection
            </summary>
            <param name="contour">Input vector of 2D points</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.IntersectConvexConvex(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Boolean)">
            <summary>
            finds intersection of two convex polygons
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p12"></param>
            <param name="handleNested"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.IntersectConvexConvex(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point},OpenCvSharp.CPlusPlus.Point[]@,System.Boolean)">
            <summary>
            finds intersection of two convex polygons
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p12"></param>
            <param name="handleNested"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.IntersectConvexConvex(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},OpenCvSharp.CPlusPlus.Point2f[]@,System.Boolean)">
            <summary>
            finds intersection of two convex polygons
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p12"></param>
            <param name="handleNested"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FitEllipse(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Fits ellipse to the set of 2D points.
            </summary>
            <param name="points">Input 2D point set</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FitEllipse(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            Fits ellipse to the set of 2D points.
            </summary>
            <param name="points">Input 2D point set</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FitEllipse(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f})">
            <summary>
            Fits ellipse to the set of 2D points.
            </summary>
            <param name="points">Input 2D point set</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FitLine(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.DistanceType,System.Double,System.Double,System.Double)">
            <summary>
            Fits line to the set of 2D points using M-estimator algorithm
            </summary>
            <param name="points">Input vector of 2D or 3D points</param>
            <param name="line">Output line parameters. 
            In case of 2D fitting, it should be a vector of 4 elements 
            (like Vec4f) - (vx, vy, x0, y0), where (vx, vy) is a normalized vector 
            collinear to the line and (x0, y0) is a point on the line. 
            In case of 3D fitting, it should be a vector of 6 elements 
            (like Vec6f) - (vx, vy, vz, x0, y0, z0), where (vx, vy, vz) is a 
            normalized vector collinear to the line and (x0, y0, z0) is a point on the line.</param>
            <param name="distType">Distance used by the M-estimator</param>
            <param name="param">Numerical parameter ( C ) for some types of distances. 
            If it is 0, an optimal value is chosen.</param>
            <param name="reps">Sufficient accuracy for the radius 
            (distance between the coordinate origin and the line).</param>
            <param name="aeps">Sufficient accuracy for the angle. 
            0.01 would be a good default value for reps and aeps.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FitLine(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point},OpenCvSharp.DistanceType,System.Double,System.Double,System.Double)">
            <summary>
            Fits line to the set of 2D points using M-estimator algorithm
            </summary>
            <param name="points">Input vector of 2D or 3D points</param>
            <param name="distType">Distance used by the M-estimator</param>
            <param name="param">Numerical parameter ( C ) for some types of distances. 
            If it is 0, an optimal value is chosen.</param>
            <param name="reps">Sufficient accuracy for the radius 
            (distance between the coordinate origin and the line).</param>
            <param name="aeps">Sufficient accuracy for the angle. 
            0.01 would be a good default value for reps and aeps.</param>
            <returns>Output line parameters.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FitLine(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},OpenCvSharp.DistanceType,System.Double,System.Double,System.Double)">
            <summary>
            Fits line to the set of 2D points using M-estimator algorithm
            </summary>
            <param name="points">Input vector of 2D or 3D points</param>
            <param name="distType">Distance used by the M-estimator</param>
            <param name="param">Numerical parameter ( C ) for some types of distances. 
            If it is 0, an optimal value is chosen.</param>
            <param name="reps">Sufficient accuracy for the radius 
            (distance between the coordinate origin and the line).</param>
            <param name="aeps">Sufficient accuracy for the angle. 
            0.01 would be a good default value for reps and aeps.</param>
            <returns>Output line parameters.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FitLine(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point3i},OpenCvSharp.DistanceType,System.Double,System.Double,System.Double)">
            <summary>
            Fits line to the set of 3D points using M-estimator algorithm
            </summary>
            <param name="points">Input vector of 2D or 3D points</param>
            <param name="distType">Distance used by the M-estimator</param>
            <param name="param">Numerical parameter ( C ) for some types of distances. 
            If it is 0, an optimal value is chosen.</param>
            <param name="reps">Sufficient accuracy for the radius 
            (distance between the coordinate origin and the line).</param>
            <param name="aeps">Sufficient accuracy for the angle. 
            0.01 would be a good default value for reps and aeps.</param>
            <returns>Output line parameters.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.FitLine(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point3f},OpenCvSharp.DistanceType,System.Double,System.Double,System.Double)">
            <summary>
            Fits line to the set of 3D points using M-estimator algorithm
            </summary>
            <param name="points">Input vector of 2D or 3D points</param>
            <param name="distType">Distance used by the M-estimator</param>
            <param name="param">Numerical parameter ( C ) for some types of distances. 
            If it is 0, an optimal value is chosen.</param>
            <param name="reps">Sufficient accuracy for the radius 
            (distance between the coordinate origin and the line).</param>
            <param name="aeps">Sufficient accuracy for the angle. 
            0.01 would be a good default value for reps and aeps.</param>
            <returns>Output line parameters.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PointPolygonTest(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Point2f,System.Boolean)">
            <summary>
            Checks if the point is inside the contour. Optionally computes the signed distance from the point to the contour boundary
            </summary>
            <param name="contour"></param>
            <param name="pt"></param>
            <param name="measureDist"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PointPolygonTest(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point},OpenCvSharp.CPlusPlus.Point2f,System.Boolean)">
            <summary>
            Checks if the point is inside the contour. Optionally computes the signed distance from the point to the contour boundary
            </summary>
            <param name="contour"></param>
            <param name="pt"></param>
            <param name="measureDist"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Cv2.PointPolygonTest(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},OpenCvSharp.CPlusPlus.Point2f,System.Boolean)">
            <summary>
            Checks if the point is inside the contour. 
            Optionally computes the signed distance from the point to the contour boundary.
            </summary>
            <param name="contour">Input contour.</param>
            <param name="pt">Point tested against the contour.</param>
            <param name="measureDist">If true, the function estimates the signed distance 
            from the point to the nearest contour edge. Otherwise, the function only checks 
            if the point is inside a contour or not.</param>
            <returns>Positive (inside), negative (outside), or zero (on an edge) value.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.EnumerableEx">
            <summary>
            IEnumerable&lt;T&gt; extension methods for .NET Framework 2.0 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EnumerableEx.Select``2(System.Collections.Generic.IEnumerable{``0},OpenCvSharp.CPlusPlus.Func{``0,``1})">
            <summary>
            Enumerable.Select
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="enumerable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EnumerableEx.SelectToArray``2(System.Collections.Generic.IEnumerable{``0},OpenCvSharp.CPlusPlus.Func{``0,``1})">
            <summary>
            Enumerable.Select -> ToArray
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="enumerable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EnumerableEx.SelectToArray``2(System.Collections.IEnumerable,OpenCvSharp.CPlusPlus.Func{``0,``1})">
            <summary>
            Enumerable.Select -> ToArray
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="enumerable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EnumerableEx.SelectPtrs(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat})">
            <summary>
            Enumerable.Select -> ToArray
            </summary>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EnumerableEx.SelectPtrs(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.InputArray})">
            <summary>
            Enumerable.Select -> ToArray
            </summary>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EnumerableEx.Where``1(System.Collections.Generic.IEnumerable{``0},OpenCvSharp.CPlusPlus.Func{``0,System.Boolean})">
            <summary>
            Enumerable.Where
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="enumerable"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EnumerableEx.WhereToArray``1(System.Collections.Generic.IEnumerable{``0},OpenCvSharp.CPlusPlus.Func{``0,System.Boolean})">
            <summary>
            Enumerable.Where -> ToArray
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="enumerable"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EnumerableEx.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enumerable.ToArray
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EnumerableEx.Any``1(System.Collections.Generic.IEnumerable{``0},OpenCvSharp.CPlusPlus.Func{``0,System.Boolean})">
            <summary>
            Enumerable.Any
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="enumerable"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EnumerableEx.AnyNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enumerable.Any
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EnumerableEx.All``1(System.Collections.Generic.IEnumerable{``0},OpenCvSharp.CPlusPlus.Func{``0,System.Boolean})">
            <summary>
            Enumerable.All
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="enumerable"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EnumerableEx.Count``1(System.Collections.Generic.IEnumerable{``0},OpenCvSharp.CPlusPlus.Func{``0,System.Boolean})">
            <summary>
            Enumerable.Count
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="enumerable"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EnumerableEx.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enumerable.Count
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EnumerableEx.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enumerable.Count
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.FaceRecognizer">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Algorithm">
            <summary>
            Base class for high-level OpenCV algorithms
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Algorithm.disposed">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.Release">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.GetInt(System.String)">
            <summary>
            Returns the algorithm parameter
            </summary>
            <param name="name">The parameter name.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.GetDouble(System.String)">
            <summary>
            Returns the algorithm parameter
            </summary>
            <param name="name">The parameter name.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.GetBool(System.String)">
            <summary>
            Returns the algorithm parameter
            </summary>
            <param name="name">The parameter name.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.GetString(System.String)">
            <summary>
            Returns the algorithm parameter
            </summary>
            <param name="name">The parameter name.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.GetMat(System.String)">
            <summary>
            Returns the algorithm parameter
            </summary>
            <param name="name">The parameter name.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.GetMatVector(System.String)">
            <summary>
            Returns the algorithm parameter
            </summary>
            <param name="name">The parameter name.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.GetAlgorithm(System.String)">
            <summary>
            Returns the algorithm parameter
            </summary>
            <param name="name">The parameter name.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.SetInt(System.String,System.Int32)">
            <summary>
            Sets the algorithm parameter
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.SetDouble(System.String,System.Double)">
            <summary>
            Sets the algorithm parameter
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.SetBool(System.String,System.Boolean)">
            <summary>
            Sets the algorithm parameter
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.SetString(System.String,System.String)">
            <summary>
            Sets the algorithm parameter
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.SetMat(System.String,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Sets the algorithm parameter
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.SetMatVector(System.String,System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat})">
            <summary>
            Sets the algorithm parameter
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.SetAlgorithm(System.String,OpenCvSharp.CPlusPlus.Algorithm)">
            <summary>
            Sets the algorithm parameter
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.ParamHelp(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.ParamType(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.GetParams">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.GetList">
            <summary>
            Returns the list of registered algorithms
            </summary>
            <returns>The output array of algorithm names.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Algorithm.ToString">
            <summary>
            Returns a string that represents this Algorithm.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Algorithm.Name">
            <summary>
            Returns the algorithm name
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Algorithm.Info">
            <summary>
            Algorithm information
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Algorithm.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.FaceRecognizer.recognizerPtr">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FaceRecognizer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FaceRecognizer.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FaceRecognizer.FromRawPtr(System.IntPtr)">
            <summary>
            Creates instance from raw pointer T*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FaceRecognizer.CreateEigenFaceRecognizer(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="numComponents"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FaceRecognizer.CreateFisherFaceRecognizer(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="numComponents"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FaceRecognizer.CreateLBPHFaceRecognizer(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="radius"></param>
            <param name="neighbors"></param>
            <param name="gridX"></param>
            <param name="gridY"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FaceRecognizer.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FaceRecognizer.Train(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Trains a FaceRecognizer.
            </summary>
            <param name="src"></param>
            <param name="labels"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FaceRecognizer.Update(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Updates a FaceRecognizer.
            </summary>
            <param name="src"></param>
            <param name="labels"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FaceRecognizer.Predict(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Gets a prediction from a FaceRecognizer.
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FaceRecognizer.Predict(OpenCvSharp.CPlusPlus.InputArray,System.Int32@,System.Double@)">
            <summary>
            Predicts the label and confidence for a given sample.
            </summary>
            <param name="src"></param>
            <param name="label"></param>
            <param name="confidence"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FaceRecognizer.Save(System.String)">
            <summary>
            Serializes this object to a given filename.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FaceRecognizer.Load(System.String)">
            <summary>
            Deserializes this object from a given filename.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FaceRecognizer.Save(OpenCvSharp.CPlusPlus.FileStorage)">
            <summary>
            Serializes this object to a given cv::FileStorage.
            </summary>
            <param name="fs"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FaceRecognizer.Load(OpenCvSharp.CPlusPlus.FileStorage)">
            <summary>
            Deserializes this object from a given cv::FileStorage.
            </summary>
            <param name="fs"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FaceRecognizer.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.ColorMapMode">
            <summary>
            Flags for applyColorMap
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.DctFlag2">
            <summary>
            Transformation flags for cv::dct
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DctFlag2.None">
            <summary>
            Zero
            [0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DctFlag2.Inverse">
            <summary>
            Do inverse 1D or 2D transform.
            (Forward and Inverse are mutually exclusive, of course.)
            [DFT_INVERSE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DctFlag2.Rows">
            <summary>
            Do forward or inverse transform of every individual row of the input matrix. 
            This flag allows user to transform multiple vectors simultaneously and can be used to decrease the overhead 
            (which is sometimes several times larger than the processing itself), to do 3D and higher-dimensional transforms etc. 
            [DFT_ROWS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.DftFlag2">
            <summary>
            Transformation flags for cv::dft
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DftFlag2.None">
            <summary>
            Zero
            [0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DftFlag2.Inverse">
            <summary>
            Do inverse 1D or 2D transform. The result is not scaled. 
            (Forward and Inverse are mutually exclusive, of course.)
            [DFT_INVERSE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DftFlag2.Scale">
            <summary>
            Scale the result: divide it by the number of array elements. Usually, it is combined with Inverse.
            [DFT_SCALE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DftFlag2.Rows">
            <summary>
            Do forward or inverse transform of every individual row of the input matrix. 
            This flag allows user to transform multiple vectors simultaneously and can be used to decrease the overhead
            (which is sometimes several times larger than the processing itself), to do 3D and higher-dimensional transforms etc.
            [CV_DXT_ROWS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DftFlag2.ComplexOutput">
            <summary>
            then the function performs forward transformation of 1D or 2D real array, the result, 
            though being a complex array, has complex-conjugate symmetry ( CCS ), see the description below. 
            Such an array can be packed into real array of the same size as input, which is the fastest option 
            and which is what the function does by default. However, you may wish to get the full complex array 
            (for simpler spectrum analysis etc.). Pass the flag to tell the function to produce full-size complex output array.
            [DFT_COMPLEX_OUTPUT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DftFlag2.RealOutput">
            <summary>
            then the function performs inverse transformation of 1D or 2D complex array, the result is normally a complex array 
            of the same size. However, if the source array has conjugate-complex symmetry (for example, it is a result of 
            forward transformation with DFT_COMPLEX_OUTPUT flag), then the output is real array. While the function itself 
            does not check whether the input is symmetrical or not, you can pass the flag and then the function will assume 
            the symmetry and produce the real output array. Note that when the input is packed real array and 
            inverse transformation is executed, the function treats the input as packed complex-conjugate symmetrical array, 
            so the output will also be real array
            [DFT_REAL_OUTPUT]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.FindCirclesGridFlag">
            <summary>
            Method for solving a PnP problem:
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.FindCirclesGridFlag.SymmetricGrid">
            <summary>
            uses symmetric pattern of circles.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.FindCirclesGridFlag.AsymmetricGrid">
            <summary>
            uses asymmetric pattern of circles.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.FindCirclesGridFlag.Clustering">
            <summary>
            uses a special algorithm for grid detection. It is more robust to perspective distortions but much more sensitive to background clutter.
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.FileStorage">
            <summary>
            XML/YAML File Storage Class.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileStorage.#ctor">
            <summary>
            Default constructor.
            You should call FileStorage::open() after initialization.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileStorage.#ctor(System.String,OpenCvSharp.FileStorageMode,System.String)">
            <summary>
            The full constructor
            </summary>
            <param name="source">Name of the file to open or the text string to read the data from. 
            Extension of the file (.xml or .yml/.yaml) determines its format 
            (XML or YAML respectively). Also you can append .gz to work with 
            compressed files, for example myHugeMatrix.xml.gz. 
            If both FileStorage::WRITE and FileStorage::MEMORY flags are specified, 
            source is used just to specify the output file format 
            (e.g. mydata.xml, .yml etc.).</param>
            <param name="flags"></param>
            <param name="encoding">Encoding of the file. Note that UTF-16 XML encoding is not supported 
            currently and you should use 8-bit encoding instead of it.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileStorage.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileStorage.Open(System.String,OpenCvSharp.FileStorageMode,System.String)">
            <summary>
            operator that performs PCA. The previously stored data, if any, is released
            </summary>
            <param name="fileName"></param>
            <param name="flags"></param>
            <param name="encoding">Encoding of the file. Note that UTF-16 XML encoding is not supported 
            currently and you should use 8-bit encoding instead of it.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileStorage.IsOpened">
            <summary>
            Returns true if the object is associated with currently opened file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileStorage.Release">
            <summary>
            Closes the file and releases all the memory buffers
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileStorage.ReleaseAndGetString">
            <summary>
            Closes the file, releases all the memory buffers and returns the text string
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileStorage.GetFirstTopLevelNode">
            <summary>
            Returns the first element of the top-level mapping
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileStorage.Root(System.Int32)">
            <summary>
            Returns the top-level mapping. YAML supports multiple streams
            </summary>
            <param name="streamidx"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileStorage.op_Explicit(OpenCvSharp.CPlusPlus.FileStorage)~OpenCvSharp.CvFileStorage">
            <summary>
            Returns pointer to the underlying C FileStorage structure
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileStorage.WriteRaw(System.String,System.IntPtr,System.Int64)">
            <summary>
            Writes one or more numbers of the specified format to the currently written structure
            </summary>
            <param name="fmt"></param>
            <param name="vec"></param>
            <param name="len"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileStorage.WriteObj(System.String,System.IntPtr)">
            <summary>
            Writes the registered C structure (CvMat, CvMatND, CvSeq). See cvWrite()
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileStorage.GetDefaultObjectName(System.String)">
            <summary>
            Returns the normalized object name for the specified file name
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FileStorage.Item(System.String)">
            <summary>
            Returns the specified element of the top-level mapping
            </summary>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FileStorage.ElName">
            <summary>
            the currently written element
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FileStorage.Structs">
            <summary>
            the stack of written structures
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FileStorage.State">
            <summary>
            the writer state
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.FileNode">
            <summary>
            File Storage Node class
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileNode.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileNode.#ctor(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode)">
            <summary>
            The full constructor wrapping CvFileNode structure.
            </summary>
            <param name="fs"></param>
            <param name="node"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileNode.#ctor(OpenCvSharp.CPlusPlus.FileNode)">
            <summary>
            The copy constructor
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileNode.#ctor(System.IntPtr)">
            <summary>
            Initializes from cv::FileNode*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileNode.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileNode.op_Explicit(OpenCvSharp.CPlusPlus.FileNode)~System.Int32">
            <summary>
            Returns the node content as an integer. If the node stores floating-point number, it is rounded.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileNode.op_Explicit(OpenCvSharp.CPlusPlus.FileNode)~System.Single">
            <summary>
            Returns the node content as float
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileNode.op_Explicit(OpenCvSharp.CPlusPlus.FileNode)~System.Double">
            <summary>
            Returns the node content as double
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileNode.op_Explicit(OpenCvSharp.CPlusPlus.FileNode)~System.String">
            <summary>
            Returns the node content as text string
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileNode.ReadRaw(System.String,System.IntPtr,System.Int64)">
            <summary>
            Reads node elements to the buffer with the specified format
            </summary>
            <param name="fmt"></param>
            <param name="vec"></param>
            <param name="len"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FileNode.ReadObj">
            <summary>
            Reads the registered object and returns pointer to it
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FileNode.Item(System.String)">
            <summary>
            returns element of a mapping node
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FileNode.Item(System.Int32)">
            <summary>
            returns element of a sequence node
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FileNode.Empty">
            <summary>
            Returns true if the node is empty
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FileNode.IsNone">
            <summary>
            Returns true if the node is a "none" object
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FileNode.IsSeq">
            <summary>
            Returns true if the node is a sequence
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FileNode.IsMap">
            <summary>
            Returns true if the node is a mapping
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FileNode.IsInt">
            <summary>
            Returns true if the node is an integer
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FileNode.IsReal">
            <summary>
            Returns true if the node is a floating-point number
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FileNode.IsString">
            <summary>
            Returns true if the node is a text string
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FileNode.IsNamed">
            <summary>
            Returns true if the node has a name
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FileNode.Name">
            <summary>
            Returns the node name or an empty string if the node is nameless
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FileNode.Size">
            <summary>
            Returns the number of elements in the node, if it is a sequence or mapping, or 1 otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatExpr">
            <summary>
            Matrix expression
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.Abs">
            <summary>
            Computes absolute value of each matrix element
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Implicit(OpenCvSharp.CPlusPlus.MatExpr)~OpenCvSharp.CPlusPlus.Mat">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.ToMat">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Implicit(OpenCvSharp.CPlusPlus.Mat)~OpenCvSharp.CPlusPlus.MatExpr">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.FromMat(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_UnaryPlus(OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_UnaryNegation(OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_OnesComplement(OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Addition(OpenCvSharp.CPlusPlus.MatExpr,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Addition(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Addition(OpenCvSharp.CPlusPlus.MatExpr,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Addition(OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Addition(OpenCvSharp.CPlusPlus.MatExpr,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Subtraction(OpenCvSharp.CPlusPlus.MatExpr,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Subtraction(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Subtraction(OpenCvSharp.CPlusPlus.MatExpr,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Subtraction(OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Subtraction(OpenCvSharp.CPlusPlus.MatExpr,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Multiply(OpenCvSharp.CPlusPlus.MatExpr,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Multiply(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Multiply(OpenCvSharp.CPlusPlus.MatExpr,System.Double)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Multiply(System.Double,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Multiply(OpenCvSharp.CPlusPlus.MatExpr,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Division(OpenCvSharp.CPlusPlus.MatExpr,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Division(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Division(OpenCvSharp.CPlusPlus.MatExpr,System.Double)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Division(System.Double,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.op_Division(OpenCvSharp.CPlusPlus.MatExpr,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.Cross(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.Diag(System.Int32)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.Dot(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.Inv(OpenCvSharp.CPlusPlus.MatrixDecomposition)">
            <summary>
            
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.Mul(OpenCvSharp.CPlusPlus.MatExpr,System.Double)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.Mul(OpenCvSharp.CPlusPlus.Mat,System.Double)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.SubMat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="rowStart"></param>
            <param name="rowEnd"></param>
            <param name="colStart"></param>
            <param name="colEnd"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.SubMat(OpenCvSharp.CPlusPlus.Range,OpenCvSharp.CPlusPlus.Range)">
            <summary>
            
            </summary>
            <param name="rowRange"></param>
            <param name="colRange"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.SubMat(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            
            </summary>
            <param name="roi"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.T">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatExpr.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="rowStart"></param>
            <param name="rowEnd"></param>
            <param name="colStart"></param>
            <param name="colEnd"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatExpr.Item(OpenCvSharp.CPlusPlus.Range,OpenCvSharp.CPlusPlus.Range)">
            <summary>
            
            </summary>
            <param name="rowRange"></param>
            <param name="colRange"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatExpr.Item(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            
            </summary>
            <param name="roi"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatExpr.Col">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatExpr.Row">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatExpr.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatExpr.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatExpr.ColIndexer">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatExprRowColIndexer">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatExprRowColIndexer.parent">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExprRowColIndexer.#ctor(OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExprRowColIndexer.Get(System.Int32)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatExprRowColIndexer.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.ColIndexer.#ctor(OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatExpr.ColIndexer.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatExpr.RowIndexer">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExpr.RowIndexer.#ctor(OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatExpr.RowIndexer.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfInt4">
            <summary>
            A matrix whose element is 32SC1 (cv::Mat_&lt;int&gt;)
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Mat`2">
            <summary>
            Type-specific abstract matrix 
            </summary>
            <typeparam name="TElem">Element Type</typeparam>
            <typeparam name="TInherit">For return value type of re-defined Mat methods</typeparam>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Mat">
            <summary>
            OpenCV C++ n-dimensional dense array class (cv::Mat)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Abs">
            <summary>
            Computes absolute value of each matrix element
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ConvertScaleAbs(System.Double,System.Double)">
            <summary>
            Scales, computes absolute values and converts the result to 8-bit.
            </summary>
            <param name="alpha">The optional scale factor. [By default this is 1]</param>
            <param name="beta">The optional delta added to the scaled values. [By default this is 0]</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.LUT(OpenCvSharp.CPlusPlus.InputArray,System.Int32)">
            <summary>
            transforms array of numbers using a lookup table: dst(i)=lut(src(i))
            </summary>
            <param name="lut">Look-up table of 256 elements. 
            In the case of multi-channel source array, the table should either have 
            a single channel (in this case the same table is used for all channels)
             or the same number of channels as in the source array</param>
            <param name="interpolation"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.LUT(System.Byte[],System.Int32)">
            <summary>
            transforms array of numbers using a lookup table: dst(i)=lut(src(i))
            </summary>
            <param name="lut">Look-up table of 256 elements. 
            In the case of multi-channel source array, the table should either have 
            a single channel (in this case the same table is used for all channels)
             or the same number of channels as in the source array</param>
            <param name="interpolation"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Sum">
            <summary>
            computes sum of array elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.CountNonZero">
            <summary>
            computes the number of nonzero array elements
            </summary>
            <returns>number of non-zero elements in mtx</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.FindNonZero">
            <summary>
            returns the list of locations of non-zero pixels
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Mean(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            computes mean value of selected array elements
            </summary>
            <param name="mask">The optional operation mask</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.MeanStdDev(OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            computes mean value and standard deviation of all or selected array elements
            </summary>
            <param name="mean">The output parameter: computed mean value</param>
            <param name="stddev">The output parameter: computed standard deviation</param>
            <param name="mask">The optional operation mask</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Norm(OpenCvSharp.NormType,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            computes norm of the selected array part
            </summary>
            <param name="normType">Type of the norm</param>
            <param name="mask">The optional operation mask</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Normalize(System.Double,System.Double,OpenCvSharp.NormType,System.Int32,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            scales and shifts array elements so that either the specified norm (alpha) 
            or the minimum (alpha) and maximum (beta) array values get the specified values
            </summary>
            <param name="alpha">The norm value to normalize to or the lower range boundary 
            in the case of range normalization</param>
            <param name="beta">The upper range boundary in the case of range normalization; 
            not used for norm normalization</param>
            <param name="normType">The normalization type</param>
            <param name="dtype">When the parameter is negative, 
            the destination array will have the same type as src, 
            otherwise it will have the same number of channels as src and the depth =CV_MAT_DEPTH(rtype)</param>
            <param name="mask">The optional operation mask</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.MinMaxLoc(System.Double@,System.Double@)">
            <summary>
            finds global minimum and maximum array elements and returns their values and their locations
            </summary>
            <param name="minVal">Pointer to returned minimum value</param>
            <param name="maxVal">Pointer to returned maximum value</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.MinMaxLoc(OpenCvSharp.CPlusPlus.Point@,OpenCvSharp.CPlusPlus.Point@)">
            <summary>
            finds global minimum and maximum array elements and returns their values and their locations
            </summary>
            <param name="minLoc">Pointer to returned minimum location</param>
            <param name="maxLoc">Pointer to returned maximum location</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.MinMaxLoc(System.Double@,System.Double@,OpenCvSharp.CPlusPlus.Point@,OpenCvSharp.CPlusPlus.Point@,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            finds global minimum and maximum array elements and returns their values and their locations
            </summary>
            <param name="minVal">Pointer to returned minimum value</param>
            <param name="maxVal">Pointer to returned maximum value</param>
            <param name="minLoc">Pointer to returned minimum location</param>
            <param name="maxLoc">Pointer to returned maximum location</param>
            <param name="mask">The optional mask used to select a sub-array</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.MinMaxIdx(System.Double@,System.Double@)">
            <summary>
            finds global minimum and maximum array elements and returns their values and their locations
            </summary>
            <param name="minVal">Pointer to returned minimum value</param>
            <param name="maxVal">Pointer to returned maximum value</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.MinMaxIdx(System.Int32@,System.Int32@)">
            <summary>
            finds global minimum and maximum array elements and returns their values and their locations
            </summary>
            <param name="minIdx"></param>
            <param name="maxIdx"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.MinMaxIdx(System.Double@,System.Double@,System.Int32@,System.Int32@,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            finds global minimum and maximum array elements and returns their values and their locations
            </summary>
            <param name="minVal">Pointer to returned minimum value</param>
            <param name="maxVal">Pointer to returned maximum value</param>
            <param name="minIdx"></param>
            <param name="maxIdx"></param>
            <param name="mask"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Reduce(OpenCvSharp.ReduceDimension,OpenCvSharp.ReduceOperation,System.Int32)">
            <summary>
            transforms 2D matrix to 1D row or column vector by taking sum, minimum, maximum or mean value over all the rows
            </summary>
            <param name="dim">The dimension index along which the matrix is reduced. 
            0 means that the matrix is reduced to a single row and 1 means that the matrix is reduced to a single column</param>
            <param name="rtype"></param>
            <param name="dtype">When it is negative, the destination vector will have 
            the same type as the source matrix, otherwise, its type will be CV_MAKE_TYPE(CV_MAT_DEPTH(dtype), mtx.channels())</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Split">
            <summary>
            Copies each plane of a multi-channel array to a dedicated array
            </summary>
            <returns>The number of arrays must match mtx.channels() . 
            The arrays themselves will be reallocated if needed</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ExtractChannel(System.Int32)">
            <summary>
            extracts a single channel from src (coi is 0-based index)
            </summary>
            <param name="coi"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.InsertChannel(OpenCvSharp.CPlusPlus.InputOutputArray,System.Int32)">
            <summary>
            inserts a single channel to dst (coi is 0-based index)
            </summary>
            <param name="dst"></param>
            <param name="coi"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Flip(OpenCvSharp.FlipMode)">
            <summary>
            reverses the order of the rows, columns or both in a matrix
            </summary>
            <param name="flipCode">Specifies how to flip the array: 
            0 means flipping around the x-axis, positive (e.g., 1) means flipping around y-axis, 
            and negative (e.g., -1) means flipping around both axes. See also the discussion below for the formulas.</param>
            <returns>The destination array; will have the same size and same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Repeat(System.Int32,System.Int32)">
            <summary>
            replicates the input matrix the specified number of times in the horizontal and/or vertical direction
            </summary>
            <param name="ny">How many times the src is repeated along the vertical axis</param>
            <param name="nx">How many times the src is repeated along the horizontal axis</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.InRange(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            set mask elements for those array elements which are within the element-specific bounding box (dst = lowerb &lt;= src &amp;&amp; src &lt; upperb)
            </summary>
            <param name="lowerb">The inclusive lower boundary array of the same size and type as src</param>
            <param name="upperb">The exclusive upper boundary array of the same size and type as src</param>
            <returns>The destination array, will have the same size as src and CV_8U type</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.InRange(OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            set mask elements for those array elements which are within the element-specific bounding box (dst = lowerb &lt;= src &amp;&amp; src &lt; upperb)
            </summary>
            <param name="lowerb">The inclusive lower boundary array of the same size and type as src</param>
            <param name="upperb">The exclusive upper boundary array of the same size and type as src</param>
            <returns>The destination array, will have the same size as src and CV_8U type</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Sqrt">
            <summary>
            computes square root of each matrix element (dst = src**0.5)
            </summary>
            <returns>The destination array; will have the same size and the same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Pow(System.Double)">
            <summary>
            raises the input matrix elements to the specified power (b = a**power)
            </summary>
            <param name="power">The exponent of power</param>
            <returns>The destination array; will have the same size and the same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Exp">
            <summary>
            computes exponent of each matrix element (dst = e**src)
            </summary>
            <returns>The destination array; will have the same size and same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Log">
            <summary>
            computes natural logarithm of absolute value of each matrix element: dst = log(abs(src))
            </summary>
            <returns>The destination array; will have the same size and same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.CheckRange(System.Boolean)">
            <summary>
            checks that each matrix element is within the specified range.
            </summary>
            <param name="quiet">The flag indicating whether the functions quietly 
            return false when the array elements are out of range, 
            or they throw an exception.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.CheckRange(System.Boolean,OpenCvSharp.CPlusPlus.Point@,System.Double,System.Double)">
            <summary>
            checks that each matrix element is within the specified range.
            </summary>
            <param name="quiet">The flag indicating whether the functions quietly 
            return false when the array elements are out of range, 
            or they throw an exception.</param>
            <param name="pos">The optional output parameter, where the position of 
            the first outlier is stored.</param>
            <param name="minVal">The inclusive lower boundary of valid values range</param>
            <param name="maxVal">The exclusive upper boundary of valid values range</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.PatchNaNs(System.Double)">
            <summary>
            converts NaN's to the given number
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.MulTransposed(System.Boolean,OpenCvSharp.CPlusPlus.InputArray,System.Double,System.Int32)">
            <summary>
            multiplies matrix by its transposition from the left or from the right
            </summary>
            <param name="aTa">Specifies the multiplication ordering; see the description below</param>
            <param name="delta">The optional delta matrix, subtracted from src before the 
            multiplication. When the matrix is empty ( delta=Mat() ), it’s assumed to be 
            zero, i.e. nothing is subtracted, otherwise if it has the same size as src, 
            then it’s simply subtracted, otherwise it is "repeated" to cover the full src 
            and then subtracted. Type of the delta matrix, when it's not empty, must be the 
            same as the type of created destination matrix, see the rtype description</param>
            <param name="scale">The optional scale factor for the matrix product</param>
            <param name="dtype">When it’s negative, the destination matrix will have the 
            same type as src . Otherwise, it will have type=CV_MAT_DEPTH(rtype), 
            which should be either CV_32F or CV_64F</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Transpose">
            <summary>
            transposes the matrix
            </summary>
            <returns>The destination array of the same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Transform(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            performs affine transformation of each element of multi-channel input matrix
            </summary>
            <param name="m">The transformation matrix</param>
            <returns>The destination array; will have the same size and depth as src and as many channels as mtx.rows</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.PerspectiveTransform(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            performs perspective transformation of each element of multi-channel input matrix
            </summary>
            <param name="m">3x3 or 4x4 transformation matrix</param>
            <returns>The destination array; it will have the same size and same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.CompleteSymm(System.Boolean)">
            <summary>
            extends the symmetrical matrix from the lower half or from the upper half
            </summary>
            <param name="lowerToUpper">If true, the lower half is copied to the upper half, 
            otherwise the upper half is copied to the lower half</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetIdentity(System.Nullable{OpenCvSharp.CPlusPlus.Scalar})">
            <summary>
            initializes scaled identity matrix (not necessarily square). 
            </summary>
            <param name="s">The value to assign to the diagonal elements</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Determinant">
            <summary>
            computes determinant of a square matrix.
            The input matrix must have CV_32FC1 or CV_64FC1 type and square size.
            </summary>
            <returns>determinant of the specified matrix.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Trace">
            <summary>
            computes trace of a matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Sort(OpenCvSharp.SortFlag)">
            <summary>
            sorts independently each matrix row or each matrix column
            </summary>
            <param name="flags">The operation flags, a combination of the SortFlag values</param>
            <returns>The destination array of the same size and the same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SortIdx(OpenCvSharp.SortFlag)">
            <summary>
            sorts independently each matrix row or each matrix column
            </summary>
            <param name="flags">The operation flags, a combination of SortFlag values</param>
            <returns>The destination integer array of the same size as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Dft(OpenCvSharp.CPlusPlus.DftFlag2,System.Int32)">
            <summary>
            Performs a forward Discrete Fourier transform of 1D or 2D floating-point array.
            </summary>
            <param name="flags">Transformation flags, a combination of the DftFlag2 values</param>
            <param name="nonzeroRows">When the parameter != 0, the function assumes that 
            only the first nonzeroRows rows of the input array ( DFT_INVERSE is not set) 
            or only the first nonzeroRows of the output array ( DFT_INVERSE is set) contain non-zeros, 
            thus the function can handle the rest of the rows more efficiently and 
            thus save some time. This technique is very useful for computing array cross-correlation 
            or convolution using DFT</param>
            <returns>The destination array, which size and type depends on the flags</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Idft(OpenCvSharp.CPlusPlus.DftFlag2,System.Int32)">
            <summary>
            Performs an inverse Discrete Fourier transform of 1D or 2D floating-point array.
            </summary>
            <param name="flags">Transformation flags, a combination of the DftFlag2 values</param>
            <param name="nonzeroRows">When the parameter != 0, the function assumes that 
            only the first nonzeroRows rows of the input array ( DFT_INVERSE is not set) 
            or only the first nonzeroRows of the output array ( DFT_INVERSE is set) contain non-zeros, 
            thus the function can handle the rest of the rows more efficiently and 
            thus save some time. This technique is very useful for computing array cross-correlation 
            or convolution using DFT</param>
            <returns>The destination array, which size and type depends on the flags</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Dct(OpenCvSharp.CPlusPlus.DctFlag2)">
            <summary>
            performs forward or inverse 1D or 2D Discrete Cosine Transformation
            </summary>
            <param name="flags">Transformation flags, a combination of DctFlag2 values</param>
            <returns>The destination array; will have the same size and same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Idct(OpenCvSharp.CPlusPlus.DctFlag2)">
            <summary>
            performs inverse 1D or 2D Discrete Cosine Transformation
            </summary>
            <param name="flags">Transformation flags, a combination of DctFlag2 values</param>
            <returns>The destination array; will have the same size and same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Randu(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            fills array with uniformly-distributed random numbers from the range [low, high)
            </summary>
            <param name="low">The inclusive lower boundary of the generated random numbers</param>
            <param name="high">The exclusive upper boundary of the generated random numbers</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Randu(OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            fills array with uniformly-distributed random numbers from the range [low, high)
            </summary>
            <param name="low">The inclusive lower boundary of the generated random numbers</param>
            <param name="high">The exclusive upper boundary of the generated random numbers</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Randn(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            fills array with normally-distributed random numbers with the specified mean and the standard deviation
            </summary>
            <param name="mean">The mean value (expectation) of the generated random numbers</param>
            <param name="stddev">The standard deviation of the generated random numbers</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Randn(OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            fills array with normally-distributed random numbers with the specified mean and the standard deviation
            </summary>
            <param name="mean">The mean value (expectation) of the generated random numbers</param>
            <param name="stddev">The standard deviation of the generated random numbers</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.RandShuffle(System.Double,OpenCvSharp.CPlusPlus.RNG)">
            <summary>
            shuffles the input array elements
            </summary>
            <param name="iterFactor">The scale factor that determines the number of random swap operations.</param>
            <param name="rng">The optional random number generator used for shuffling. 
            If it is null, theRng() is used instead.</param>
            <returns>The input/output numerical 1D array</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Line(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1X">First point's x-coordinate of the line segment. </param>
            <param name="pt1Y">First point's y-coordinate of the line segment. </param>
            <param name="pt2X">Second point's x-coordinate of the line segment. </param>
            <param name="pt2Y">Second point's y-coordinate of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. [By default this is 1]</param>
            <param name="lineType">Type of the line. [By default this is LineType.Link8]</param>
            <param name="shift">Number of fractional bits in the point coordinates. [By default this is 0]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Line(OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a line segment connecting two points
            </summary>
            <param name="pt1">First point of the line segment. </param>
            <param name="pt2">Second point of the line segment. </param>
            <param name="color">Line color. </param>
            <param name="thickness">Line thickness. [By default this is 1]</param>
            <param name="lineType">Type of the line. [By default this is LineType.Link8]</param>
            <param name="shift">Number of fractional bits in the point coordinates. [By default this is 0]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Rectangle(OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="pt1">One of the rectangle vertices. </param>
            <param name="pt2">Opposite rectangle vertex. </param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values make the function to draw a filled rectangle. [By default this is 1]</param>
            <param name="lineType">Type of the line, see cvLine description. [By default this is LineType.Link8]</param>
            <param name="shift">Number of fractional bits in the point coordinates. [By default this is 0]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Rectangle(OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple, thick or filled rectangle
            </summary>
            <param name="rect">Rectangle.</param>
            <param name="color">Line color (RGB) or brightness (grayscale image). </param>
            <param name="thickness">Thickness of lines that make up the rectangle. Negative values make the function to draw a filled rectangle. [By default this is 1]</param>
            <param name="lineType">Type of the line, see cvLine description. [By default this is LineType.Link8]</param>
            <param name="shift">Number of fractional bits in the point coordinates. [By default this is 0]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Circle(System.Int32,System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="centerX">X-coordinate of the center of the circle. </param>
            <param name="centerY">Y-coordinate of the center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. [By default this is 1]</param>
            <param name="lineType">Type of the circle boundary. [By default this is LineType.Link8]</param>
            <param name="shift">Number of fractional bits in the center coordinates and radius value. [By default this is 0]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Circle(OpenCvSharp.CPlusPlus.Point,System.Int32,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws a circle
            </summary>
            <param name="center">Center of the circle. </param>
            <param name="radius">Radius of the circle. </param>
            <param name="color">Circle color. </param>
            <param name="thickness">Thickness of the circle outline if positive, otherwise indicates that a filled circle has to be drawn. [By default this is 1]</param>
            <param name="lineType">Type of the circle boundary. [By default this is LineType.Link8]</param>
            <param name="shift">Number of fractional bits in the center coordinates and radius value. [By default this is 0]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Ellipse(OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Size,System.Double,System.Double,System.Double,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="center">Center of the ellipse. </param>
            <param name="axes">Length of the ellipse axes. </param>
            <param name="angle">Rotation angle. </param>
            <param name="startAngle">Starting angle of the elliptic arc. </param>
            <param name="endAngle">Ending angle of the elliptic arc. </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse arc. [By default this is 1]</param>
            <param name="lineType">Type of the ellipse boundary. [By default this is LineType.Link8]</param>
            <param name="shift">Number of fractional bits in the center coordinates and axes' values. [By default this is 0]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Ellipse(OpenCvSharp.CPlusPlus.RotatedRect,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            Draws simple or thick elliptic arc or fills ellipse sector
            </summary>
            <param name="box">The enclosing box of the ellipse drawn </param>
            <param name="color">Ellipse color. </param>
            <param name="thickness">Thickness of the ellipse boundary. [By default this is 1]</param>
            <param name="lineType">Type of the ellipse boundary. [By default this is LineType.Link8]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.FillConvexPoly(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point},OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.LineType,System.Int32)">
            <summary>
            Fills a convex polygon.
            </summary>
            <param name="pts">The polygon vertices</param>
            <param name="color">Polygon color</param>
            <param name="lineType">Type of the polygon boundaries</param>
            <param name="shift">The number of fractional bits in the vertex coordinates</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.FillPoly(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point}},OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.LineType,System.Int32,System.Nullable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            Fills the area bounded by one or more polygons
            </summary>
            <param name="pts">Array of polygons, each represented as an array of points</param>
            <param name="color">Polygon color</param>
            <param name="lineType">Type of the polygon boundaries</param>
            <param name="shift">The number of fractional bits in the vertex coordinates</param>
            <param name="offset"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Polylines(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point}},System.Boolean,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            draws one or more polygonal curves
            </summary>
            <param name="pts"></param>
            <param name="isClosed"></param>
            <param name="color"></param>
            <param name="thickness"></param>
            <param name="lineType"></param>
            <param name="shift"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.PutText(System.String,OpenCvSharp.CPlusPlus.Point,OpenCvSharp.FontFace,System.Double,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Boolean)">
            <summary>
            renders text string in the image
            </summary>
            <param name="text"></param>
            <param name="org"></param>
            <param name="fontFace"></param>
            <param name="fontScale"></param>
            <param name="color"></param>
            <param name="thickness"></param>
            <param name="lineType"></param>
            <param name="bottomLeftOrigin"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ImEncode(System.String,System.Int32[])">
            <summary>
            Encodes an image into a memory buffer.
            </summary>
            <param name="ext">Encodes an image into a memory buffer.</param>
            <param name="prms">Format-specific parameters.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ImEncode(System.String,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            Encodes an image into a memory buffer.
            </summary>
            <param name="ext">Encodes an image into a memory buffer.</param>
            <param name="prms">Format-specific parameters.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ImWrite(System.String,System.Int32[])">
            <summary>
            Saves an image to a specified file.
            </summary>
            <param name="fileName"></param>
            <param name="prms"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ImWrite(System.String,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            Saves an image to a specified file.
            </summary>
            <param name="fileName"></param>
            <param name="prms"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SaveImage(System.String,System.Int32[])">
            <summary>
            Saves an image to a specified file.
            </summary>
            <param name="fileName"></param>
            <param name="prms"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SaveImage(System.String,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            Saves an image to a specified file.
            </summary>
            <param name="fileName"></param>
            <param name="prms"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.CopyMakeBorder(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.BorderType,System.Nullable{OpenCvSharp.CPlusPlus.Scalar})">
            <summary>
            Forms a border around the image
            </summary>
            <param name="top">Specify how much pixels in each direction from the source image rectangle one needs to extrapolate</param>
            <param name="bottom">Specify how much pixels in each direction from the source image rectangle one needs to extrapolate</param>
            <param name="left">Specify how much pixels in each direction from the source image rectangle one needs to extrapolate</param>
            <param name="right">Specify how much pixels in each direction from the source image rectangle one needs to extrapolate</param>
            <param name="borderType">The border type</param>
            <param name="value">The border value if borderType == Constant</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.MedianBlur(System.Int32)">
            <summary>
            Smoothes image using median filter.
            The source image must have 1-, 3- or 4-channel and 
            its depth should be CV_8U , CV_16U or CV_32F. 
            </summary>
            <param name="ksize">The aperture linear size. It must be odd and more than 1, i.e. 3, 5, 7 ...</param>
            <returns>The destination array; will have the same size and the same type as src.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GaussianBlur(OpenCvSharp.CPlusPlus.Size,System.Double,System.Double,OpenCvSharp.BorderType)">
            <summary>
            Blurs an image using a Gaussian filter.
            The input image can have any number of channels, which are processed independently, 
            but the depth should be CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.
            </summary>
            <param name="ksize">Gaussian kernel size. ksize.width and ksize.height can differ but they both must be positive and odd. 
            Or, they can be zero’s and then they are computed from sigma* .</param>
            <param name="sigmaX">Gaussian kernel standard deviation in X direction.</param>
            <param name="sigmaY">Gaussian kernel standard deviation in Y direction; if sigmaY is zero, it is set to be equal to sigmaX, 
            if both sigmas are zeros, they are computed from ksize.width and ksize.height, 
            respectively (see getGaussianKernel() for details); to fully control the result 
            regardless of possible future modifications of all this semantics, it is recommended to specify all of ksize, sigmaX, and sigmaY.</param>
            <param name="borderType">pixel extrapolation method</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.BilateralFilter(System.Int32,System.Double,System.Double,OpenCvSharp.BorderType)">
            <summary>
            Applies bilateral filter to the image
            The source image must be a 8-bit or floating-point, 1-channel or 3-channel image.
            </summary>
            <param name="d">The diameter of each pixel neighborhood, that is used during filtering. 
            If it is non-positive, it's computed from sigmaSpace</param>
            <param name="sigmaColor">Filter sigma in the color space. 
            Larger value of the parameter means that farther colors within the pixel neighborhood 
            will be mixed together, resulting in larger areas of semi-equal color</param>
            <param name="sigmaSpace">Filter sigma in the coordinate space. 
            Larger value of the parameter means that farther pixels will influence each other 
            (as long as their colors are close enough; see sigmaColor). Then d>0 , it specifies 
            the neighborhood size regardless of sigmaSpace, otherwise d is proportional to sigmaSpace</param>
            <param name="borderType"></param>
            <returns>The destination image; will have the same size and the same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.AdaptiveBilateralFilter(OpenCvSharp.CPlusPlus.Size,System.Double,System.Double,System.Nullable{OpenCvSharp.CPlusPlus.Point},OpenCvSharp.BorderType)">
            <summary>
            Applies the adaptive bilateral filter to an image.
            </summary>
            <param name="ksize">The kernel size. This is the neighborhood where the local variance will be calculated, 
            and where pixels will contribute (in a weighted manner).</param>
            <param name="sigmaSpace">Filter sigma in the coordinate space. 
            Larger value of the parameter means that farther pixels will influence each other 
            (as long as their colors are close enough; see sigmaColor). Then d>0, it specifies the neighborhood 
            size regardless of sigmaSpace, otherwise d is proportional to sigmaSpace.</param>
            <param name="maxSigmaColor">Maximum allowed sigma color (will clamp the value calculated in the 
            ksize neighborhood. Larger value of the parameter means that more dissimilar pixels will 
            influence each other (as long as their colors are close enough; see sigmaColor). 
            Then d>0, it specifies the neighborhood size regardless of sigmaSpace, otherwise d is proportional to sigmaSpace.</param>
            <param name="anchor">The anchor point. The default value Point(-1,-1) means that the anchor is at the kernel center</param>
            <param name="borderType">Pixel extrapolation method.</param>
            <returns>The destination image; will have the same size and the same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.BoxFilter(OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Size,System.Nullable{OpenCvSharp.CPlusPlus.Point},System.Boolean,OpenCvSharp.BorderType)">
            <summary>
            Smoothes image using box filter
            </summary>
            <param name="ddepth"></param>
            <param name="ksize">The smoothing kernel size</param>
            <param name="anchor">The anchor point. The default value Point(-1,-1) means that the anchor is at the kernel center</param>
            <param name="normalize">Indicates, whether the kernel is normalized by its area or not</param>
            <param name="borderType">The border mode used to extrapolate pixels outside of the image</param>
            <returns>The destination image; will have the same size and the same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Blur(OpenCvSharp.CPlusPlus.Size,System.Nullable{OpenCvSharp.CPlusPlus.Point},OpenCvSharp.BorderType)">
            <summary>
            Smoothes image using normalized box filter
            </summary>
            <param name="ksize">The smoothing kernel size</param>
            <param name="anchor">The anchor point. The default value Point(-1,-1) means that the anchor is at the kernel center</param>
            <param name="borderType">The border mode used to extrapolate pixels outside of the image</param>
            <returns>The destination image; will have the same size and the same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Filter2D(OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.InputArray,System.Nullable{OpenCvSharp.CPlusPlus.Point},System.Double,OpenCvSharp.BorderType)">
            <summary>
            Convolves an image with the kernel
            </summary>
            <param name="ddepth">The desired depth of the destination image. If it is negative, it will be the same as src.depth()</param>
            <param name="kernel">Convolution kernel (or rather a correlation kernel), 
            a single-channel floating point matrix. If you want to apply different kernels to 
            different channels, split the image into separate color planes using split() and process them individually</param>
            <param name="anchor">The anchor of the kernel that indicates the relative position of 
            a filtered point within the kernel. The anchor should lie within the kernel. 
            The special default value (-1,-1) means that the anchor is at the kernel center</param>
            <param name="delta">The optional value added to the filtered pixels before storing them in dst</param>
            <param name="borderType">The pixel extrapolation method</param>
            <returns>The destination image. It will have the same size and the same number of channels as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SepFilter2D(OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,System.Nullable{OpenCvSharp.CPlusPlus.Point},System.Double,OpenCvSharp.BorderType)">
            <summary>
            Applies separable linear filter to an image
            </summary>
            <param name="ddepth">The destination image depth</param>
            <param name="kernelX">The coefficients for filtering each row</param>
            <param name="kernelY">The coefficients for filtering each column</param>
            <param name="anchor">The anchor position within the kernel; The default value (-1, 1) means that the anchor is at the kernel center</param>
            <param name="delta">The value added to the filtered results before storing them</param>
            <param name="borderType">The pixel extrapolation method</param>
            <returns>The destination image; will have the same size and the same number of channels as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Sobel(OpenCvSharp.CPlusPlus.MatType,System.Int32,System.Int32,System.Int32,System.Double,System.Double,OpenCvSharp.BorderType)">
            <summary>
            Calculates the first, second, third or mixed image derivatives using an extended Sobel operator
            </summary>
            <param name="ddepth">The destination image depth</param>
            <param name="xorder">Order of the derivative x</param>
            <param name="yorder">Order of the derivative y</param>
            <param name="ksize">Size of the extended Sobel kernel, must be 1, 3, 5 or 7</param>
            <param name="scale">The optional scale factor for the computed derivative values (by default, no scaling is applied</param>
            <param name="delta">The optional delta value, added to the results prior to storing them in dst</param>
            <param name="borderType">The pixel extrapolation method</param>
            <returns>The destination image; will have the same size and the same number of channels as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Scharr(OpenCvSharp.CPlusPlus.MatType,System.Int32,System.Int32,System.Double,System.Double,OpenCvSharp.BorderType)">
            <summary>
            Calculates the first x- or y- image derivative using Scharr operator
            </summary>
            <param name="ddepth">The destination image depth</param>
            <param name="xorder">Order of the derivative x</param>
            <param name="yorder">Order of the derivative y</param>
            <param name="scale">The optional scale factor for the computed derivative values (by default, no scaling is applie</param>
            <param name="delta">The optional delta value, added to the results prior to storing them in dst</param>
            <param name="borderType">The pixel extrapolation method</param>
            <returns>The destination image; will have the same size and the same number of channels as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Laplacian(OpenCvSharp.CPlusPlus.MatType,System.Int32,System.Double,System.Double,OpenCvSharp.BorderType)">
            <summary>
            Calculates the Laplacian of an image
            </summary>
            <param name="ddepth">The desired depth of the destination image</param>
            <param name="ksize">The aperture size used to compute the second-derivative filters</param>
            <param name="scale">The optional scale factor for the computed Laplacian values (by default, no scaling is applied</param>
            <param name="delta">The optional delta value, added to the results prior to storing them in dst</param>
            <param name="borderType">The pixel extrapolation method</param>
            <returns>Destination image; will have the same size and the same number of channels as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Canny(System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Finds edges in an image using Canny algorithm.
            </summary>
            <param name="threshold1">The first threshold for the hysteresis procedure</param>
            <param name="threshold2">The second threshold for the hysteresis procedure</param>
            <param name="apertureSize">Aperture size for the Sobel operator [By default this is ApertureSize.Size3]</param>
            <param name="L2gradient">Indicates, whether the more accurate L2 norm should be used to compute the image gradient magnitude (true), or a faster default L1 norm is enough (false). [By default this is false]</param>
            <returns>The output edge map. It will have the same size and the same type as image</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.CornerEigenValsAndVecs(System.Int32,System.Int32,OpenCvSharp.BorderType)">
            <summary>
            computes both eigenvalues and the eigenvectors of 2x2 derivative covariation matrix  at each pixel. The output is stored as 6-channel matrix.
            </summary>
            <param name="blockSize"></param>
            <param name="ksize"></param>
            <param name="borderType"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.PreCornerDetect(System.Int32,OpenCvSharp.BorderType)">
            <summary>
            computes another complex cornerness criteria at each pixel
            </summary>
            <param name="ksize"></param>
            <param name="borderType"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.CornerSubPix(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CvTermCriteria)">
            <summary>
            adjusts the corner locations with sub-pixel accuracy to maximize the certain cornerness criteria
            </summary>
            <param name="inputCorners">Initial coordinates of the input corners and refined coordinates provided for output.</param>
            <param name="winSize">Half of the side length of the search window.</param>
            <param name="zeroZone">Half of the size of the dead region in the middle of the search zone 
            over which the summation in the formula below is not done. It is used sometimes to avoid possible singularities 
            of the autocorrelation matrix. The value of (-1,-1) indicates that there is no such a size.</param>
            <param name="criteria">Criteria for termination of the iterative process of corner refinement. 
            That is, the process of corner position refinement stops either after criteria.maxCount iterations 
            or when the corner position moves by less than criteria.epsilon on some iteration.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GoodFeaturesToTrack(System.Int32,System.Double,System.Double,OpenCvSharp.CPlusPlus.InputArray,System.Int32,System.Boolean,System.Double)">
            <summary>
            Finds the strong enough corners where the cornerMinEigenVal() or cornerHarris() report the local maxima.
            Input matrix must be 8-bit or floating-point 32-bit, single-channel image.
            </summary>
            <param name="maxCorners">Maximum number of corners to return. If there are more corners than are found, 
            the strongest of them is returned.</param>
            <param name="qualityLevel">Parameter characterizing the minimal accepted quality of image corners. 
            The parameter value is multiplied by the best corner quality measure, which is the minimal eigenvalue 
            or the Harris function response (see cornerHarris() ). The corners with the quality measure less than 
            the product are rejected. For example, if the best corner has the quality measure = 1500, and the qualityLevel=0.01, 
            then all the corners with the quality measure less than 15 are rejected.</param>
            <param name="minDistance">Minimum possible Euclidean distance between the returned corners.</param>
            <param name="mask">Optional region of interest. If the image is not empty
             (it needs to have the type CV_8UC1 and the same size as image ), it specifies the region 
            in which the corners are detected.</param>
            <param name="blockSize">Size of an average block for computing a derivative covariation matrix over each pixel neighborhood.</param>
            <param name="useHarrisDetector">Parameter indicating whether to use a Harris detector</param>
            <param name="k">Free parameter of the Harris detector.</param>
            <returns>Output vector of detected corners.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.HoughLines(System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Finds lines in a binary image using standard Hough transform.
            The input matrix must be 8-bit, single-channel, binary source image. 
            This image may be modified by the function.
            </summary>
            <param name="rho">Distance resolution of the accumulator in pixels</param>
            <param name="theta">Angle resolution of the accumulator in radians</param>
            <param name="threshold">The accumulator threshold parameter. Only those lines are returned that get enough votes ( &gt; threshold )</param>
            <param name="srn">For the multi-scale Hough transform it is the divisor for the distance resolution rho. [By default this is 0]</param>
            <param name="stn">For the multi-scale Hough transform it is the divisor for the distance resolution theta. [By default this is 0]</param>
            <returns>The output vector of lines. Each line is represented by a two-element vector (rho, theta) . 
            rho is the distance from the coordinate origin (0,0) (top-left corner of the image) and theta is the line rotation angle in radians</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.HoughLinesP(System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Finds lines segments in a binary image using probabilistic Hough transform.
            </summary>
            <param name="rho">Distance resolution of the accumulator in pixels</param>
            <param name="theta">Angle resolution of the accumulator in radians</param>
            <param name="threshold">The accumulator threshold parameter. Only those lines are returned that get enough votes ( &gt; threshold )</param>
            <param name="minLineLength">The minimum line length. Line segments shorter than that will be rejected. [By default this is 0]</param>
            <param name="maxLineGap">The maximum allowed gap between points on the same line to link them. [By default this is 0]</param>
            <returns>The output lines. Each line is represented by a 4-element vector (x1, y1, x2, y2)</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.HoughCircles(OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Finds circles in a grayscale image using a Hough transform.
            The input matrix must be 8-bit, single-channel and grayscale.
            </summary>
            <param name="method">Currently, the only implemented method is HoughCirclesMethod.Gradient</param>
            <param name="dp">The inverse ratio of the accumulator resolution to the image resolution. </param>
            <param name="minDist">Minimum distance between the centers of the detected circles. </param>
            <param name="param1">The first method-specific parameter. [By default this is 100]</param>
            <param name="param2">The second method-specific parameter. [By default this is 100]</param>
            <param name="minRadius">Minimum circle radius. [By default this is 0]</param>
            <param name="maxRadius">Maximum circle radius. [By default this is 0] </param>
            <returns>The output vector found circles. Each vector is encoded as 3-element floating-point vector (x, y, radius)</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Dilate(OpenCvSharp.CPlusPlus.InputArray,System.Nullable{OpenCvSharp.CPlusPlus.Point},System.Int32,OpenCvSharp.BorderType,System.Nullable{OpenCvSharp.CPlusPlus.Scalar})">
            <summary>
            Dilates an image by using a specific structuring element.
            </summary>
            <param name="element">The structuring element used for dilation. If element=new Mat() , a 3x3 rectangular structuring element is used</param>
            <param name="anchor">Position of the anchor within the element. The default value (-1, -1) means that the anchor is at the element center</param>
            <param name="iterations">The number of times dilation is applied. [By default this is 1]</param>
            <param name="borderType">The pixel extrapolation method. [By default this is BorderType.Constant]</param>
            <param name="borderValue">The border value in case of a constant border. The default value has a special meaning. [By default this is CvCpp.MorphologyDefaultBorderValue()]</param>
            <returns>The destination image. It will have the same size and the same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Erode(OpenCvSharp.CPlusPlus.InputArray,System.Nullable{OpenCvSharp.CvPoint},System.Int32,OpenCvSharp.BorderType,System.Nullable{OpenCvSharp.CvScalar})">
            <summary>
            Erodes an image by using a specific structuring element.
            </summary>
            <param name="element">The structuring element used for dilation. If element=new Mat(), a 3x3 rectangular structuring element is used</param>
            <param name="anchor">Position of the anchor within the element. The default value (-1, -1) means that the anchor is at the element center</param>
            <param name="iterations">The number of times erosion is applied</param>
            <param name="borderType">The pixel extrapolation method</param>
            <param name="borderValue">The border value in case of a constant border. The default value has a special meaning. [By default this is CvCpp.MorphologyDefaultBorderValue()]</param>
            <returns>The destination image. It will have the same size and the same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.MorphologyEx(OpenCvSharp.MorphologyOperation,OpenCvSharp.CPlusPlus.InputArray,System.Nullable{OpenCvSharp.CvPoint},System.Int32,OpenCvSharp.BorderType,System.Nullable{OpenCvSharp.CvScalar})">
            <summary>
            Performs advanced morphological transformations
            </summary>
            <param name="op">Type of morphological operation</param>
            <param name="element">Structuring element</param>
            <param name="anchor">Position of the anchor within the element. The default value (-1, -1) means that the anchor is at the element center</param>
            <param name="iterations">Number of times erosion and dilation are applied. [By default this is 1]</param>
            <param name="borderType">The pixel extrapolation method. [By default this is BorderType.Constant]</param>
            <param name="borderValue">The border value in case of a constant border. The default value has a special meaning. [By default this is CvCpp.MorphologyDefaultBorderValue()]</param>
            <returns>Destination image. It will have the same size and the same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Resize(OpenCvSharp.CPlusPlus.Size,System.Double,System.Double,OpenCvSharp.Interpolation)">
            <summary>
            Resizes an image.
            </summary>
            <param name="dsize">output image size; if it equals zero, it is computed as: 
            dsize = Size(round(fx*src.cols), round(fy*src.rows))
            Either dsize or both fx and fy must be non-zero.</param>
            <param name="fx">scale factor along the horizontal axis; when it equals 0, 
            it is computed as: (double)dsize.width/src.cols</param>
            <param name="fy">scale factor along the vertical axis; when it equals 0, 
            it is computed as: (double)dsize.height/src.rows</param>
            <param name="interpolation">interpolation method</param>
            <returns>output image; it has the size dsize (when it is non-zero) or the size computed 
            from src.size(), fx, and fy; the type of dst is the same as of src.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.WarpAffine(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.Interpolation,OpenCvSharp.BorderType,System.Nullable{OpenCvSharp.CPlusPlus.Scalar})">
            <summary>
            Applies an affine transformation to an image.
            </summary>
            <returns>output image that has the size dsize and the same type as src.</returns>
            <param name="m">2x3 transformation matrix.</param>
            <param name="dsize">size of the output image.</param>
            <param name="flags">combination of interpolation methods and the optional flag 
            WARP_INVERSE_MAP that means that M is the inverse transformation (dst -> src) .</param>
            <param name="borderMode">pixel extrapolation method; when borderMode=BORDER_TRANSPARENT, 
            it means that the pixels in the destination image corresponding to the "outliers" 
            in the source image are not modified by the function.</param>
            <param name="borderValue">value used in case of a constant border; by default, it is 0.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.WarpPerspective(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.Interpolation,OpenCvSharp.BorderType,System.Nullable{OpenCvSharp.CPlusPlus.Scalar})">
            <summary>
            Applies a perspective transformation to an image.
            </summary>
            <param name="m">3x3 transformation matrix.</param>
            <param name="dsize">size of the output image.</param>
            <param name="flags">combination of interpolation methods (INTER_LINEAR or INTER_NEAREST) 
            and the optional flag WARP_INVERSE_MAP, that sets M as the inverse transformation (dst -> src).</param>
            <param name="borderMode">pixel extrapolation method (BORDER_CONSTANT or BORDER_REPLICATE).</param>
            <param name="borderValue">value used in case of a constant border; by default, it equals 0.</param>
            <returns>output image that has the size dsize and the same type as src.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Remap(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.Interpolation,OpenCvSharp.BorderType,System.Nullable{OpenCvSharp.CvScalar})">
            <summary>
            Applies a generic geometrical transformation to an image.
            </summary>
            <param name="map1">The first map of either (x,y) points or just x values having the type CV_16SC2, CV_32FC1, or CV_32FC2.</param>
            <param name="map2">The second map of y values having the type CV_16UC1, CV_32FC1, or none (empty map if map1 is (x,y) points), respectively.</param>
            <param name="interpolation">Interpolation method. The method INTER_AREA is not supported by this function.</param>
            <param name="borderMode">Pixel extrapolation method. When borderMode=BORDER_TRANSPARENT, 
            it means that the pixels in the destination image that corresponds to the "outliers" in 
            the source image are not modified by the function.</param>
            <param name="borderValue">Value used in case of a constant border. By default, it is 0.</param>
            <returns>Destination image. It has the same size as map1 and the same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.InvertAffineTransform">
            <summary>
            Inverts an affine transformation.
            </summary>
            <returns>Output reverse affine transformation.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetRectSubPix(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Point2f,System.Int32)">
            <summary>
            Retrieves a pixel rectangle from an image with sub-pixel accuracy.
            </summary>
            <param name="patchSize">Size of the extracted patch.</param>
            <param name="center">Floating point coordinates of the center of the extracted rectangle 
            within the source image. The center must be inside the image.</param>
            <param name="patchType">Depth of the extracted pixels. By default, they have the same depth as src.</param>
            <returns>Extracted patch that has the size patchSize and the same number of channels as src .</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Accumulate(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Adds an image to the accumulator.
            </summary>
            <param name="mask">Optional operation mask.</param>
            <returns>Accumulator image with the same number of channels as input image, 32-bit or 64-bit floating-point.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.AccumulateSquare(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Adds the square of a source image to the accumulator.
            </summary>
            <param name="mask">Optional operation mask.</param>
            <returns>Accumulator image with the same number of channels as input image, 32-bit or 64-bit floating-point.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.CreateHanningWindow(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            Computes a Hanning window coefficients in two dimensions.
            </summary>
            <param name="winSize">The window size specifications</param>
            <param name="type">Created array type</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Threshold(System.Double,System.Double,OpenCvSharp.ThresholdType)">
            <summary>
            Applies a fixed-level threshold to each array element.
            The input matrix must be single-channel, 8-bit or 32-bit floating point.
            </summary>
            <param name="thresh">threshold value.</param>
            <param name="maxval">maximum value to use with the THRESH_BINARY and THRESH_BINARY_INV thresholding types.</param>
            <param name="type">thresholding type (see the details below).</param>
            <returns>output array of the same size and type as src.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.AdaptiveThreshold(System.Double,OpenCvSharp.AdaptiveThresholdType,OpenCvSharp.ThresholdType,System.Int32,System.Double)">
            <summary>
            Applies an adaptive threshold to an array.
            Source matrix must be 8-bit single-channel image.
            </summary>
            <param name="maxValue">Non-zero value assigned to the pixels for which the condition is satisfied. See the details below.</param>
            <param name="adaptiveMethod">Adaptive thresholding algorithm to use, ADAPTIVE_THRESH_MEAN_C or ADAPTIVE_THRESH_GAUSSIAN_C .</param>
            <param name="thresholdType">Thresholding type that must be either THRESH_BINARY or THRESH_BINARY_INV .</param>
            <param name="blockSize">Size of a pixel neighborhood that is used to calculate a threshold value for the pixel: 3, 5, 7, and so on.</param>
            <param name="c">Constant subtracted from the mean or weighted mean (see the details below). 
            Normally, it is positive but may be zero or negative as well.</param>
            <returns>Destination image of the same size and the same type as src.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.PyrDown(System.Nullable{OpenCvSharp.CPlusPlus.Size},OpenCvSharp.BorderType)">
            <summary>
            Blurs an image and downsamples it.
            </summary>
            <param name="dstSize">size of the output image; by default, it is computed as Size((src.cols+1)/2</param>
            <param name="borderType"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.PyrUp(System.Nullable{OpenCvSharp.CPlusPlus.Size},OpenCvSharp.BorderType)">
            <summary>
            Upsamples an image and then blurs it.
            </summary>
            <param name="dstSize">size of the output image; by default, it is computed as Size(src.cols*2, (src.rows*2)</param>
            <param name="borderType"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Undistort(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            corrects lens distortion for the given camera matrix and distortion coefficients
            </summary>
            <param name="cameraMatrix"> Input camera matrix</param>
            <param name="distCoeffs">Input vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, 
            or 8 elements. If the vector is null, the zero distortion coefficients are assumed.</param>
            <param name="newCameraMatrix">Camera matrix of the distorted image. 
            By default, it is the same as cameraMatrix but you may additionally scale 
            and shift the result by using a different matrix.</param>
            <returns>Output (corrected) image that has the same size and type as src .</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetDefaultNewCameraMatrix(System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Boolean)">
            <summary>
            returns the default new camera matrix (by default it is the same as cameraMatrix unless centerPricipalPoint=true)
            </summary>
            <param name="imgSize">Camera view image size in pixels.</param>
            <param name="centerPrincipalPoint">Location of the principal point in the new camera matrix. 
            The parameter indicates whether this location should be at the image center or not.</param>
            <returns>the camera matrix that is either an exact copy of the input cameraMatrix 
            (when centerPrinicipalPoint=false), or the modified one (when centerPrincipalPoint=true).</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.UndistortPoints(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Computes the ideal point coordinates from the observed point coordinates.
            Input matrix is an observed point coordinates, 1xN or Nx1 2-channel (CV_32FC2 or CV_64FC2).
            </summary>
            <param name="cameraMatrix">Camera matrix</param>
            <param name="distCoeffs">Input vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, or 8 elements. 
            If the vector is null, the zero distortion coefficients are assumed.</param>
            <param name="r">Rectification transformation in the object space (3x3 matrix). 
            R1 or R2 computed by stereoRectify() can be passed here. 
            If the matrix is empty, the identity transformation is used.</param>
            <param name="p">New camera matrix (3x3) or new projection matrix (3x4). 
            P1 or P2 computed by stereoRectify() can be passed here. If the matrix is empty, 
            the identity new camera matrix is used.</param>
            <returns>Output ideal point coordinates after undistortion and reverse perspective transformation. 
            If matrix P is identity or omitted, dst will contain normalized point coordinates.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.EqualizeHist">
            <summary>
            Normalizes the grayscale image brightness and contrast by normalizing its histogram.
            The source matrix is 8-bit single channel image.
            </summary>
            <returns>The destination image; will have the same size and the same type as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Watershed(OpenCvSharp.CPlusPlus.InputOutputArray)">
            <summary>
            Performs a marker-based image segmentation using the watershed algorithm.
            Input matrix is 8-bit 3-channel image.
            </summary>
            <param name="markers">Input/output 32-bit single-channel image (map) of markers. 
            It should have the same size as image.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.PyrMeanShiftFiltering(System.Double,System.Double,System.Int32,System.Nullable{OpenCvSharp.CPlusPlus.TermCriteria})">
            <summary>
            Performs initial step of meanshift segmentation of an image.
            The source matrix is 8-bit, 3-channel image.
            </summary>
            <param name="sp">The spatial window radius.</param>
            <param name="sr">The color window radius.</param>
            <param name="maxLevel">Maximum level of the pyramid for the segmentation.</param>
            <param name="termcrit">Termination criteria: when to stop meanshift iterations.</param>
            <returns>The destination image of the same format and the same size as the source.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GrabCut(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.InputOutputArray,System.Int32,OpenCvSharp.CPlusPlus.GrabCutFlag)">
            <summary>
            Segments the image using GrabCut algorithm.
            The input is 8-bit 3-channel image.
            </summary>
            <param name="mask">Input/output 8-bit single-channel mask. 
            The mask is initialized by the function when mode is set to GC_INIT_WITH_RECT. 
            Its elements may have Cv2.GC_BGD / Cv2.GC_FGD / Cv2.GC_PR_BGD / Cv2.GC_PR_FGD</param>
            <param name="rect">ROI containing a segmented object. The pixels outside of the ROI are 
            marked as "obvious background". The parameter is only used when mode==GC_INIT_WITH_RECT.</param>
            <param name="bgdModel">Temporary array for the background model. Do not modify it while you are processing the same image.</param>
            <param name="fgdModel">Temporary arrays for the foreground model. Do not modify it while you are processing the same image.</param>
            <param name="iterCount">Number of iterations the algorithm should make before returning the result. 
            Note that the result can be refined with further calls with mode==GC_INIT_WITH_MASK or mode==GC_EVAL .</param>
            <param name="mode">Operation mode that could be one of GrabCutFlag value.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.FloodFill(OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            Fills a connected component with the given color.
            Input/output 1- or 3-channel, 8-bit, or floating-point image. 
            It is modified by the function unless the FLOODFILL_MASK_ONLY flag is set in the 
            second variant of the function. See the details below.
            </summary>
            <param name="seedPoint">Starting point.</param>
            <param name="newVal">New value of the repainted domain pixels.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.FloodFill(OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.Rect@,System.Nullable{OpenCvSharp.CPlusPlus.Scalar},System.Nullable{OpenCvSharp.CPlusPlus.Scalar},OpenCvSharp.FloodFillFlag)">
            <summary>
            Fills a connected component with the given color.
            Input/output 1- or 3-channel, 8-bit, or floating-point image. 
            It is modified by the function unless the FLOODFILL_MASK_ONLY flag is set in the 
            second variant of the function. See the details below.
            </summary>
            <param name="seedPoint">Starting point.</param>
            <param name="newVal">New value of the repainted domain pixels.</param>
            <param name="rect">Optional output parameter set by the function to the 
            minimum bounding rectangle of the repainted domain.</param>
            <param name="loDiff">Maximal lower brightness/color difference between the currently 
            observed pixel and one of its neighbors belonging to the component, or a seed pixel 
            being added to the component.</param>
            <param name="upDiff">Maximal upper brightness/color difference between the currently 
            observed pixel and one of its neighbors belonging to the component, or a seed pixel 
            being added to the component.</param>
            <param name="flags">Operation flags. Lower bits contain a connectivity value, 
            4 (default) or 8, used within the function. Connectivity determines which 
            neighbors of a pixel are considered. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.FloodFill(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            Fills a connected component with the given color.
            Input/output 1- or 3-channel, 8-bit, or floating-point image. 
            It is modified by the function unless the FLOODFILL_MASK_ONLY flag is set in the 
            second variant of the function. See the details below.
            </summary>
            <param name="mask">(For the second function only) Operation mask that should be a single-channel 8-bit image, 
            2 pixels wider and 2 pixels taller. The function uses and updates the mask, so you take responsibility of 
            initializing the mask content. Flood-filling cannot go across non-zero pixels in the mask. For example, 
            an edge detector output can be used as a mask to stop filling at edges. It is possible to use the same mask 
            in multiple calls to the function to make sure the filled area does not overlap.</param>
            <param name="seedPoint">Starting point.</param>
            <param name="newVal">New value of the repainted domain pixels.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.FloodFill(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.Rect@,System.Nullable{OpenCvSharp.CPlusPlus.Scalar},System.Nullable{OpenCvSharp.CPlusPlus.Scalar},OpenCvSharp.FloodFillFlag)">
            <summary>
            Fills a connected component with the given color.
            Input/output 1- or 3-channel, 8-bit, or floating-point image. 
            It is modified by the function unless the FLOODFILL_MASK_ONLY flag is set in the 
            second variant of the function. See the details below.
            </summary>
            <param name="mask">(For the second function only) Operation mask that should be a single-channel 8-bit image, 
            2 pixels wider and 2 pixels taller. The function uses and updates the mask, so you take responsibility of 
            initializing the mask content. Flood-filling cannot go across non-zero pixels in the mask. For example, 
            an edge detector output can be used as a mask to stop filling at edges. It is possible to use the same mask 
            in multiple calls to the function to make sure the filled area does not overlap.</param>
            <param name="seedPoint">Starting point.</param>
            <param name="newVal">New value of the repainted domain pixels.</param>
            <param name="rect">Optional output parameter set by the function to the 
            minimum bounding rectangle of the repainted domain.</param>
            <param name="loDiff">Maximal lower brightness/color difference between the currently 
            observed pixel and one of its neighbors belonging to the component, or a seed pixel 
            being added to the component.</param>
            <param name="upDiff">Maximal upper brightness/color difference between the currently 
            observed pixel and one of its neighbors belonging to the component, or a seed pixel 
            being added to the component.</param>
            <param name="flags">Operation flags. Lower bits contain a connectivity value, 
            4 (default) or 8, used within the function. Connectivity determines which 
            neighbors of a pixel are considered. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.CvtColor(OpenCvSharp.ColorConversion,System.Int32)">
            <summary>
            Converts image from one color space to another
            </summary>
            <param name="code">The color space conversion code</param>
            <param name="dstCn">The number of channels in the destination image; if the parameter is 0, the number of the channels will be derived automatically from src and the code</param>
            <returns>The destination image; will have the same size and the same depth as src</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Moments(System.Boolean)">
            <summary>
            Calculates all of the moments 
            up to the third order of a polygon or rasterized shape.
            The input is a raster image (single-channel, 8-bit or floating-point 2D array).
            </summary>
            <param name="binaryImage">If it is true, then all the non-zero image pixels are treated as 1’s</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.MatchTemplate(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.MatchTemplateMethod)">
            <summary>
            Computes the proximity map for the raster template and the image where the template is searched for
            The input is Image where the search is running; should be 8-bit or 32-bit floating-point.
            </summary>
            <param name="templ">Searched template; must be not greater than the source image and have the same data type</param>
            <param name="method">Specifies the comparison method</param>
            <returns>A map of comparison results; will be single-channel 32-bit floating-point. 
            If image is WxH and templ is wxh then result will be (W-w+1) x (H-h+1).</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.FindContours(OpenCvSharp.CPlusPlus.Point[][]@,OpenCvSharp.CPlusPlus.HiearchyIndex[]@,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,System.Nullable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            Finds contours in a binary image.
            The source is an 8-bit single-channel image. Non-zero pixels are treated as 1’s. 
            Zero pixels remain 0’s, so the image is treated as binary. The function modifies this image while extracting the contours.
            </summary>
            <param name="contours">Detected contours. Each contour is stored as a vector of points.</param>
            <param name="hierarchy">Optional output vector, containing information about the image topology. 
            It has as many elements as the number of contours. For each i-th contour contours[i], 
            the members of the elements hierarchy[i] are set to 0-based indices in contours of the next 
            and previous contours at the same hierarchical level, the first child contour and the parent contour, respectively. 
            If for the contour i there are no next, previous, parent, or nested contours, the corresponding elements of hierarchy[i] will be negative.</param>
            <param name="mode">Contour retrieval mode</param>
            <param name="method">Contour approximation method</param>
            <param name="offset"> Optional offset by which every contour point is shifted. 
            This is useful if the contours are extracted from the image ROI and then they should be analyzed in the whole image context.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.FindContours(OpenCvSharp.CPlusPlus.Mat[]@,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,System.Nullable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            Finds contours in a binary image.
            The source is an 8-bit single-channel image. Non-zero pixels are treated as 1’s. 
            Zero pixels remain 0’s, so the image is treated as binary. The function modifies this image while extracting the contours.
            </summary>
            <param name="contours">Detected contours. Each contour is stored as a vector of points.</param>
            <param name="hierarchy">Optional output vector, containing information about the image topology. 
            It has as many elements as the number of contours. For each i-th contour contours[i], 
            the members of the elements hierarchy[i] are set to 0-based indices in contours of the next 
            and previous contours at the same hierarchical level, the first child contour and the parent contour, respectively. 
            If for the contour i there are no next, previous, parent, or nested contours, the corresponding elements of hierarchy[i] will be negative.</param>
            <param name="mode">Contour retrieval mode</param>
            <param name="method">Contour approximation method</param>
            <param name="offset"> Optional offset by which every contour point is shifted. 
            This is useful if the contours are extracted from the image ROI and then they should be analyzed in the whole image context.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.FindContoursAsArray(OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,System.Nullable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            Finds contours in a binary image.
            The source is an 8-bit single-channel image. Non-zero pixels are treated as 1’s. 
            Zero pixels remain 0’s, so the image is treated as binary. The function modifies this image while extracting the contours.
            </summary>
            <param name="mode">Contour retrieval mode</param>
            <param name="method">Contour approximation method</param>
            <param name="offset"> Optional offset by which every contour point is shifted. 
            This is useful if the contours are extracted from the image ROI and then they should be analyzed in the whole image context.</param>
            <returns>Detected contours. Each contour is stored as a vector of points.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.FindContoursAsMat(OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,System.Nullable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            Finds contours in a binary image.
            The source is an 8-bit single-channel image. Non-zero pixels are treated as 1’s. 
            Zero pixels remain 0’s, so the image is treated as binary. The function modifies this image while extracting the contours.
            </summary>
            <param name="mode">Contour retrieval mode</param>
            <param name="method">Contour approximation method</param>
            <param name="offset"> Optional offset by which every contour point is shifted. 
            This is useful if the contours are extracted from the image ROI and then they should be analyzed in the whole image context.</param>
            <returns>Detected contours. Each contour is stored as a vector of points.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.DrawContours(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point}},System.Int32,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.HiearchyIndex},System.Int32,System.Nullable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            Draws contours in the image
            </summary>
            <param name="contours">All the input contours. Each contour is stored as a point vector.</param>
            <param name="contourIdx">Parameter indicating a contour to draw. If it is negative, all the contours are drawn.</param>
            <param name="color">Color of the contours.</param>
            <param name="thickness">Thickness of lines the contours are drawn with. If it is negative (for example, thickness=CV_FILLED ), 
            the contour interiors are drawn.</param>
            <param name="lineType">Line connectivity. </param>
            <param name="hierarchy">Optional information about hierarchy. It is only needed if you want to draw only some of the contours</param>
            <param name="maxLevel">Maximal level for drawn contours. If it is 0, only the specified contour is drawn. 
            If it is 1, the function draws the contour(s) and all the nested contours. If it is 2, the function draws the contours, 
            all the nested contours, all the nested-to-nested contours, and so on. This parameter is only taken into account 
            when there is hierarchy available.</param>
            <param name="offset">Optional contour shift parameter. Shift all the drawn contours by the specified offset = (dx, dy)</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.DrawContours(OpenCvSharp.CPlusPlus.InputOutputArray,System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},System.Int32,OpenCvSharp.CPlusPlus.Scalar,System.Int32,OpenCvSharp.LineType,OpenCvSharp.CPlusPlus.Mat,System.Int32,System.Nullable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            Draws contours in the image
            </summary>
            <param name="image">Destination image.</param>
            <param name="contours">All the input contours. Each contour is stored as a point vector.</param>
            <param name="contourIdx">Parameter indicating a contour to draw. If it is negative, all the contours are drawn.</param>
            <param name="color">Color of the contours.</param>
            <param name="thickness">Thickness of lines the contours are drawn with. If it is negative (for example, thickness=CV_FILLED ), 
            the contour interiors are drawn.</param>
            <param name="lineType">Line connectivity. </param>
            <param name="hierarchy">Optional information about hierarchy. It is only needed if you want to draw only some of the contours</param>
            <param name="maxLevel">Maximal level for drawn contours. If it is 0, only the specified contour is drawn. 
            If it is 1, the function draws the contour(s) and all the nested contours. If it is 2, the function draws the contours, 
            all the nested contours, all the nested-to-nested contours, and so on. This parameter is only taken into account 
            when there is hierarchy available.</param>
            <param name="offset">Optional contour shift parameter. Shift all the drawn contours by the specified offset = (dx, dy)</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ApproxPolyDP(System.Double,System.Boolean)">
            <summary>
            Approximates contour or a curve using Douglas-Peucker algorithm.
            The input is the polygon or curve to approximate and 
            it must be 1 x N or N x 1 matrix of type CV_32SC2 or CV_32FC2.
            </summary>
            <param name="epsilon">Specifies the approximation accuracy. 
            This is the maximum distance between the original curve and its approximation.</param>
            <param name="closed">The result of the approximation; 
            The type should match the type of the input curve</param>
            <returns>The result of the approximation; 
            The type should match the type of the input curve</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ArcLength(System.Boolean)">
            <summary>
            Calculates a contour perimeter or a curve length.
            The input is 2D point set, represented by CV_32SC2 or CV_32FC2 matrix.
            </summary>
            <param name="closed">Indicates, whether the curve is closed or not</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.BoundingRect">
            <summary>
            Calculates the up-right bounding rectangle of a point set.
            The input is 2D point set, represented by CV_32SC2 or CV_32FC2 matrix.
            </summary>
            <returns>Minimal up-right bounding rectangle for the specified point set.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ContourArea(System.Boolean)">
            <summary>
            Calculates the contour area.
            The input is 2D point set, represented by CV_32SC2 or CV_32FC2 matrix.
            </summary>
            <param name="oriented"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.MinAreaRect">
            <summary>
            Finds the minimum area rotated rectangle enclosing a 2D point set.
            The input is 2D point set, represented by CV_32SC2 or CV_32FC2 matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.MinEnclosingCircle(OpenCvSharp.CPlusPlus.Point2f@,System.Single@)">
            <summary>
            Finds the minimum area circle enclosing a 2D point set.
            The input is 2D point set, represented by CV_32SC2 or CV_32FC2 matrix.
            </summary>
            <param name="center">The output center of the circle</param>
            <param name="radius">The output radius of the circle</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ConvexHull(OpenCvSharp.CPlusPlus.InputArray,System.Boolean,System.Boolean)">
            <summary>
            Computes convex hull for a set of 2D points.
            </summary>
            <param name="points">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix</param>
            <param name="clockwise">If true, the output convex hull will be oriented clockwise, 
            otherwise it will be oriented counter-clockwise. Here, the usual screen coordinate 
            system is assumed - the origin is at the top-left corner, x axis is oriented to the right, 
            and y axis is oriented downwards.</param>
            <param name="returnPoints"></param>
            <returns>The output convex hull. It is either a vector of points that form the 
            hull (must have the same type as the input points), or a vector of 0-based point 
            indices of the hull points in the original array (since the set of convex hull 
            points is a subset of the original point set).</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ConvexHullPoints(OpenCvSharp.CPlusPlus.InputArray,System.Boolean)">
            <summary>
            Computes convex hull for a set of 2D points.
            </summary>
            <param name="points">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix</param>
            <param name="clockwise">If true, the output convex hull will be oriented clockwise, 
            otherwise it will be oriented counter-clockwise. Here, the usual screen coordinate 
            system is assumed - the origin is at the top-left corner, x axis is oriented to the right, 
            and y axis is oriented downwards.</param>
            <returns>The output convex hull. It is a vector of points that form the 
            hull (must have the same type as the input points).</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ConvexHullFloatPoints(OpenCvSharp.CPlusPlus.InputArray,System.Boolean)">
            <summary>
            Computes convex hull for a set of 2D points.
            </summary>
            <param name="points">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix</param>
            <param name="clockwise">If true, the output convex hull will be oriented clockwise, 
            otherwise it will be oriented counter-clockwise. Here, the usual screen coordinate 
            system is assumed - the origin is at the top-left corner, x axis is oriented to the right, 
            and y axis is oriented downwards.</param>
            <returns>The output convex hull. It is a vector of points that form the 
            hull (must have the same type as the input points).</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ConvexHullIndices(OpenCvSharp.CPlusPlus.InputArray,System.Boolean)">
            <summary>
            Computes convex hull for a set of 2D points.
            </summary>
            <param name="points">The input 2D point set, represented by CV_32SC2 or CV_32FC2 matrix</param>
            <param name="clockwise">If true, the output convex hull will be oriented clockwise, 
            otherwise it will be oriented counter-clockwise. Here, the usual screen coordinate 
            system is assumed - the origin is at the top-left corner, x axis is oriented to the right, 
            and y axis is oriented downwards.</param>
            <returns>The output convex hull. It is a vector of 0-based point 
            indices of the hull points in the original array (since the set of convex hull 
            points is a subset of the original point set).</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ConvexityDefects(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Computes the contour convexity defects
            </summary>
            <param name="convexHull">Convex hull obtained using convexHull() that 
            should contain indices of the contour points that make the hull.</param>
            <returns>The output vector of convexity defects. 
            Each convexity defect is represented as 4-element integer vector 
            (a.k.a. cv::Vec4i): (start_index, end_index, farthest_pt_index, fixpt_depth), 
            where indices are 0-based indices in the original contour of the convexity defect beginning, 
            end and the farthest point, and fixpt_depth is fixed-point approximation 
            (with 8 fractional bits) of the distance between the farthest contour point and the hull. 
            That is, to get the floating-point value of the depth will be fixpt_depth/256.0. </returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ConvexityDefectsAsVec(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Computes the contour convexity defects
            </summary>
            <param name="convexHull">Convex hull obtained using convexHull() that 
            should contain indices of the contour points that make the hull.</param>
            <returns>The output vector of convexity defects. 
            Each convexity defect is represented as 4-element integer vector 
            (a.k.a. cv::Vec4i): (start_index, end_index, farthest_pt_index, fixpt_depth), 
            where indices are 0-based indices in the original contour of the convexity defect beginning, 
            end and the farthest point, and fixpt_depth is fixed-point approximation 
            (with 8 fractional bits) of the distance between the farthest contour point and the hull. 
            That is, to get the floating-point value of the depth will be fixpt_depth/256.0. </returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.IsContourConvex">
            <summary>
            Returns true if the contour is convex. 
            Does not support contours with self-intersection
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.FitEllipse">
            <summary>
            Fits ellipse to the set of 2D points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.FitLine2D(OpenCvSharp.DistanceType,System.Double,System.Double,System.Double)">
            <summary>
            Fits line to the set of 2D points using M-estimator algorithm.
            The input is vector of 2D points.
            </summary>
            <param name="distType">Distance used by the M-estimator</param>
            <param name="param">Numerical parameter ( C ) for some types of distances. 
            If it is 0, an optimal value is chosen.</param>
            <param name="reps">Sufficient accuracy for the radius 
            (distance between the coordinate origin and the line).</param>
            <param name="aeps">Sufficient accuracy for the angle. 
            0.01 would be a good default value for reps and aeps.</param>
            <returns>Output line parameters.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.FitLine3D(OpenCvSharp.DistanceType,System.Double,System.Double,System.Double)">
            <summary>
            Fits line to the set of 3D points using M-estimator algorithm.
            The input is vector of 3D points.
            </summary>
            <param name="distType">Distance used by the M-estimator</param>
            <param name="param">Numerical parameter ( C ) for some types of distances. 
            If it is 0, an optimal value is chosen.</param>
            <param name="reps">Sufficient accuracy for the radius 
            (distance between the coordinate origin and the line).</param>
            <param name="aeps">Sufficient accuracy for the angle. 
            0.01 would be a good default value for reps and aeps.</param>
            <returns>Output line parameters.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.PointPolygonTest(OpenCvSharp.CPlusPlus.Point2f,System.Boolean)">
            <summary>
            Checks if the point is inside the contour. 
            Optionally computes the signed distance from the point to the contour boundary.
            </summary>
            <param name="pt">Point tested against the contour.</param>
            <param name="measureDist">If true, the function estimates the signed distance 
            from the point to the nearest contour edge. Otherwise, the function only checks 
            if the point is inside a contour or not.</param>
            <returns>Positive (inside), negative (outside), or zero (on an edge) value.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor(System.String,OpenCvSharp.LoadMode)">
            <summary>
            Loads an image from a file. (cv::imread)
            </summary>
            <param name="fileName">Name of file to be loaded.</param>
            <param name="flags">Specifies color type of the loaded image</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType.CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or CV_8UC(n), ..., CV_64FC(n) to create multi-channel (up to CV_CN_MAX channels) matrices.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType,System.Array,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.MatType,System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.MatType,System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Release">
            <summary>
            Releases the resources
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.FromStream(System.IO.Stream,OpenCvSharp.LoadMode)">
            <summary>
            Creates the Mat instance from System.IO.Stream
            </summary>
            <param name="stream"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ImDecode(System.Byte[],OpenCvSharp.LoadMode)">
            <summary>
            Creates the Mat instance from image data (using cv::imdecode) 
            </summary>
            <param name="imageBytes"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.FromImageData(System.Byte[],OpenCvSharp.LoadMode)">
            <summary>
            Creates the Mat instance from image data (using cv::imdecode) 
            </summary>
            <param name="imageBytes"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Mat.SizeOf">
            <summary>
            sizeof(cv::Mat)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Diag(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Extracts a diagonal from a matrix, or creates a diagonal matrix.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Eye(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            Returns an identity matrix of the specified size and type.
            </summary>
            <param name="size">Alternative to the matrix size specification Size(cols, rows) .</param>
            <param name="type">Created matrix type.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Eye(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            Returns an identity matrix of the specified size and type.
            </summary>
            <param name="rows">Number of rows.</param>
            <param name="cols">Number of columns.</param>
            <param name="type">Created matrix type.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Ones(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            Returns an array of all 1’s of the specified size and type.
            </summary>
            <param name="rows">Number of rows.</param>
            <param name="cols">Number of columns.</param>
            <param name="type">Created matrix type.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Ones(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            Returns an array of all 1’s of the specified size and type.
            </summary>
            <param name="size">Alternative to the matrix size specification Size(cols, rows) .</param>
            <param name="type">Created matrix type.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Ones(OpenCvSharp.CPlusPlus.MatType,System.Int32[])">
            <summary>
            Returns an array of all 1’s of the specified size and type.
            </summary>
            <param name="type">Created matrix type.</param>
            <param name="sizes">Array of integers specifying the array shape.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Zeros(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            Returns a zero array of the specified size and type.
            </summary>
            <param name="rows">Number of rows.</param>
            <param name="cols">Number of columns.</param>
            <param name="type">Created matrix type.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Zeros(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            Returns a zero array of the specified size and type.
            </summary>
            <param name="size">Alternative to the matrix size specification Size(cols, rows) .</param>
            <param name="type">Created matrix type.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Zeros(OpenCvSharp.CPlusPlus.MatType,System.Int32[])">
            <summary>
            Returns a zero array of the specified size and type.
            </summary>
            <param name="type">Created matrix type.</param>
            <param name="sizes"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_Explicit(OpenCvSharp.CPlusPlus.Mat)~OpenCvSharp.IplImage">
            <summary>
            Creates the IplImage clone instance for the matrix.
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ToIplImage(System.Boolean)">
            <summary>
            Creates the IplImage clone instance or header for the matrix.
            </summary>
            <param name="adjustAlignment">If true, this method returns an IplImage that is adjusted alignment;
            otherwise, a header of IplImage is returned.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_Explicit(OpenCvSharp.CPlusPlus.Mat)~OpenCvSharp.CvMat">
            <summary>
            Creates the CvMat clone instance for the matrix.
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ToCvMat">
            <summary>
            Creates the CvMat header or clone instance for the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_UnaryNegation(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_UnaryPlus(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_Addition(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_Addition(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_Addition(OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_Subtraction(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_Subtraction(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_Subtraction(OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_Multiply(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_Multiply(OpenCvSharp.CPlusPlus.Mat,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_Multiply(System.Double,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_Division(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_Division(OpenCvSharp.CPlusPlus.Mat,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_Division(System.Double,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_BitwiseAnd(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_BitwiseAnd(OpenCvSharp.CPlusPlus.Mat,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_BitwiseAnd(System.Double,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_BitwiseOr(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_BitwiseOr(OpenCvSharp.CPlusPlus.Mat,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_BitwiseOr(System.Double,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_ExclusiveOr(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_ExclusiveOr(OpenCvSharp.CPlusPlus.Mat,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_ExclusiveOr(System.Double,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.op_OnesComplement(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.LessThan(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            operator &lt;
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.LessThan(System.Double)">
            <summary>
            operator &lt;
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.LessThanOrEqual(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            operator &lt;=
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.LessThanOrEqual(System.Double)">
            <summary>
            operator &lt;=
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Equals(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            operator ==
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Equals(System.Double)">
            <summary>
            operator ==
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.NotEquals(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            operator !=
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.NotEquals(System.Double)">
            <summary>
            operator !=
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GreaterThan(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            operator &gt;
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GreaterThan(System.Double)">
            <summary>
            operator &gt;
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GreaterThanOrEqual(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            operator &gt;=
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GreaterThanOrEqual(System.Double)">
            <summary>
            operator &gt;=
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.AdjustROI(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adjusts a submatrix size and position within the parent matrix.
            </summary>
            <param name="dtop">Shift of the top submatrix boundary upwards.</param>
            <param name="dbottom">Shift of the bottom submatrix boundary downwards.</param>
            <param name="dleft">Shift of the left submatrix boundary to the left.</param>
            <param name="dright">Shift of the right submatrix boundary to the right.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.AssignTo(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            Provides a functional form of convertTo.
            </summary>
            <param name="m">Destination array.</param>
            <param name="type">Desired destination array depth (or -1 if it should be the same as the source type).</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.AssignTo(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Provides a functional form of convertTo.
            </summary>
            <param name="m">Destination array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Channels">
            <summary>
            Returns the number of matrix channels.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.CheckVector(System.Int32)">
            <summary>
            
            </summary>
            <param name="elemChannels"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.CheckVector(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="elemChannels"></param>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.CheckVector(System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="elemChannels"></param>
            <param name="depth"></param>
            <param name="requireContinuous"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Clone">
            <summary>
            Creates a full copy of the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Clone(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Returns the partial Mat of the specified Mat
            </summary>
            <param name="roi"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Dims">
            <summary>
            the array dimensionality, >= 2
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ConvertTo(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.MatType,System.Double,System.Double)">
            <summary>
            Converts an array to another data type with optional scaling.
            </summary>
            <param name="m">output matrix; if it does not have a proper size or type before the operation, it is reallocated.</param>
            <param name="rtype">desired output matrix type or, rather, the depth since the number of channels are the same as the input has; 
            if rtype is negative, the output matrix will have the same type as the input.</param>
            <param name="alpha">optional scale factor.</param>
            <param name="beta">optional delta added to the scaled values.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.CopyTo(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Copies the matrix to another one.
            </summary>
            <param name="m">Destination matrix. If it does not have a proper size or type before the operation, it is reallocated.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.CopyTo(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Copies the matrix to another one.
            </summary>
            <param name="m">Destination matrix. If it does not have a proper size or type before the operation, it is reallocated.</param>
            <param name="mask">Operation mask. Its non-zero elements indicate which matrix elements need to be copied.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Create(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            Allocates new array data if needed.
            </summary>
            <param name="rows">New number of rows.</param>
            <param name="cols">New number of columns.</param>
            <param name="type">New matrix type.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Create(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            Allocates new array data if needed.
            </summary>
            <param name="size">Alternative new matrix size specification: Size(cols, rows)</param>
            <param name="type">New matrix type.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Create(OpenCvSharp.CPlusPlus.MatType,System.Int32[])">
            <summary>
            Allocates new array data if needed.
            </summary>
            <param name="sizes">Array of integers specifying a new array shape.</param>
            <param name="type">New matrix type.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Cross(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Computes a cross-product of two 3-element vectors.
            </summary>
            <param name="m">Another cross-product operand.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Depth">
            <summary>
            Returns the depth of a matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Diag(OpenCvSharp.CPlusPlus.MatDiagType)">
            <summary>
            Single-column matrix that forms a diagonal matrix or index of the diagonal, with the following values:
            </summary>
            <param name="d">Single-column matrix that forms a diagonal matrix or index of the diagonal, with the following values:</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Dot(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Computes a dot-product of two vectors.
            </summary>
            <param name="m">another dot-product operand.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ElemSize">
            <summary>
            Returns the matrix element size in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ElemSize1">
            <summary>
            Returns the size of each matrix element channel in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Empty">
            <summary>
            Returns true if the array has no elements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Inv(OpenCvSharp.CPlusPlus.MatrixDecomposition)">
            <summary>
            Inverses a matrix.
            </summary>
            <param name="method">Matrix inversion method</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.IsContinuous">
            <summary>
            Reports whether the matrix is continuous or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.IsSubmatrix">
            <summary>
            Returns whether this matrix is a part of other matrix or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.LocateROI(OpenCvSharp.CPlusPlus.Size@,OpenCvSharp.CPlusPlus.Point@)">
            <summary>
            Locates the matrix header within a parent matrix.
            </summary>
            <param name="wholeSize">Output parameter that contains the size of the whole matrix containing *this as a part.</param>
            <param name="ofs">Output parameter that contains an offset of *this inside the whole matrix.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Mul(OpenCvSharp.CPlusPlus.Mat,System.Double)">
            <summary>
            Performs an element-wise multiplication or division of the two matrices.
            </summary>
            <param name="m"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Reshape(System.Int32,System.Int32)">
            <summary>
            Changes the shape and/or the number of channels of a 2D matrix without copying the data.
            </summary>
            <param name="cn">New number of channels. If the parameter is 0, the number of channels remains the same.</param>
            <param name="rows">New number of rows. If the parameter is 0, the number of rows remains the same.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Reshape(System.Int32,System.Int32[])">
            <summary>
            Changes the shape and/or the number of channels of a 2D matrix without copying the data.
            </summary>
            <param name="cn">New number of channels. If the parameter is 0, the number of channels remains the same.</param>
            <param name="newDims">New number of rows. If the parameter is 0, the number of rows remains the same.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetTo(OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Sets all or some of the array elements to the specified value.
            </summary>
            <param name="value"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetTo(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Sets all or some of the array elements to the specified value.
            </summary>
            <param name="value"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Size">
            <summary>
            Returns a matrix size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Size(System.Int32)">
            <summary>
            Returns a matrix size.
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Step">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Step(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Step1">
            <summary>
            Returns a normalized step.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Step1(System.Int32)">
            <summary>
            Returns a normalized step.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.T">
            <summary>
            Transposes a matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Total">
            <summary>
            Returns the total number of array elements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Type">
            <summary>
            Returns the type of a matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ToString">
            <summary>
            Returns a string that represents this Mat.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Dump(OpenCvSharp.CPlusPlus.DumpFormat)">
            <summary>
            Returns a string that represents each element value of Mat.
            This method corresponds to std::ostream &lt;&lt; Mat
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.EmptyClone">
            <summary>
            Makes a Mat that have the same size, depth and channels as this image
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Ptr(System.Int32)">
            <summary>
            Returns a pointer to the specified matrix row.
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Ptr(System.Int32,System.Int32)">
            <summary>
            Returns a pointer to the specified matrix element.
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Ptr(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a pointer to the specified matrix element.
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2">Index along the dimension 2</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Ptr(System.Int32[])">
            <summary>
            Returns a pointer to the specified matrix element.
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetGenericIndexer``1">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Get``1(System.Int32)">
            <summary>
            Returns a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Get``1(System.Int32,System.Int32)">
            <summary>
            Returns a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Get``1(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2">Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Get``1(System.Int32[])">
            <summary>
            Returns a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.At``1(System.Int32)">
            <summary>
            Returns a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.At``1(System.Int32,System.Int32)">
            <summary>
            Returns a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.At``1(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2">Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.At``1(System.Int32[])">
            <summary>
            Returns a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Set``1(System.Int32,``0)">
            <summary>
            Set a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Set``1(System.Int32,System.Int32,``0)">
            <summary>
            Set a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Set``1(System.Int32,System.Int32,System.Int32,``0)">
            <summary>
            Set a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2">Index along the dimension 2</param>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Set``1(System.Int32[],``0)">
            <summary>
            Set a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="idx">Array of Mat::dims indices.</param>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ColRange(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="startCol"></param>
            <param name="endCol"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ColRange(OpenCvSharp.CPlusPlus.Range)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.RowRange(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="startRow"></param>
            <param name="endRow"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.RowRange(OpenCvSharp.CPlusPlus.Range)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SubMat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="rowStart"></param>
            <param name="rowEnd"></param>
            <param name="colStart"></param>
            <param name="colEnd"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SubMat(OpenCvSharp.CPlusPlus.Range,OpenCvSharp.CPlusPlus.Range)">
            <summary>
            
            </summary>
            <param name="rowRange"></param>
            <param name="colRange"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SubMat(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            
            </summary>
            <param name="roi"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SubMat(OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            
            </summary>
            <param name="ranges"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,System.Byte[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,System.Int16[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,System.Int16[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,System.UInt16[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,System.UInt16[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,System.Int32[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,System.Single[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,System.Single[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,System.Double[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,System.Double[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32)">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec3b[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec3b[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec3d[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec3d[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec4f[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec4f[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec6f[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec6f[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec4i[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec4i[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point2f[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point2f[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point2d[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point2d[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3i[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3i[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3f[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3f[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3d[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3d[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Rect[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Rect[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.DMatch[])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.GetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.DMatch[0:,0:])">
            <summary>
            Get the data of this matrix as array
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,System.Byte[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,System.Int16[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,System.Int16[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,System.UInt16[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,System.UInt16[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,System.Int32[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,System.Single[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,System.Single[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,System.Double[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,System.Double[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec3b[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec3b[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec3d[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec3d[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec4f[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec4f[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec6f[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec6f[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec4i[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec4i[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point2f[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point2f[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point2d[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point2d[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3i[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3i[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3f[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3f[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3d[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3d[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Rect[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Rect[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.DMatch[])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.SetArray(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.DMatch[0:,0:])">
            <summary>
            Set the specified array data to this matrix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Reserve(System.Int64)">
            <summary>
            reserves enough space to fit sz hyper-planes
            </summary>
            <param name="sz"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Resize(System.Int64)">
            <summary>
            resizes matrix to the specified number of hyper-planes
            </summary>
            <param name="sz"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Resize(System.Int64,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            resizes matrix to the specified number of hyper-planes; initializes the newly added elements
            </summary>
            <param name="sz"></param>
            <param name="s"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Add(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat.push_back)
            </summary>
            <param name="m">Added line(s)</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.PushBack(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat.push_back)
            </summary>
            <param name="m">Added line(s)</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.PopBack(System.Int64)">
            <summary>
            removes several hyper-planes from bottom of the matrix (Mat.pop_back)
            </summary>
            <param name="nElems"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ToBytes(System.String,System.Int32[])">
            <summary>
            Encodes an image into a memory buffer.
            </summary>
            <param name="ext">Encodes an image into a memory buffer.</param>
            <param name="prms">Format-specific parameters.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ToBytes(System.String,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            Encodes an image into a memory buffer.
            </summary>
            <param name="ext">Encodes an image into a memory buffer.</param>
            <param name="prms">Format-specific parameters.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ToMemoryStream(System.String,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            Converts Mat to System.IO.MemoryStream
            </summary>
            <param name="ext"></param>
            <param name="prms"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.WriteToStream(System.IO.Stream,System.String,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            Writes image data encoded from this Mat to System.IO.Stream
            </summary>
            <param name="stream"></param>
            <param name="ext"></param>
            <param name="prms"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Alignment(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.Cast``1">
            <summary>
            Creates type-specific Mat instance from this.
            </summary>
            <typeparam name="TMat"></typeparam>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="rowStart">Start row of the extracted submatrix. The upper boundary is not included.</param>
            <param name="rowEnd">End row of the extracted submatrix. The upper boundary is not included.</param>
            <param name="colStart">Start column of the extracted submatrix. The upper boundary is not included.</param>
            <param name="colEnd">End column of the extracted submatrix. The upper boundary is not included.</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.Item(OpenCvSharp.CPlusPlus.Range,OpenCvSharp.CPlusPlus.Range)">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="rowRange">Start and end row of the extracted submatrix. The upper boundary is not included. 
            To select all the rows, use Range.All().</param>
            <param name="colRange">Start and end column of the extracted submatrix. 
            The upper boundary is not included. To select all the columns, use Range.All().</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.Item(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="roi">Extracted submatrix specified as a rectangle.</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.Item(OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="ranges">Array of selected ranges along each array dimension.</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.Expr">
            <summary>
            Indexer to access partial Mat as MatExpr
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.ColExpr">
            <summary>
            Indexer to access Mat column as MatExpr
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.RowExpr">
            <summary>
            Indexer to access Mat row as MatExpr
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.Cols">
            <summary>
            the number of columns or -1 when the array has more than 2 dimensions
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.Width">
            <summary>
            the number of columns or -1 when the array has more than 2 dimensions
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.Data">
            <summary>
            pointer to the data
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.DataPointer">
            <summary>
            unsafe pointer to the data
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.DataStart">
            <summary>
            The pointer that is possible to compute a relative sub-array position in the main container array using locateROI()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.DataEnd">
            <summary>
            The pointer that is possible to compute a relative sub-array position in the main container array using locateROI()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.DataLimit">
            <summary>
            The pointer that is possible to compute a relative sub-array position in the main container array using locateROI()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.Refcount">
            <summary>
            pointer to the reference counter;
            when matrix points to user-allocated data, the pointer is NULL
            </summary>
            <returns>pointer to the reference counter</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.Rows">
            <summary>
            the number of rows or -1 when the array has more than 2 dimensions
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.Height">
            <summary>
            the number of rows or -1 when the array has more than 2 dimensions
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.Col">
            <summary>
            Indexer to access Mat column as Mat
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.Row">
            <summary>
            Indexer to access Mat row as Mat
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Mat.MatExprIndexer">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatExprRangeIndexer">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatExprRangeIndexer.parent">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExprRangeIndexer.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExprRangeIndexer.Get(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix header for the specified matrix row/column.
            </summary>
            <param name="rowStart"></param>
            <param name="rowEnd"></param>
            <param name="colStart"></param>
            <param name="colEnd"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExprRangeIndexer.Get(OpenCvSharp.CPlusPlus.Range,OpenCvSharp.CPlusPlus.Range)">
            <summary>
            Creates a matrix header for the specified row/column span.
            </summary>
            <param name="rowRange"></param>
            <param name="colRange"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExprRangeIndexer.Get(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Creates a matrix header for the specified row/column span.
            </summary>
            <param name="roi"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExprRangeIndexer.Set(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            Sets a matrix header for the specified matrix row/column.
            </summary>
            <param name="rowStart"></param>
            <param name="rowEnd"></param>
            <param name="colEnd"></param>
            <param name="colStart"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExprRangeIndexer.Set(OpenCvSharp.CPlusPlus.Range,OpenCvSharp.CPlusPlus.Range,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            Sets a matrix header for the specified matrix row/column span.
            </summary>
            <param name="rowRange"></param>
            <param name="colRange"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatExprRangeIndexer.Set(OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            Sets a matrix header for the specified matrix row/column span.
            </summary>
            <param name="roi"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatExprRangeIndexer.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix header for the specified matrix row/column.
            </summary>
            <param name="rowStart"></param>
            <param name="rowEnd"></param>
            <param name="colStart"></param>
            <param name="colEnd"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatExprRangeIndexer.Item(OpenCvSharp.CPlusPlus.Range,OpenCvSharp.CPlusPlus.Range)">
            <summary>
            Creates a matrix header for the specified row/column span.
            </summary>
            <param name="rowRange"></param>
            <param name="colRange"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatExprRangeIndexer.Item(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Creates a matrix header for the specified row/column span.
            </summary>
            <param name="roi"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatExprRangeIndexer.Item(OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="ranges">Array of selected ranges along each array dimension.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.MatExprIndexer.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.MatExprIndexer.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="rowStart">Start row of the extracted submatrix. The upper boundary is not included.</param>
            <param name="rowEnd">End row of the extracted submatrix. The upper boundary is not included.</param>
            <param name="colStart">Start column of the extracted submatrix. The upper boundary is not included.</param>
            <param name="colEnd">End column of the extracted submatrix. The upper boundary is not included.</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.MatExprIndexer.Item(OpenCvSharp.CPlusPlus.Range,OpenCvSharp.CPlusPlus.Range)">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="rowRange">Start and end row of the extracted submatrix. The upper boundary is not included. 
            To select all the rows, use Range.All().</param>
            <param name="colRange">Start and end column of the extracted submatrix. 
            The upper boundary is not included. To select all the columns, use Range.All().</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.MatExprIndexer.Item(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="roi">Extracted submatrix specified as a rectangle.</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.MatExprIndexer.Item(OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="ranges">Array of selected ranges along each array dimension.</param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Mat.ColExprIndexer">
            <summary>
            Mat column's indexer object
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatRowColExprIndexer">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatRowColExprIndexer.parent">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatRowColExprIndexer.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatRowColExprIndexer.Get(System.Int32)">
            <summary>
            Creates a matrix header for the specified matrix row/column.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatRowColExprIndexer.Get(System.Int32,System.Int32)">
            <summary>
            Creates a matrix header for the specified row/column span.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatRowColExprIndexer.Get(OpenCvSharp.CPlusPlus.Range)">
            <summary>
            Creates a matrix header for the specified row/column span.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatRowColExprIndexer.Set(System.Int32,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            Sets a matrix header for the specified matrix row/column.
            </summary>
            <param name="pos"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatRowColExprIndexer.Set(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            Sets a matrix header for the specified matrix row/column span.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatRowColExprIndexer.Set(OpenCvSharp.CPlusPlus.Range,OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            Sets a matrix header for the specified matrix row/column span.
            </summary>
            <param name="range"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatRowColExprIndexer.Item(System.Int32)">
            <summary>
            Creates a matrix header for the specified matrix row/column.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatRowColExprIndexer.Item(System.Int32,System.Int32)">
            <summary>
            Creates a matrix header for the specified row/column span.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatRowColExprIndexer.Item(OpenCvSharp.CPlusPlus.Range)">
            <summary>
            Creates a matrix header for the specified row/column span.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ColExprIndexer.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.ColExprIndexer.Item(System.Int32)">
            <summary>
            Creates a matrix header for the specified matrix column.
            </summary>
            <param name="x">A 0-based column index.</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.ColExprIndexer.Item(System.Int32,System.Int32)">
            <summary>
            Creates a matrix header for the specified column span.
            </summary>
            <param name="startCol">An inclusive 0-based start index of the column span.</param>
            <param name="endCol">An exclusive 0-based ending index of the column span.</param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Mat.RowExprIndexer">
            <summary>
            Mat row's indexer object
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.RowExprIndexer.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.RowExprIndexer.Item(System.Int32)">
            <summary>
            Creates a matrix header for the specified matrix row. [Mat::row]
            </summary>
            <param name="y">A 0-based row index.</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.RowExprIndexer.Item(System.Int32,System.Int32)">
            <summary>
            Creates a matrix header for the specified row span. (Mat::rowRange)
            </summary>
            <param name="startRow">An inclusive 0-based start index of the row span.</param>
            <param name="endRow">An exclusive 0-based ending index of the row span.</param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Mat.Indexer`1">
            <summary>
            Mat Indexer
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatIndexer`1">
            <summary>
            Abstract definition of Mat indexer
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatIndexer`1.parent">
            <summary>
            Parent matrix object
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatIndexer`1.steps">
            <summary>
            Step byte length for each dimension
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatIndexer`1.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Constructor
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatIndexer`1.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatIndexer`1.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatIndexer`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatIndexer`1.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.Indexer`1.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.Indexer`1.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.Indexer`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.Indexer`1.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Mat.ColIndexer">
            <summary>
            Mat column's indexer object
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatRowColIndexer">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatRowColIndexer.parent">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatRowColIndexer.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatRowColIndexer.Get(System.Int32)">
            <summary>
            Creates a matrix header for the specified matrix row/column.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatRowColIndexer.Get(System.Int32,System.Int32)">
            <summary>
            Creates a matrix header for the specified row/column span.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatRowColIndexer.Get(OpenCvSharp.CPlusPlus.Range)">
            <summary>
            Creates a matrix header for the specified row/column span.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatRowColIndexer.Set(System.Int32,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Creates/Sets a matrix header for the specified matrix row/column.
            </summary>
            <param name="pos"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatRowColIndexer.Set(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Creates/Sets a matrix header for the specified row/column span.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatRowColIndexer.Set(OpenCvSharp.CPlusPlus.Range,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Creates/Sets a matrix header for the specified row/column span.
            </summary>
            <param name="range"></param>
            <param name="value"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatRowColIndexer.Item(System.Int32)">
            <summary>
            Creates/Sets a matrix header for the specified matrix row/column.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatRowColIndexer.Item(System.Int32,System.Int32)">
            <summary>
            Creates/Sets a matrix header for the specified row/column span.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatRowColIndexer.Item(OpenCvSharp.CPlusPlus.Range)">
            <summary>
            Creates/Sets a matrix header for the specified row/column span.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.ColIndexer.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.ColIndexer.Item(System.Int32)">
            <summary>
            Creates a matrix header for the specified matrix column.
            </summary>
            <param name="x">A 0-based column index.</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.ColIndexer.Item(System.Int32,System.Int32)">
            <summary>
            Creates a matrix header for the specified column span.
            </summary>
            <param name="startCol">An inclusive 0-based start index of the column span.</param>
            <param name="endCol">An exclusive 0-based ending index of the column span.</param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Mat.RowIndexer">
            <summary>
            Mat row's indexer object
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat.RowIndexer.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.RowIndexer.Item(System.Int32)">
            <summary>
            Creates a matrix header for the specified matrix column.
            </summary>
            <param name="x">A 0-based column index.</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat.RowIndexer.Item(System.Int32,System.Int32)">
            <summary>
            Creates a matrix header for the specified column span.
            </summary>
            <param name="startCol">An inclusive 0-based start index of the column span.</param>
            <param name="endCol">An exclusive 0-based ending index of the column span.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType.CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or CV_8UC(n), ..., CV_64FC(n) to create multi-channel (up to CV_CN_MAX channels) matrices.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor(OpenCvSharp.CPlusPlus.Mat{`0,`1},OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor(OpenCvSharp.CPlusPlus.Mat{`0,`1},OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor(OpenCvSharp.CPlusPlus.Mat{`0,`1},OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType,System.Array,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.MatType,System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.MatType,System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.GetIndexer">
            <summary>
            Gets type-specific indexer for accessing each element
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.GetEnumerator">
            <summary>
            Gets read-only enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            For non-generic IEnumerable
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.Wrap(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.Clone">
            <summary>
            Creates a full copy of the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.Reshape(System.Int32)">
            <summary>
            Changes the shape of channels of a 2D matrix without copying the data.
            </summary>
            <param name="rows">New number of rows. If the parameter is 0, the number of rows remains the same.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.Reshape(System.Int32[])">
            <summary>
            Changes the shape of a 2D matrix without copying the data.
            </summary>
            <param name="newDims">New number of rows. If the parameter is 0, the number of rows remains the same.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.T">
            <summary>
            Transposes a matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.SubMat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="rowStart">Start row of the extracted submatrix. The upper boundary is not included.</param>
            <param name="rowEnd">End row of the extracted submatrix. The upper boundary is not included.</param>
            <param name="colStart">Start column of the extracted submatrix. The upper boundary is not included.</param>
            <param name="colEnd">End column of the extracted submatrix. The upper boundary is not included.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.SubMat(OpenCvSharp.CPlusPlus.Range,OpenCvSharp.CPlusPlus.Range)">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="rowRange">Start and end row of the extracted submatrix. The upper boundary is not included. 
            To select all the rows, use Range.All().</param>
            <param name="colRange">Start and end column of the extracted submatrix. 
            The upper boundary is not included. To select all the columns, use Range.All().</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.SubMat(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="roi">Extracted submatrix specified as a rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.SubMat(OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="ranges">Array of selected ranges along each array dimension.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.Add(`0)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the ICollection&lt;T&gt;.
            </summary>
            <param name="item">The object to remove from the ICollection&lt;T&gt;.</param>
            <returns> true if item was successfully removed from the ICollection&lt;T&gt; otherwise, false. 
            This method also returns false if item is not found in the original ICollection&lt;T&gt;. </returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.Contains(`0)">
            <summary>
            Determines whether the ICollection&lt;T&gt; contains a specific value.
            </summary>
            <param name="item">The object to locate in the ICollection&lt;T&gt;.</param>
            <returns> true if item is found in the ICollection&lt;T&gt; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the list.
            </summary>
            <param name="item">The object to locate in the list. </param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.Clear">
            <summary>
            Removes all items from the ICollection&lt;T&gt;.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Mat`2.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the ICollection&lt;T&gt; to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection&lt;T&gt;. 
            The Array must have zero-based indexing. </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat`2.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="rowStart">Start row of the extracted submatrix. The upper boundary is not included.</param>
            <param name="rowEnd">End row of the extracted submatrix. The upper boundary is not included.</param>
            <param name="colStart">Start column of the extracted submatrix. The upper boundary is not included.</param>
            <param name="colEnd">End column of the extracted submatrix. The upper boundary is not included.</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat`2.Item(OpenCvSharp.CPlusPlus.Range,OpenCvSharp.CPlusPlus.Range)">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="rowRange">Start and end row of the extracted submatrix. The upper boundary is not included. 
            To select all the rows, use Range.All().</param>
            <param name="colRange">Start and end column of the extracted submatrix. 
            The upper boundary is not included. To select all the columns, use Range.All().</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat`2.Item(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="roi">Extracted submatrix specified as a rectangle.</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat`2.Item(OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="ranges">Array of selected ranges along each array dimension.</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat`2.Count">
            <summary>
            Returns the total number of matrix elements (Mat.total)
            </summary>
            <returns>Total number of list(Mat) elements</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Mat`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(OpenCvSharp.CPlusPlus.Size,System.Int32)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(OpenCvSharp.CPlusPlus.MatOfInt4,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(OpenCvSharp.CPlusPlus.MatOfInt4,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(OpenCvSharp.CPlusPlus.MatOfInt4,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec4i[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec4i[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Vec4i[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Vec4i)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.FromArray(OpenCvSharp.CPlusPlus.Vec4i[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.FromArray(OpenCvSharp.CPlusPlus.Vec4i[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.FromArray(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Vec4i})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt4.Add(OpenCvSharp.CPlusPlus.Vec4i)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfInt4.Indexer">
            <summary>
            Matrix indexer
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfInt4.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfInt4.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfInt4.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfInt4.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Rectf">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Rectf.SizeOf">
            <summary>
            sizeof(Rect)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Rectf.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Rectf.Y">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Rectf.Width">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Rectf.Height">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Rectf.Empty">
            <summary>
            Represents a CvRect structure with its properties left uninitialized. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.#ctor(OpenCvSharp.CPlusPlus.Point2f,OpenCvSharp.CPlusPlus.Size2f)">
            <summary>
            
            </summary>
            <param name="location"></param>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.FromLTRB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.Equals(OpenCvSharp.CPlusPlus.Rectf)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.op_Equality(OpenCvSharp.CPlusPlus.Rectf,OpenCvSharp.CPlusPlus.Rectf)">
            <summary>
            Compares two Rectf objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.op_Inequality(OpenCvSharp.CPlusPlus.Rectf,OpenCvSharp.CPlusPlus.Rectf)">
            <summary>
            Compares two Rectf objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.op_Addition(OpenCvSharp.CPlusPlus.Rectf,OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            Shifts rectangle by a certain offset
            </summary>
            <param name="rect"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.op_Subtraction(OpenCvSharp.CPlusPlus.Rectf,OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            Shifts rectangle by a certain offset
            </summary>
            <param name="rect"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.op_Addition(OpenCvSharp.CPlusPlus.Rectf,OpenCvSharp.CPlusPlus.Size2f)">
            <summary>
            Expands or shrinks rectangle by a certain amount
            </summary>
            <param name="rect"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.op_Subtraction(OpenCvSharp.CPlusPlus.Rectf,OpenCvSharp.CPlusPlus.Size2f)">
            <summary>
            Expands or shrinks rectangle by a certain amount
            </summary>
            <param name="rect"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.op_BitwiseAnd(OpenCvSharp.CPlusPlus.Rectf,OpenCvSharp.CPlusPlus.Rectf)">
            <summary>
            Determines the CvRect structure that represents the intersection of two rectangles. 
            </summary>
            <param name="a">A rectangle to intersect. </param>
            <param name="b">A rectangle to intersect. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.op_BitwiseOr(OpenCvSharp.CPlusPlus.Rectf,OpenCvSharp.CPlusPlus.Rectf)">
            <summary>
            Gets a CvRect structure that contains the union of two CvRect structures. 
            </summary>
            <param name="a">A rectangle to union. </param>
            <param name="b">A rectangle to union. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.Contains(System.Single,System.Single)">
            <summary>
            Determines if the specified point is contained within the rectangular region defined by this Rectangle. 
            </summary>
            <param name="x">x-coordinate of the point</param>
            <param name="y">y-coordinate of the point</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.Contains(OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            Determines if the specified point is contained within the rectangular region defined by this Rectangle. 
            </summary>
            <param name="pt">point</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.Contains(OpenCvSharp.CPlusPlus.Rectf)">
            <summary>
            Determines if the specified rectangle is contained within the rectangular region defined by this Rectangle. 
            </summary>
            <param name="rect">rectangle</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.Inflate(System.Single,System.Single)">
            <summary>
            Inflates this Rect by the specified amount. 
            </summary>
            <param name="width">The amount to inflate this Rectangle horizontally. </param>
            <param name="height">The amount to inflate this Rectangle vertically. </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.Inflate(OpenCvSharp.CPlusPlus.Size2f)">
            <summary>
            Inflates this Rect by the specified amount. 
            </summary>
            <param name="size">The amount to inflate this rectangle. </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.Inflate(OpenCvSharp.CPlusPlus.Rect,System.Int32,System.Int32)">
            <summary>
            Creates and returns an inflated copy of the specified CvRect structure.
            </summary>
            <param name="rect">The Rectangle with which to start. This rectangle is not modified. </param>
            <param name="x">The amount to inflate this Rectangle horizontally. </param>
            <param name="y">The amount to inflate this Rectangle vertically. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.Intersect(OpenCvSharp.CPlusPlus.Rectf,OpenCvSharp.CPlusPlus.Rectf)">
            <summary>
            Determines the CvRect structure that represents the intersection of two rectangles. 
            </summary>
            <param name="a">A rectangle to intersect. </param>
            <param name="b">A rectangle to intersect. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.Intersect(OpenCvSharp.CPlusPlus.Rectf)">
            <summary>
            Determines the CvRect structure that represents the intersection of two rectangles. 
            </summary>
            <param name="rect">A rectangle to intersect. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.IntersectsWith(OpenCvSharp.CPlusPlus.Rectf)">
            <summary>
            Determines if this rectangle intersects with rect. 
            </summary>
            <param name="rect">Rectangle</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.Union(OpenCvSharp.CPlusPlus.Rectf)">
            <summary>
            Gets a CvRect structure that contains the union of two CvRect structures. 
            </summary>
            <param name="rect">A rectangle to union. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.Union(OpenCvSharp.CPlusPlus.Rectf,OpenCvSharp.CPlusPlus.Rectf)">
            <summary>
            Gets a CvRect structure that contains the union of two CvRect structures. 
            </summary>
            <param name="a">A rectangle to union. </param>
            <param name="b">A rectangle to union. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rectf.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Rectf.Top">
            <summary>
            Gets the y-coordinate of the top edge of this CvRect structure. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Rectf.Bottom">
            <summary>
            Gets the y-coordinate that is the sum of the Y and Height property values of this CvRect structure.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Rectf.Left">
            <summary>
            Gets the x-coordinate of the left edge of this CvRect structure. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Rectf.Right">
            <summary>
            Gets the x-coordinate that is the sum of X and Width property values of this CvRect structure. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Rectf.Location">
            <summary>
            Coordinate of the left-most rectangle corner [Point2f(X, Y)]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Rectf.Size">
            <summary>
            Size of the rectangle [CvSize(Width, Height)]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Rectf.TopLeft">
            <summary>
            Coordinate of the left-most rectangle corner [Point2f(X, Y)]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Rectf.BottomRight">
            <summary>
            Coordinate of the right-most rectangle corner [Point2f(X+Width, Y+Height)]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.FlannBasedMatcher">
            <summary>
            Brute-force descriptor matcher.
            For each descriptor in the first set, this matcher finds the closest descriptor in the second set by trying each one.
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.DescriptorMatcher">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DescriptorMatcher.detectorPtr">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorMatcher.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorMatcher.Create(System.String)">
            <summary>
            Create descriptor matcher by type name.
            </summary>
            <param name="descriptorMatcherType"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorMatcher.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorMatcher.FromRawPtr(System.IntPtr)">
            <summary>
            Creates instance from raw pointer T*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorMatcher.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorMatcher.Add(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat})">
            <summary>
            Add descriptors to train descriptor collection.
            </summary>
            <param name="descriptors">Descriptors to add. Each descriptors[i] is a descriptors set from one image.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorMatcher.GetTrainDescriptors">
            <summary>
            Get train descriptors collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorMatcher.Clear">
            <summary>
            Clear train descriptors collection.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorMatcher.Empty">
            <summary>
            Return true if there are not train descriptors in collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorMatcher.IsMaskSupported">
            <summary>
            Return true if the matcher supports mask in match methods.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorMatcher.Train">
            <summary>
            Train matcher (e.g. train flann index).
            In all methods to match the method train() is run every time before matching.
            Some descriptor matchers (e.g. BruteForceMatcher) have empty implementation
            of this method, other matchers really train their inner structures
            (e.g. FlannBasedMatcher trains flann::Index). So nonempty implementation
            of train() should check the class object state and do traing/retraining
            only if the state requires that (e.g. FlannBasedMatcher trains flann::Index
            if it has not trained yet or if new descriptors have been added to the train collection).
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorMatcher.Match(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Find one best match for each query descriptor (if mask is empty).
            </summary>
            <param name="queryDescriptors"></param>
            <param name="trainDescriptors"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorMatcher.KnnMatch(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,System.Int32,OpenCvSharp.CPlusPlus.Mat,System.Boolean)">
            <summary>
            Find k best matches for each query descriptor (in increasing order of distances).
            compactResult is used when mask is not empty. If compactResult is false matches
            vector will have the same size as queryDescriptors rows. If compactResult is true
            matches vector will not contain matches for fully masked out query descriptors.
            </summary>
            <param name="queryDescriptors"></param>
            <param name="trainDescriptors"></param>
            <param name="k"></param>
            <param name="mask"></param>
            <param name="compactResult"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorMatcher.RadiusMatch(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,System.Single,OpenCvSharp.CPlusPlus.Mat,System.Boolean)">
            <summary>
            Find best matches for each query descriptor which have distance less than
            maxDistance (in increasing order of distances).
            </summary>
            <param name="queryDescriptors"></param>
            <param name="trainDescriptors"></param>
            <param name="maxDistance"></param>
            <param name="mask"></param>
            <param name="compactResult"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorMatcher.Match(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat[])">
            <summary>
            Find one best match for each query descriptor (if mask is empty).
            </summary>
            <param name="queryDescriptors"></param>
            <param name="masks"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorMatcher.KnnMatch(OpenCvSharp.CPlusPlus.Mat,System.Int32,OpenCvSharp.CPlusPlus.Mat[],System.Boolean)">
            <summary>
            Find k best matches for each query descriptor (in increasing order of distances).
            compactResult is used when mask is not empty. If compactResult is false matches
            vector will have the same size as queryDescriptors rows. If compactResult is true
            matches vector will not contain matches for fully masked out query descriptors.
            </summary>
            <param name="queryDescriptors"></param>
            <param name="k"></param>
            <param name="masks"></param>
            <param name="compactResult"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorMatcher.RadiusMatch(OpenCvSharp.CPlusPlus.Mat,System.Single,OpenCvSharp.CPlusPlus.Mat[],System.Boolean)">
            <summary>
            Find best matches for each query descriptor which have distance less than
            maxDistance (in increasing order of distances).
            </summary>
            <param name="queryDescriptors"></param>
            <param name="maxDistance"></param>
            <param name="masks"></param>
            <param name="compactResult"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.DescriptorMatcher.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FlannBasedMatcher.#ctor(OpenCvSharp.CPlusPlus.Flann.IndexParams,OpenCvSharp.CPlusPlus.Flann.SearchParams)">
            <summary>
            
            </summary>
            <param name="indexParams"></param>
            <param name="searchParams"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FlannBasedMatcher.#ctor(OpenCvSharp.CPlusPlus.Ptr{OpenCvSharp.CPlusPlus.FlannBasedMatcher})">
            <summary>
            Creates instance by cv::Ptr&lt;T&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FlannBasedMatcher.#ctor(System.IntPtr)">
            <summary>
            Creates instance by raw pointer T*
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FlannBasedMatcher.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FlannBasedMatcher.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FlannBasedMatcher.IsMaskSupported">
            <summary>
            Return true if the matcher supports mask in match methods.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FlannBasedMatcher.Add(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat})">
            <summary>
            Add descriptors to train descriptor collection.
            </summary>
            <param name="descriptors">Descriptors to add. Each descriptors[i] is a descriptors set from one image.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FlannBasedMatcher.Clear">
            <summary>
            Clear train descriptors collection.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FlannBasedMatcher.Train">
            <summary>
            Train matcher (e.g. train flann index).
            In all methods to match the method train() is run every time before matching.
            Some descriptor matchers (e.g. BruteForceMatcher) have empty implementation
            of this method, other matchers really train their inner structures
            (e.g. FlannBasedMatcher trains flann::Index). So nonempty implementation
            of train() should check the class object state and do traing/retraining
            only if the state requires that (e.g. FlannBasedMatcher trains flann::Index
            if it has not trained yet or if new descriptors have been added to the train collection).
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FlannBasedMatcher.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.BriefDescriptorExtractor">
            <summary>
            BRIEF Descriptor
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.DescriptorExtractor">
            <summary>
            Abstract base class for computing descriptors for image keypoints.
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.IDescriptorExtractor">
            <summary>
            Abstract base class for computing descriptors for image keypoints.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.IDescriptorExtractor.Compute(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.KeyPoint[]@,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Compute the descriptors for a set of keypoints in an image.
            </summary>
            <param name="image">The image.</param>
            <param name="keypoints"></param>
            <param name="descriptors">Copmputed descriptors. Row i is the descriptor for keypoint i.</param>
            <returns>The input keypoints. Keypoints for which a descriptor cannot be computed are removed.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.IDescriptorExtractor.Compute(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},OpenCvSharp.CPlusPlus.KeyPoint[][]@,System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat})">
            <summary>
            Compute the descriptors for a keypoints collection detected in image collection.
            </summary>
            <param name="images">Image collection.</param>
            <param name="keypoints">Input keypoints collection. keypoints[i] is keypoints detected in images[i].
            Keypoints for which a descriptor cannot be computed are removed.</param>
            <param name="descriptors">Descriptor collection. descriptors[i] are descriptors computed for set keypoints[i].</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.IDescriptorExtractor.Empty">
            <summary>
            Return true if detector object is empty
            </summary>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DescriptorExtractor.extractorPtr">
            <summary>
            cv::Ptr&lt;DescriptorExtractor&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorExtractor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorExtractor.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorExtractor.FromRawPtr(System.IntPtr)">
            <summary>
            Creates instance from raw T*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorExtractor.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorExtractor.Compute(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.KeyPoint[]@,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Compute the descriptors for a set of keypoints in an image.
            </summary>
            <param name="image">The image.</param>
            <param name="keypoints">The input keypoints. Keypoints for which a descriptor cannot be computed are removed.</param>
            <param name="descriptors">Copmputed descriptors. Row i is the descriptor for keypoint i.</param>param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorExtractor.Compute(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},OpenCvSharp.CPlusPlus.KeyPoint[][]@,System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat})">
            <summary>
            Compute the descriptors for a keypoints collection detected in image collection.
            </summary>
            <param name="images">Image collection.</param>
            <param name="keypoints">Input keypoints collection. keypoints[i] is keypoints detected in images[i].
            Keypoints for which a descriptor cannot be computed are removed.</param>
            <param name="descriptors">Descriptor collection. descriptors[i] are descriptors computed for set keypoints[i].</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorExtractor.Empty">
            <summary>
            Return true if detector object is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorExtractor.DescriptorSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DescriptorExtractor.DescriptorType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.DescriptorExtractor.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.BriefDescriptorExtractor.extractorPtr">
            <summary>
            cv::Ptr&lt;DescriptorExtractor&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BriefDescriptorExtractor.#ctor(System.Int32)">
            <summary>
            bytes is a length of descriptor in bytes. It can be equal 16, 32 or 64 bytes.
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BriefDescriptorExtractor.#ctor(OpenCvSharp.CPlusPlus.Ptr{OpenCvSharp.CPlusPlus.BriefDescriptorExtractor},System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BriefDescriptorExtractor.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BriefDescriptorExtractor.FromRawPtr(System.IntPtr)">
            <summary>
            Creates instance from raw T*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BriefDescriptorExtractor.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BriefDescriptorExtractor.DescriptorSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BriefDescriptorExtractor.DescriptorType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.BriefDescriptorExtractor.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Flann.FlannDistance">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu">
            <summary>
            Functions of OpenCV GPU module
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.GetCudaEnabledDeviceCount">
            <summary>
            Returns the number of installed CUDA-enabled devices.
            Use this function before any other GPU functions calls. 
            If OpenCV is compiled without GPU support, this function returns 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.GetDevice">
            <summary>
            Returns the current device index set by SetDevice() or initialized by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.SetDevice(System.Int32)">
            <summary>
            Sets a device and initializes it for the current thread.
            </summary>
            <param name="device">System index of a GPU device starting with 0.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.ResetDevice">
            <summary>
            Explicitly destroys and cleans up all resources associated with the current device in the current process.
            Any subsequent API call to this device will reinitialize the device.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.PrintCudaDeviceInfo(System.Int32)">
            <summary>
            
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.PrintShortCudaDeviceInfo(System.Int32)">
            <summary>
            
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.RegisterPageLocked(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Page-locks the matrix m memory and maps it for the device(s)
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.UnregisterPageLocked(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Unmaps the memory of matrix m, and makes it pageable again.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.CreateContinuous(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Creates continuous GPU matrix
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type.</param>
            <param name="m"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.CreateContinuous(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            Creates continuous GPU matrix
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.CreateContinuous(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Creates continuous GPU matrix
            </summary>
            <param name="size">Number of rows and columns in a 2D array.</param>
            <param name="type">Array type.</param>
            <param name="m"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.CreateContinuous(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            Creates continuous GPU matrix
            </summary>
            <param name="size">Number of rows and columns in a 2D array.</param>
            <param name="type">Array type.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.EnsureSizeIsEnough(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Ensures that size of the given matrix is not less than (rows, cols) size
            and matrix type is match specified one too
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type.</param>
            <param name="m"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.EnsureSizeIsEnough(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Ensures that size of the given matrix is not less than (rows, cols) size
            and matrix type is match specified one too
            </summary>
            <param name="size">Number of rows and columns in a 2D array.</param>
            <param name="type">Array type.</param>
            <param name="m"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.AllocMatFromBuf(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type.</param>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.BoxFilter(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Int32,OpenCvSharp.CPlusPlus.Size,System.Nullable{OpenCvSharp.CPlusPlus.Point},OpenCvSharp.CPlusPlus.Gpu.Stream)">
            <summary>
            Smooths the image using the normalized box filter.
            </summary>
            <param name="src">Input image. CV_8UC1 and CV_8UC4 source types are supported.</param>
            <param name="dst">Output image type. The size and type is the same as src.</param>
            <param name="ddepth">Output image depth. If -1, the output image has the same depth as the input one. 
            The only values allowed here are CV_8U and -1.</param>
            <param name="ksize">Kernel size.</param>
            <param name="anchor">Anchor point. The default value Point(-1, -1) means that 
            the anchor is at the kernel center.</param>
            <param name="stream">Stream for the asynchronous version.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.Blur(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Size,System.Nullable{OpenCvSharp.CPlusPlus.Point},OpenCvSharp.CPlusPlus.Gpu.Stream)">
            <summary>
            Acts as a synonym for the normalized box filter.
            </summary>
            <param name="src">Input image. CV_8UC1 and CV_8UC4 source types are supported.</param>
            <param name="dst">Output image type. The size and type is the same as src.</param>
            <param name="ksize">Kernel size.</param>
            <param name="anchor">Anchor point. The default value Point(-1, -1) means that 
            the anchor is at the kernel center.</param>
            <param name="stream">Stream for the asynchronous version.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.Erode(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Mat,System.Nullable{OpenCvSharp.CPlusPlus.Point},System.Int32)">
            <summary>
            Erodes an image by using a specific structuring element.
            </summary>
            <param name="src">Source image. Only CV_8UC1 and CV_8UC4 types are supported.</param>
            <param name="dst">Destination image with the same size and type as src.</param>
            <param name="kernel">Structuring element used for erosion. If kernel=Mat(), 
            a 3x3 rectangular structuring element is used.</param>
            <param name="anchor">Position of an anchor within the element. 
            The default value (-1, -1) means that the anchor is at the element center.</param>
            <param name="iterations">Number of times erosion to be applied.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.Erode(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Nullable{OpenCvSharp.CPlusPlus.Point},System.Int32,OpenCvSharp.CPlusPlus.Gpu.Stream)">
            <summary>
            Erodes an image by using a specific structuring element.
            </summary>
            <param name="src">Source image. Only CV_8UC1 and CV_8UC4 types are supported.</param>
            <param name="dst">Destination image with the same size and type as src.</param>
            <param name="kernel">Structuring element used for erosion. If kernel=Mat(), 
            a 3x3 rectangular structuring element is used.</param>
            <param name="buf"></param>
            <param name="anchor">Position of an anchor within the element. 
            The default value (-1, -1) means that the anchor is at the element center.</param>
            <param name="iterations">Number of times erosion to be applied.</param>
            <param name="stream">Stream for the asynchronous version.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.Dilate(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Mat,System.Nullable{OpenCvSharp.CPlusPlus.Point},System.Int32)">
            <summary>
            Dilates an image by using a specific structuring element.
            </summary>
            <param name="src">Source image. Only CV_8UC1 and CV_8UC4 types are supported.</param>
            <param name="dst">Destination image with the same size and type as src.</param>
            <param name="kernel">Structuring element used for erosion. If kernel=Mat(), 
            a 3x3 rectangular structuring element is used.</param>
            <param name="anchor">Position of an anchor within the element. 
            The default value (-1, -1) means that the anchor is at the element center.</param>
            <param name="iterations">Number of times erosion to be applied.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.Dilate(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Nullable{OpenCvSharp.CPlusPlus.Point},System.Int32,OpenCvSharp.CPlusPlus.Gpu.Stream)">
            <summary>
            Dilates an image by using a specific structuring element.
            </summary>
            <param name="src">Source image. Only CV_8UC1 and CV_8UC4 types are supported.</param>
            <param name="dst">Destination image with the same size and type as src.</param>
            <param name="kernel">Structuring element used for erosion. If kernel=Mat(), 
            a 3x3 rectangular structuring element is used.</param>
            <param name="buf"></param>
            <param name="anchor">Position of an anchor within the element. 
            The default value (-1, -1) means that the anchor is at the element center.</param>
            <param name="iterations">Number of times erosion to be applied.</param>
            <param name="stream">Stream for the asynchronous version.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.MorphologyEx(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.MorphologyOperation,OpenCvSharp.CPlusPlus.Mat,System.Nullable{OpenCvSharp.CPlusPlus.Point},System.Int32)">
            <summary>
            Applies an advanced morphological operation to an image.
            </summary>
            <param name="src">Source image. CV_8UC1 and CV_8UC4 source types are supported.</param>
            <param name="dst">Destination image with the same size and type as src.</param>
            <param name="op">Type of morphological operation</param>
            <param name="kernel">Structuring element.</param>
            <param name="anchor">Position of an anchor within the element. 
            The default value Point(-1, -1) means that the anchor is at the element center.</param>
            <param name="iterations">Number of times erosion and dilation to be applied.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.MorphologyEx(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.MorphologyOperation,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Nullable{OpenCvSharp.CPlusPlus.Point},System.Int32,OpenCvSharp.CPlusPlus.Gpu.Stream)">
            <summary>
            Applies an advanced morphological operation to an image.
            </summary>
            <param name="src">Source image. CV_8UC1 and CV_8UC4 source types are supported.</param>
            <param name="dst">Destination image with the same size and type as src.</param>
            <param name="op">Type of morphological operation</param>
            <param name="kernel">Structuring element.</param>
            <param name="buf1"></param>
            <param name="buf2"></param>
            <param name="anchor">Position of an anchor within the element. 
            The default value Point(-1, -1) means that the anchor is at the element center.</param>
            <param name="iterations">Number of times erosion and dilation to be applied.</param>
            <param name="stream">Stream for the asynchronous version.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.Filter2D(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Int32,OpenCvSharp.CPlusPlus.Mat,System.Nullable{OpenCvSharp.CPlusPlus.Point},OpenCvSharp.BorderType,OpenCvSharp.CPlusPlus.Gpu.Stream)">
            <summary>
            Applies the non-separable 2D linear filter to an image.
            </summary>
            <param name="src">Source image. Supports CV_8U, CV_16U and CV_32F one and four channel image.</param>
            <param name="dst">Destination image. The size and the number of channels is the same as src.</param>
            <param name="ddepth">Desired depth of the destination image. If it is negative, it is the same as src.depth(). 
            It supports only the same depth as the source image depth.</param>
            <param name="kernel">2D array of filter coefficients.</param>
            <param name="anchor">Anchor of the kernel that indicates the relative position of 
            a filtered point within the kernel. The anchor resides within the kernel. 
            The special default value (-1,-1) means that the anchor is at the kernel center.</param>
            <param name="borderType">Pixel extrapolation method.</param>
            <param name="stream">Stream for the asynchronous version.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.SepFilter2D(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Int32,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,System.Nullable{OpenCvSharp.CPlusPlus.Point},OpenCvSharp.BorderType,OpenCvSharp.BorderType)">
            <summary>
            Applies a separable 2D linear filter to an image.
            </summary>
            <param name="src">Source image. 
            CV_8UC1, CV_8UC4, CV_16SC1, CV_16SC2, CV_32SC1, CV_32FC1 source types are supported.</param>
            <param name="dst">Destination image with the same size and number of channels as src.</param>
            <param name="ddepth">Destination image depth. CV_8U, CV_16S, CV_32S, and CV_32F are supported.</param>
            <param name="kernelX">Horizontal filter coefficients.</param>
            <param name="kernelY">Vertical filter coefficients.</param>
            <param name="anchor">Anchor position within the kernel. 
            The default value (-1, 1) means that the anchor is at the kernel center.</param>
            <param name="rowBorderType">Pixel extrapolation method in the vertical direction.</param>
            <param name="columnBorderType">Pixel extrapolation method in the horizontal direction.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.SepFilter2D(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Int32,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Nullable{OpenCvSharp.CPlusPlus.Point},OpenCvSharp.BorderType,OpenCvSharp.BorderType,OpenCvSharp.CPlusPlus.Gpu.Stream)">
            <summary>
            Applies a separable 2D linear filter to an image.
            </summary>
            <param name="src">Source image. 
            CV_8UC1, CV_8UC4, CV_16SC1, CV_16SC2, CV_32SC1, CV_32FC1 source types are supported.</param>
            <param name="dst">Destination image with the same size and number of channels as src.</param>
            <param name="ddepth">Destination image depth. CV_8U, CV_16S, CV_32S, and CV_32F are supported.</param>
            <param name="kernelX">Horizontal filter coefficients.</param>
            <param name="kernelY">Vertical filter coefficients.</param>
            <param name="buf"></param>
            <param name="anchor">Anchor position within the kernel. 
            The default value (-1, 1) means that the anchor is at the kernel center.</param>
            <param name="rowBorderType">Pixel extrapolation method in the vertical direction.</param>
            <param name="columnBorderType">Pixel extrapolation method in the horizontal direction.</param>
            <param name="stream">Stream for the asynchronous version.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.Sobel(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,OpenCvSharp.BorderType,OpenCvSharp.BorderType)">
            <summary>
            Applies the generalized Sobel operator to an image.
            </summary>
            <param name="src">Source image. 
            CV_8UC1, CV_8UC4, CV_16SC1, CV_16SC2, CV_16SC3, CV_32SC1, CV_32FC1 source types are supported.</param>
            <param name="dst">Destination image with the same size and number of channels as source image.</param>
            <param name="ddepth">Destination image depth. CV_8U, CV_16S, CV_32S, and CV_32F are supported.</param>
            <param name="dx">Derivative order in respect of x.</param>
            <param name="dy">Derivative order in respect of y.</param>
            <param name="ksize">Size of the extended Sobel kernel. Possible values are 1, 3, 5 or 7.</param>
            <param name="scale">Optional scale factor for the computed derivative values. By default, no scaling is applied.</param>
            <param name="rowBorderType">Pixel extrapolation method in the vertical direction.</param>
            <param name="columnBorderType">Pixel extrapolation method in the horizontal direction.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.Sobel(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Int32,System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Int32,System.Double,OpenCvSharp.BorderType,OpenCvSharp.BorderType,OpenCvSharp.CPlusPlus.Gpu.Stream)">
            <summary>
            Applies the generalized Sobel operator to an image.
            </summary>
            <param name="src">Source image. 
            CV_8UC1, CV_8UC4, CV_16SC1, CV_16SC2, CV_16SC3, CV_32SC1, CV_32FC1 source types are supported.</param>
            <param name="dst">Destination image with the same size and number of channels as source image.</param>
            <param name="ddepth">Destination image depth. CV_8U, CV_16S, CV_32S, and CV_32F are supported.</param>
            <param name="dx">Derivative order in respect of x.</param>
            <param name="dy">Derivative order in respect of y.</param>
            <param name="buf"></param>
            <param name="ksize">Size of the extended Sobel kernel. Possible values are 1, 3, 5 or 7.</param>
            <param name="scale">Optional scale factor for the computed derivative values. By default, no scaling is applied.</param>
            <param name="rowBorderType">Pixel extrapolation method in the vertical direction.</param>
            <param name="columnBorderType">Pixel extrapolation method in the horizontal direction.</param>
            <param name="stream">Stream for the asynchronous version.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.Scharr(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Int32,System.Int32,System.Int32,System.Double,OpenCvSharp.BorderType,OpenCvSharp.BorderType)">
            <summary>
            Calculates the first x- or y- image derivative using the Scharr operator.
            </summary>
            <param name="src">Source image. 
            CV_8UC1, CV_8UC4, CV_16SC1, CV_16SC2, CV_16SC3, CV_32SC1, CV_32FC1 source types are supported.</param>
            <param name="dst">Destination image with the same size and number of channels as source image.</param>
            <param name="ddepth">Destination image depth. CV_8U, CV_16S, CV_32S, and CV_32F are supported.</param>
            <param name="dx">Derivative order in respect of x.</param>
            <param name="dy">Derivative order in respect of y.</param>
            <param name="scale">Optional scale factor for the computed derivative values. By default, no scaling is applied.</param>
            <param name="rowBorderType">Pixel extrapolation method in the vertical direction.</param>
            <param name="columnBorderType">Pixel extrapolation method in the horizontal direction.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.Scharr(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Int32,System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Double,OpenCvSharp.BorderType,OpenCvSharp.BorderType,OpenCvSharp.CPlusPlus.Gpu.Stream)">
            <summary>
            Calculates the first x- or y- image derivative using the Scharr operator.
            </summary>
            <param name="src">Source image. 
            CV_8UC1, CV_8UC4, CV_16SC1, CV_16SC2, CV_16SC3, CV_32SC1, CV_32FC1 source types are supported.</param>
            <param name="dst">Destination image with the same size and number of channels as source image.</param>
            <param name="ddepth">Destination image depth. CV_8U, CV_16S, CV_32S, and CV_32F are supported.</param>
            <param name="dx">Derivative order in respect of x.</param>
            <param name="dy">Derivative order in respect of y.</param>
            <param name="buf"></param>
            <param name="scale">Optional scale factor for the computed derivative values. By default, no scaling is applied.</param>
            <param name="rowBorderType">Pixel extrapolation method in the vertical direction.</param>
            <param name="columnBorderType">Pixel extrapolation method in the horizontal direction.</param>
            <param name="stream">Stream for the asynchronous version.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.GaussianBlur(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Size,System.Double,System.Double,OpenCvSharp.BorderType,OpenCvSharp.BorderType)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="ksize"></param>
            <param name="sigma1"></param>
            <param name="sigma2"></param>
            <param name="rowBorderType"></param>
            <param name="columnBorderType"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.GaussianBlur(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Double,System.Double,OpenCvSharp.BorderType,OpenCvSharp.BorderType,OpenCvSharp.CPlusPlus.Gpu.Stream)">
            <summary>
            Smooths an image using the Gaussian filter.
            </summary>
            <param name="src">Source image. 
            CV_8UC1, CV_8UC4, CV_16SC1, CV_16SC2, CV_16SC3, CV_32SC1, CV_32FC1 source types are supported.</param>
            <param name="dst">Destination image with the same size and type as src.</param>
            <param name="ksize">Gaussian kernel size. ksize.Width and ksize.Height can differ 
            but they both must be positive and odd. If they are zeros, 
            they are computed from sigma1 and sigma2 .</param>
            <param name="buf"></param>
            <param name="sigma1">Gaussian kernel standard deviation in X direction.</param>
            <param name="sigma2">Gaussian kernel standard deviation in Y direction. 
            If sigma2 is zero, it is set to be equal to sigma1 . If they are both zeros, 
            they are computed from ksize.Width and ksize.Height, respectively.
            To fully control the result regardless of possible future modification of all 
            this semantics, you are recommended to specify all of ksize, sigma1, and sigma2.</param>
            <param name="rowBorderType">Pixel extrapolation method in the vertical direction.</param>
            <param name="columnBorderType">Pixel extrapolation method in the horizontal direction.</param>
            <param name="stream">Stream for the asynchronous version.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.Laplacian(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Int32,System.Int32,System.Double,OpenCvSharp.BorderType,OpenCvSharp.CPlusPlus.Gpu.Stream)">
            <summary>
            Applies the Laplacian operator to an image.
            </summary>
            <param name="src">Source image. CV_8UC1 and CV_8UC4 source types are supported.</param>
            <param name="dst">Destination image. The size and number of channels is the same as src.</param>
            <param name="ddepth">Desired depth of the destination image. It supports only the same depth as the source image depth.</param>
            <param name="ksize">Aperture size used to compute the second-derivative filters. 
            It must be positive and odd. Only ksize = 1 and ksize = 3 are supported.</param>
            <param name="scale">Optional scale factor for the computed Laplacian values.</param>
            <param name="borderType">Pixel extrapolation method.</param>
            <param name="stream">Stream for the asynchronous version.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.MinMaxLoc(OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Double@,System.Double@,OpenCvSharp.CPlusPlus.Point@,OpenCvSharp.CPlusPlus.Point@,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Finds global minimum and maximum array elements and returns their values with locations
            </summary>
            <param name="src">Single-channel source image.</param>
            <param name="minVal">Pointer to the returned minimum value.</param>
            <param name="maxVal">Pointer to the returned maximum value.</param>
            <param name="minLoc">Pointer to the returned minimum location.</param>
            <param name="maxLoc">Pointer to the returned maximum location.</param>
            <param name="mask">Optional mask to select a sub-matrix.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.MinMaxLoc(OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Double@,System.Double@,OpenCvSharp.CPlusPlus.Point@,OpenCvSharp.CPlusPlus.Point@,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Finds global minimum and maximum array elements and returns their values with locations
            </summary>
            <param name="src">Single-channel source image.</param>
            <param name="minVal">Pointer to the returned minimum value.</param>
            <param name="maxVal">Pointer to the returned maximum value.</param>
            <param name="minLoc">Pointer to the returned minimum location.</param>
            <param name="maxLoc">Pointer to the returned maximum location.</param>
            <param name="mask">Optional mask to select a sub-matrix.</param>
            <param name="valbuf">Optional values buffer to avoid extra memory allocations. 
            It is resized automatically.</param>
            <param name="locbuf">Optional locations buffer to avoid extra memory allocations. 
            It is resized automatically.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.MatchTemplate(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.MatchTemplateMethod,OpenCvSharp.CPlusPlus.Gpu.Stream)">
            <summary>
            Computes a proximity map for a raster template and an image where the template is searched for.
            </summary>
            <param name="image">Source image. CV_32F and CV_8U depth images (1..4 channels) are supported for now.</param>
            <param name="templ">Template image with the size and type the same as image.</param>
            <param name="result">Map containing comparison results (CV_32FC1). If image is W x H and templ is w x h, then result must be W-w+1 x H-h+1.</param>
            <param name="method">Specifies the way to compare the template with the image.</param>
            <param name="stream">Stream for the asynchronous version.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Cv2Gpu.ThrowIfGpuNotAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.CascadeClassifier_GPU">
            <summary>
            The cascade classifier class for object detection: 
            supports old haar and new lbp xml formats and nvbin for haar cascades only.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.CascadeClassifier_GPU.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CascadeClassifier_GPU.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CascadeClassifier_GPU.#ctor(System.String)">
            <summary>
            CascadeClassifier_GPU Constructor
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CascadeClassifier_GPU.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CascadeClassifier_GPU.Release">
            <summary>
            releases all inner buffers
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CascadeClassifier_GPU.DetectMultiScale(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Double,System.Int32,System.Nullable{OpenCvSharp.CPlusPlus.Size})">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="objectsBuf"></param>
            <param name="scaleFactor"></param>
            <param name="minNeighbors"></param>
            <param name="minSize"></param>
            <returns>number of detected objects</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CascadeClassifier_GPU.DetectMultiScale(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Size,System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="objectsBuf"></param>
            <param name="maxObjectSize"></param>
            <param name="minSize"></param>
            <param name="scaleFactor"></param>
            <param name="minNeighbors"></param>
            <returns>number of detected objects</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CascadeClassifier_GPU.GetClassifierSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.CascadeClassifier_GPU.FindLargestObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.CascadeClassifier_GPU.VisualizeInPlace">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.DisposableGpuObject">
            <summary>
            An abstract class in GPU module that implements DisposableCvObject
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.DisposableGpuObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.DisposableGpuObject.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.DisposableGpuObject.#ctor(System.Boolean)">
            <summary>
             
            </summary>
            <param name="isEnabledDispose"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.DisposableGpuObject.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
            <param name="isEnabledDispose"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.DisposableGpuObject.ThrowIfNotAvailable">
            <summary>
            Checks whether the opencv_gpu*.dll includes CUDA support.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.DisposableGpuObject.IsGpuCompatible">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU">
            <summary>
            Gaussian Mixture-based Backbround/Foreground Segmentation Algorithm
            </summary>
            <remarks>
            The class implements the following algorithm:
            "Improved adaptive Gausian mixture model for background subtraction"
            Z.Zivkovic
            International Conference Pattern Recognition, UK, August, 2004.
            http://www.zoranz.net/Publications/zivkovic2004ICPR.pdf
            </remarks>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.#ctor(System.Int32)">
            <summary>
            the default constructor
            </summary>
            <param name="nMixtures"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.Initialize(OpenCvSharp.CPlusPlus.Size,System.Int32)">
            <summary>
            re-initiaization method
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.Update(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Single,OpenCvSharp.CPlusPlus.Gpu.Stream)">
            <summary>
            the update operator [MOG_GPU::operator()]
            </summary>
            <param name="frame"></param>
            <param name="fgmask"></param>
            <param name="learningRate"></param>
            <param name="stream"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.GetBackgroundImage(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.Stream)">
            <summary>
            Computes a background image which are the mean of all background gaussians
            </summary>
            <param name="backgroundImage"></param>
            <param name="stream"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.Release">
            <summary>
            releases all inner buffers
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.History">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.VarThreshold">
            <summary>
            The maximum allowed number of mixture components.
            Actual number is determined dynamically per pixel
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.BackgroundRatio">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.VarThresholdGen">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.VarInit">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.VarMin">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.VarMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.CT">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.DoShadowDetection">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.ShadowDetection">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.MOG2_GPU.Tau">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.MOG_GPU">
            <summary>
            Gaussian Mixture-based Backbround/Foreground Segmentation Algorithm
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.MOG_GPU.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.MOG_GPU.#ctor(System.Int32)">
            <summary>
            the default constructor
            </summary>
            <param name="nMixtures"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.MOG_GPU.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.MOG_GPU.Initialize(OpenCvSharp.CPlusPlus.Size,System.Int32)">
            <summary>
            re-initiaization method
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.MOG_GPU.Update(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Single,OpenCvSharp.CPlusPlus.Gpu.Stream)">
            <summary>
            the update operator [MOG_GPU::operator()]
            </summary>
            <param name="frame"></param>
            <param name="fgmask"></param>
            <param name="learningRate"></param>
            <param name="stream"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.MOG_GPU.GetBackgroundImage(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.Stream)">
            <summary>
            Computes a background image which are the mean of all background gaussians
            </summary>
            <param name="backgroundImage"></param>
            <param name="stream"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.MOG_GPU.Release">
            <summary>
            releases all inner buffers
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.MOG_GPU.History">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.MOG_GPU.VarThreshold">
            <summary>
            The maximum allowed number of mixture components.
            Actual number is determined dynamically per pixel
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.MOG_GPU.BackgroundRatio">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.MOG_GPU.NoiseSigma">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.StreamCallback">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="status"></param>
            <param name="userData"></param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.Stream">
            <summary>
            Encapculates Cuda Stream. Provides interface for async coping.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.Stream.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Stream.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::gpu::Stream* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Stream.#ctor">
            <summary>
            Creates empty Stream
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Stream.#ctor(OpenCvSharp.CPlusPlus.Gpu.Stream)">
            <summary>
            
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Stream.Release">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Stream.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Stream.op_Explicit(OpenCvSharp.CPlusPlus.Gpu.Stream)~System.Boolean">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Stream.QueryIfComplete">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Stream.WaitForCompletion">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Stream.EnqueueDownload(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.CudaMem)">
            <summary>
            Downloads asynchronously.
            Warning! cv::Mat must point to page locked memory (i.e. to CudaMem data or to its subMat)
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Stream.EnqueueDownload(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Downloads asynchronously.
            Warning! cv::Mat must point to page locked memory (i.e. to CudaMem data or to its subMat)
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Stream.EnqueueUpload(OpenCvSharp.CPlusPlus.Gpu.CudaMem,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Uploads asynchronously.
            Warning! cv::Mat must point to page locked memory (i.e. to CudaMem data or to its ROI)
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Stream.EnqueueUpload(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Uploads asynchronously.
            Warning! cv::Mat must point to page locked memory (i.e. to CudaMem data or to its ROI)
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Stream.EnqueueCopy(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Copy asynchronously
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Stream.EnqueueMemSet(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            Memory set asynchronously
            </summary>
            <param name="src"></param>
            <param name="val"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Stream.EnqueueMemSet(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Memory set asynchronously
            </summary>
            <param name="src"></param>
            <param name="val"></param>
            <param name="mask"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Stream.EnqueueConvert(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Int32,System.Double,System.Double)">
            <summary>
            converts matrix type, ex from float to uchar depending on type
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="dtype"></param>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.Stream.EnqueueHostCallback(OpenCvSharp.CPlusPlus.Gpu.StreamCallback,System.Object)">
            <summary>
            Adds a callback to be called on the host after all currently enqueued items 
            in the stream have completed
            </summary>
            <param name="callback"></param>
            <param name="userData">Not supported</param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.Stream.Null">
            <summary>
            Empty stream
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.DescriptorFormat">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.DescriptorFormat.RowByRow">
            <summary>
            
            [HOGDescriptor::DESCR_FORMAT_ROW_BY_ROW]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.DescriptorFormat.ColByCol">
            <summary>
            
            [HOGDescriptor::DESCR_FORMAT_COL_BY_COL]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.DeviceInfo">
            <summary>
            Gives information about the given GPU
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.DeviceInfo.#ctor">
            <summary>
            Creates DeviceInfo object for the current GPU
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.DeviceInfo.#ctor(System.Int32)">
            <summary>
            Creates DeviceInfo object for the given GPU
            </summary>
            <param name="deviceId"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.DeviceInfo.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.DeviceInfo.QueryMemory(System.Int64@,System.Int64@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.DeviceInfo.Supports(OpenCvSharp.CPlusPlus.Gpu.FeatureSet)">
            <summary>
            Checks whether device supports the given feature
            </summary>
            <param name="featureSet"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.DeviceInfo.DeviceId">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.DeviceInfo.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.DeviceInfo.MajorVersion">
            <summary>
            Return compute capability versions
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.DeviceInfo.MinorVersion">
            <summary>
            Return compute capability versions
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.DeviceInfo.MultiProcessorCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.DeviceInfo.SharedMemPerBlock">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.DeviceInfo.FreeMemory">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.DeviceInfo.TotalMemory">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.DeviceInfo.IsCompatible">
            <summary>
            Checks whether the GPU module can be run on the given device
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.CudaMem">
            <summary>
            CudaMem is limited cv::Mat with page locked memory allocation.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.CudaMem.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::gpu::CudaMem* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.#ctor">
            <summary>
            Creates empty CudaMem
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.#ctor(OpenCvSharp.CPlusPlus.Gpu.CudaMem)">
            <summary>
            
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Gpu.CudaMemAllocType)">
            <summary>
            
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type. </param>
            <param name="allocType"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Gpu.CudaMemAllocType)">
            <summary>
            
            </summary>
            <param name="size">2D array size: Size(cols, rows) </param>
            <param name="type">Array type. </param>
            <param name="allocType"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.Release">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.op_Explicit(OpenCvSharp.CPlusPlus.Gpu.CudaMem)~OpenCvSharp.CPlusPlus.Mat">
            <summary>
            returns matrix header with disabled reference counting for CudaMem data.
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.op_Implicit(OpenCvSharp.CPlusPlus.Gpu.CudaMem)~OpenCvSharp.CPlusPlus.Gpu.GpuMat">
            <summary>
            maps host memory into device address space and returns GpuMat header for it. 
            Throws exception if not supported by hardware.
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.IsContinuous">
            <summary>
            returns true iff the GpuMatrix data is continuous
            (i.e. when there are no gaps between successive rows).
            similar to CV_IS_GpuMat_CONT(cvGpuMat->type)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.Channels">
            <summary>
            Returns the number of matrix channels.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.Depth">
            <summary>
            Returns the depth of a matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.ElemSize">
            <summary>
            Returns the matrix element size in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.ElemSize1">
            <summary>
            Returns the size of each matrix element channel in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.Size">
            <summary>
            Returns a matrix size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.Step">
            <summary>
            a distance between successive rows in bytes; includes the gap if any
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.Step1">
            <summary>
            Returns a normalized step.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.Type">
            <summary>
            Returns the type of a matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.Empty">
            <summary>
            returns true if GpuMatrix data is NULL
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.Clone">
            <summary>
            returns deep copy of the matrix, i.e. the data is copied
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.AssignTo(OpenCvSharp.CPlusPlus.Gpu.CudaMem)">
            <summary>
            
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.Create(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Gpu.CudaMemAllocType)">
            <summary>
            allocates new matrix data unless the matrix already has specified size and type.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type. </param>
            <param name="allocType"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.CreateMatHeader">
            <summary>
            returns matrix header with disabled reference counting for CudaMem data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.CreateGpuMatHeader">
            <summary>
            maps host memory into device address space and returns GpuMat header for it. Throws exception if not supported by hardware.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.CudaMem.CanMapHostMemory">
            <summary>
            returns if host memory can be mapperd to gpu address space;
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.CudaMem.Flags">
            <summary>
            includes several bit-fields: 
             1.the magic signature 
             2.continuity flag 
             3.depth 
             4.number of channels
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.CudaMem.Rows">
            <summary>
            the number of rows
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.CudaMem.Cols">
            <summary>
            the number of columns
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.CudaMem.Height">
            <summary>
            the number of rows
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.CudaMem.Width">
            <summary>
            the number of columns
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.CudaMem.Data">
            <summary>
            pointer to the data
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.CudaMem.RefCount">
            <summary>
            pointer to the reference counter;
            when matrix points to user-allocated data, the pointer is NULL
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.CudaMem.DataStart">
            <summary>
            helper fields used in locateROI and adjustROI
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.CudaMem.DataEnd">
            <summary>
            helper fields used in locateROI and adjustROI
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.CudaMem.AllocType">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.GpuMat">
            <summary>
            Smart pointer for GPU memory with reference counting. Its interface is mostly similar with cv::Mat.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.GpuMat.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::gpu::GpuMat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.#ctor">
            <summary>
            Creates empty GpuMat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) </param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType.CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="size">2D array size: Size(cols, rows) </param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            creates a matrix for other matrix
            </summary>
            <param name="m">Array that (as a whole) is assigned to the constructed matrix.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.#ctor(OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            creates a matrix for other matrix
            </summary>
            <param name="m">GpuMat that (as a whole) is assigned to the constructed matrix.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) .</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or CV_8UC(n), ..., CV_64FC(n) to create multi-channel (up to CV_CN_MAX channels) matrices.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.#ctor(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Range,OpenCvSharp.CPlusPlus.Range)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. </param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.#ctor(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix..</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Release">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.op_Explicit(OpenCvSharp.CPlusPlus.Mat)~OpenCvSharp.CPlusPlus.Gpu.GpuMat">
            <summary>
            converts header to GpuMat
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.op_Implicit(OpenCvSharp.CPlusPlus.Gpu.GpuMat)~OpenCvSharp.CPlusPlus.Mat">
            <summary>
            converts header to Mat
            </summary>
            <param name="gpumat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.GetGenericIndexer``1">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Get``1(System.Int32,System.Int32)">
            <summary>
            Returns a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.At``1(System.Int32,System.Int32)">
            <summary>
            Returns a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Set``1(System.Int32,System.Int32,``0)">
            <summary>
            Set a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.ColRange(System.Int32,System.Int32)">
            <summary>
            returns a new matrix header for the specified column span
            </summary>
            <param name="startcol"></param>
            <param name="endcol"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.ColRange(OpenCvSharp.CPlusPlus.Range)">
            <summary>
            returns a new matrix header for the specified column span
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.RowRange(System.Int32,System.Int32)">
            <summary>
            returns a new matrix header for the specified row span
            </summary>
            <param name="startrow"></param>
            <param name="endrow"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.RowRange(OpenCvSharp.CPlusPlus.Range)">
            <summary>
            returns a new matrix header for the specified row span
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.IsContinuous">
            <summary>
            returns true iff the GpuMatrix data is continuous
            (i.e. when there are no gaps between successive rows).
            similar to CV_IS_GpuMat_CONT(cvGpuMat->type)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Channels">
            <summary>
            Returns the number of matrix channels.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Depth">
            <summary>
            Returns the depth of a matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.ElemSize">
            <summary>
            Returns the matrix element size in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.ElemSize1">
            <summary>
            Returns the size of each matrix element channel in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Size">
            <summary>
            Returns a matrix size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Step">
            <summary>
            a distance between successive rows in bytes; includes the gap if any
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Step1">
            <summary>
            Returns a normalized step.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Type">
            <summary>
            Returns the type of a matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Empty">
            <summary>
            returns true if GpuMatrix data is NULL
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Upload(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Pefroms blocking upload data to GpuMat.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Download(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Downloads data from device to host memory. Blocking calls.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Clone">
            <summary>
            returns deep copy of the matrix, i.e. the data is copied
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.CopyTo(OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            copies those matrix elements to "m"
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.CopyTo(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            copies those matrix elements to "m" that are marked with non-zero mask elements.
            </summary>
            <param name="m"></param>
            <param name="mask"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.ConvertTo(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.MatType,System.Double,System.Double)">
            <summary>
            converts matrix to another datatype with optional scalng. See cvConvertScale.
            </summary>
            <param name="dst"></param>
            <param name="rtype"></param>
            <param name="alpha"></param>
            <param name="beta"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.AssignTo(OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.AssignTo(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <param name="type"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.SetTo(OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            sets some of the matrix elements to s, according to the mask
            </summary>
            <param name="s"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Reshape(System.Int32,System.Int32)">
            <summary>
            creates alternative matrix header for the same data, with different
            number of channels and/or different number of rows. see cvReshape.
            </summary>
            <param name="cn"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Create(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            allocates new matrix data unless the matrix already has specified size and type.
            previous data is unreferenced if needed.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="type">Array type. </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Create(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            allocates new matrix data unless the matrix already has specified size and type.
            previous data is unreferenced if needed.
            </summary>
            <param name="size">2D array size: Size(cols, rows) </param>
            <param name="type">Array type. </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Swap(OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            swaps with other smart pointer
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.LocateROI(OpenCvSharp.CvSize@,OpenCvSharp.CvPoint@)">
            <summary>
            locates matrix header within a parent matrix.
            </summary>
            <param name="wholeSize"></param>
            <param name="ofs"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.AdjustROI(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            moves/resizes the current matrix ROI inside the parent matrix.
            </summary>
            <param name="dtop"></param>
            <param name="dbottom"></param>
            <param name="dleft"></param>
            <param name="dright"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Ptr(System.Int32)">
            <summary>
            returns pointer to y-th row
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.ToString">
            <summary>
            Returns a string that represents this Mat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Flags">
            <summary>
            includes several bit-fields: 
             1.the magic signature 
             2.continuity flag 
             3.depth 
             4.number of channels
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Rows">
            <summary>
            the number of rows
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Cols">
            <summary>
            the number of columns
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Height">
            <summary>
            the number of rows
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Width">
            <summary>
            the number of columns
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Data">
            <summary>
            pointer to the data
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.RefCount">
            <summary>
            pointer to the reference counter;
            when matrix points to user-allocated data, the pointer is NULL
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.DataStart">
            <summary>
            helper fields used in locateROI and adjustROI
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.DataEnd">
            <summary>
            helper fields used in locateROI and adjustROI
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Bpp">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Item(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            
            </summary>
            <param name="roi"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Item(OpenCvSharp.CPlusPlus.Range,OpenCvSharp.CPlusPlus.Range)">
            <summary>
            
            </summary>
            <param name="rowRange"></param>
            <param name="colRange"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a rectangular submatrix.
            </summary>
            <param name="rowStart">Start row of the extracted submatrix. The upper boundary is not included.</param>
            <param name="rowEnd">End row of the extracted submatrix. The upper boundary is not included.</param>
            <param name="colStart">Start column of the extracted submatrix. The upper boundary is not included.</param>
            <param name="colEnd">End column of the extracted submatrix. The upper boundary is not included.</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Col">
            <summary>
            Indexer to access GpuMat column
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Row">
            <summary>
            Indexer to access GpuMat row
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Indexer`1">
            <summary>
            GpuMat Indexer
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.GpuMatIndexer`1">
            <summary>
            Abstract definition of Mat indexer
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.GpuMatIndexer`1.parent">
            <summary>
            Parent matrix object
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.GpuMatIndexer`1.step">
            <summary>
            Step byte length for each dimension
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.GpuMatIndexer`1.sizeOfT">
            <summary>
            sizeof(T)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMatIndexer`1.#ctor(OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Constructor
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMatIndexer`1.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.Indexer`1.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.GpuMat.ColIndexer">
            <summary>
            Mat column's indexer object
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.GpuMatRowColIndexer">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.GpuMatRowColIndexer.parent">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMatRowColIndexer.#ctor(OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMatRowColIndexer.Get(System.Int32)">
            <summary>
            Creates a matrix header for the specified matrix row/column.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMatRowColIndexer.Get(System.Int32,System.Int32)">
            <summary>
            Creates a matrix header for the specified row/column span.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMatRowColIndexer.Get(OpenCvSharp.CPlusPlus.Range)">
            <summary>
            Creates a matrix header for the specified row/column span.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMatRowColIndexer.Set(System.Int32,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Creates/Sets a matrix header for the specified matrix row/column.
            </summary>
            <param name="pos"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMatRowColIndexer.Set(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Creates/Sets a matrix header for the specified row/column span.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMatRowColIndexer.Set(OpenCvSharp.CPlusPlus.Range,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Creates/Sets a matrix header for the specified row/column span.
            </summary>
            <param name="range"></param>
            <param name="value"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMatRowColIndexer.Item(System.Int32)">
            <summary>
            Creates/Sets a matrix header for the specified matrix row/column.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMatRowColIndexer.Item(System.Int32,System.Int32)">
            <summary>
            Creates/Sets a matrix header for the specified row/column span.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMatRowColIndexer.Item(OpenCvSharp.CPlusPlus.Range)">
            <summary>
            Creates/Sets a matrix header for the specified row/column span.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.ColIndexer.#ctor(OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.ColIndexer.Item(System.Int32)">
            <summary>
            Creates a matrix header for the specified matrix column.
            </summary>
            <param name="x">A 0-based column index.</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.ColIndexer.Item(System.Int32,System.Int32)">
            <summary>
            Creates a matrix header for the specified column span.
            </summary>
            <param name="startCol">An inclusive 0-based start index of the column span.</param>
            <param name="endCol">An exclusive 0-based ending index of the column span.</param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.GpuMat.RowIndexer">
            <summary>
            Mat row's indexer object
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.GpuMat.RowIndexer.#ctor(OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.RowIndexer.Item(System.Int32)">
            <summary>
            Creates a matrix header for the specified matrix column.
            </summary>
            <param name="x">A 0-based column index.</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.GpuMat.RowIndexer.Item(System.Int32,System.Int32)">
            <summary>
            Creates a matrix header for the specified column span.
            </summary>
            <param name="startCol">An inclusive 0-based start index of the column span.</param>
            <param name="endCol">An exclusive 0-based ending index of the column span.</param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor">
            <summary>
            HOG (Histogram-of-Oriented-Gradients) Descriptor and Object Detector
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.DefaultWinSigma">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.DefaultNlevels">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.DefaultPeopleDetector">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.svmDetector">
            <summary>
            setSVMDetector parameter vector
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.#ctor(System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Int32,System.Double,System.Double,System.Boolean,System.Int32)">
            <summary>
            
            </summary>
            <param name="winSize"></param>
            <param name="blockSize"></param>
            <param name="blockStride"></param>
            <param name="cellSize"></param>
            <param name="nbins"></param>
            <param name="winSigma"></param>
            <param name="thresholdL2Hys"></param>
            <param name="gammaCorrection"></param>
            <param name="nlevels"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.#ctor(System.IntPtr)">
            <summary>
            Initializes from pointer
            </summary>
            <param name="ptr">class HOGDescriptor*</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.GetDefaultPeopleDetector">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.SetSVMDetector(System.Single[])">
            <summary>
            
            </summary>
            <param name="svmdetector"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.GetDescriptorSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.Detect(OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.Detect(OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Double)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <param name="hitThreshold"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.Detect(OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Double,OpenCvSharp.CPlusPlus.Size)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <param name="hitThreshold"></param>
            <param name="winStride"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.Detect(OpenCvSharp.CPlusPlus.Gpu.GpuMat,System.Double,OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Size)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <param name="hitThreshold"></param>
            <param name="winStride"></param>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.DetectMultiScale(OpenCvSharp.CPlusPlus.Mat,System.Double,System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <param name="hitThreshold"></param>
            <param name="winStride"></param>
            <param name="padding"></param>
            <param name="scale"></param>
            <param name="groupThreshold"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.WinSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.BlockSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.BlockStride">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.CellSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.Nbins">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.WinSigma">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.ThresholdL2Hys">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.GammaCorrection">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.HOGDescriptor.NLevels">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.StereoBM_GPU">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.StereoBM_GPU.BASIC_PRESET">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.StereoBM_GPU.PREFILTER_XSOBEL">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.StereoBM_GPU.DEFAULT_NDISP">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.StereoBM_GPU.DEFAULT_WINSZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.StereoBM_GPU.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.StereoBM_GPU.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.StereoBM_GPU.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            StereoBM_GPU Constructor
            </summary>
            <param name="preset"></param>
            <param name="ndisparities"></param>
            <param name="winSize"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.StereoBM_GPU.Release">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.StereoBM_GPU.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.StereoBM_GPU.CheckIfGpuCallReasonable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.StereoBM_GPU.Run(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="disparity"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.StereoBM_GPU.Preset">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.StereoBM_GPU.Ndisp">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.StereoBM_GPU.WinSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.StereoBM_GPU.AvergeTexThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.FAST_GPU">
            <summary>
            Class used for corner detection using the FAST algorithm.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.FAST_GPU.FEATURE_SIZE">
            <summary>
            all features have same size
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.FAST_GPU.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.FAST_GPU.#ctor(System.Int32,System.Boolean,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="threshold">Threshold on difference between intensity of the central pixel and pixels on a circle around this pixel.</param>
            <param name="nonmaxSuppression">If it is true, non-maximum suppression is applied to detected corners (keypoints).</param>
            <param name="keypointsRatio">Inner buffer size for keypoints store is determined as (keypointsRatio * image_width * image_height).</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.FAST_GPU.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.FAST_GPU.Release">
            <summary>
            Releases inner buffer memory.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.FAST_GPU.Run(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Finds the keypoints using FAST detector.
            </summary>
            <param name="image">Image where keypoints (corners) are detected. 
            Only 8-bit grayscale images are supported.</param>
            <param name="mask">Optional input mask that marks the regions where we should detect features.</param>
            <param name="keypoints">The output vector of keypoints.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.FAST_GPU.Run(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.KeyPoint[]@)">
            <summary>
            Finds the keypoints using FAST detector.
            </summary>
            <param name="image">Image where keypoints (corners) are detected. 
            Only 8-bit grayscale images are supported.</param>
            <param name="mask">Optional input mask that marks the regions where we should detect features.</param>
            <param name="keypoints">The output vector of keypoints.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.FAST_GPU.DownloadKeypoints(OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Download keypoints from GPU to CPU memory.
            </summary>
            <param name="dKeypoints"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.FAST_GPU.ConvertKeypoints(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Converts keypoints from GPU representation to vector of KeyPoint.
            </summary>
            <param name="hKeypoints"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.FAST_GPU.CalcKeyPointsLocation(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Find keypoints and compute it’s response if nonmaxSuppression is true.
            </summary>
            <param name="image">Image where keypoints (corners) are detected. Only 8-bit grayscale images are supported.</param>
            <param name="mask">Optional input mask that marks the regions where we should detect features.</param>
            <returns>count of detected keypoints</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.FAST_GPU.GetKeyPoints(OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Gets final array of keypoints.
            Performs nonmax suppression if needed.
            </summary>
            <param name="keypoints"></param>
            <returns>Final count of keypoints</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.FAST_GPU.NonmaxSuppression">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.FAST_GPU.Threshold">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.FAST_GPU.KeypointsRatio">
            <summary>
            max keypoints = keypointsRatio * img.size().area()
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Gpu.ORB_GPU">
            <summary>
            Class for extracting ORB features and descriptors from an image.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.ORB_GPU.DEFAULT_FAST_THRESHOLD">
            <summary>
            all features have same size
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Gpu.ORB_GPU.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.ORB_GPU.#ctor(System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Gpu.ORB_GPU.ScoreType,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="nFeatures">The number of desired features.</param>
            <param name="scaleFactor">Coefficient by which we divide the dimensions from one scale pyramid level to the next.</param>
            <param name="nLevels">The number of levels in the scale pyramid.</param>
            <param name="edgeThreshold">How far from the boundary the points should be.</param>
            <param name="firstLevel">The level at which the image is given. If 1, that means we will also look at the image scaleFactor times bigger.</param>
            <param name="WTA_K"></param>
            <param name="scoreType"></param>
            <param name="patchSize"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.ORB_GPU.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.ORB_GPU.Release">
            <summary>
            Releases inner buffer memory.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.ORB_GPU.Run(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Detects keypoints and computes descriptors for them.
            </summary>
            <param name="image">Image where keypoints (corners) are detected. 
            Only 8-bit grayscale images are supported.</param>
            <param name="mask">Optional input mask that marks the regions where we should detect features.</param>
            <param name="keypoints">The output vector of keypoints.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.ORB_GPU.Run(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.KeyPoint[]@)">
            <summary>
            Detects keypoints and computes descriptors for them.
            </summary>
            <param name="image">Image where keypoints (corners) are detected. 
            Only 8-bit grayscale images are supported.</param>
            <param name="mask">Optional input mask that marks the regions where we should detect features.</param>
            <param name="keypoints">The output vector of keypoints.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.ORB_GPU.Run(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Detects keypoints and computes descriptors for them.
            </summary>
            <param name="image">Image where keypoints (corners) are detected. 
            Only 8-bit grayscale images are supported.</param>
            <param name="mask">Optional input mask that marks the regions where we should detect features.</param>
            <param name="keypoints">The output vector of keypoints.</param>
            <param name="descriptors"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.ORB_GPU.Run(OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.Gpu.GpuMat,OpenCvSharp.CPlusPlus.KeyPoint[]@,OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Detects keypoints and computes descriptors for them.
            </summary>
            <param name="image">Image where keypoints (corners) are detected. 
            Only 8-bit grayscale images are supported.</param>
            <param name="mask">Optional input mask that marks the regions where we should detect features.</param>
            <param name="keypoints">The output vector of keypoints.</param>
            <param name="descriptors"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.ORB_GPU.DownloadKeyPoints(OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Download keypoints from GPU to CPU memory.
            </summary>
            <param name="dKeypoints"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.ORB_GPU.ConvertKeyPoints(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Converts keypoints from GPU representation to vector of KeyPoint.
            </summary>
            <param name="hKeypoints"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Gpu.ORB_GPU.SetFastParams(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="threshold"></param>
            <param name="nonmaxSuppression"></param>
            <returns>Final count of keypoints</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.ORB_GPU.DescriptorSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Gpu.ORB_GPU.BlurForDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CLAHE">
            <summary>
            Contrast Limited Adaptive Histogram Equalization
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CLAHE.ptrObj">
            <summary>
            cv::Ptr&lt;CLAHE&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CLAHE.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CLAHE.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CLAHE.Create(System.Double,System.Nullable{OpenCvSharp.CPlusPlus.Size})">
            <summary>
            Creates a predefined CLAHE object
            </summary>
            <param name="clipLimit"></param>
            <param name="tileGridSize"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CLAHE.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CLAHE.Apply(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CLAHE.SetClipLimit(System.Double)">
            <summary>
            
            </summary>
            <param name="clipLimit"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CLAHE.GetClipLimit">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CLAHE.SetTilesGridSize(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            
            </summary>
            <param name="tileGridSize"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CLAHE.GetTilesGridSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CLAHE.CollectGarbage">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CLAHE.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CLAHE.ClipLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CLAHE.TilesGridSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvDTreeNode">
            <summary>
            Decision tree node
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeNode.#ctor(System.IntPtr)">
            <summary>
            Default constructor
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeNode.ClassIdx">
            <summary>
            The assigned to the node normalized class index (to 0..class_count-1 range), it is used internally in classification trees and tree ensembles. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeNode.Tn">
            <summary>
            The tree index in a ordered sequence of trees. The indices are used during and after the pruning procedure. 
            The root node has the maximum value Tn  of the whole tree, child nodes have Tn less than or equal to the parent's Tn, 
            and the nodes with Tn≤CvDTree::pruned_tree_idx are not taken into consideration at the prediction stage (the corresponding branches are considered as cut-off), 
            even if they have not been physically deleted from the tree at the pruning stage. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeNode.Value">
            <summary>
            When true, the inverse split rule is used (i.e. left and right branches are exchanged in the expressions below) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeNode.Parent">
            <summary>
            Pointers to the parent node
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeNode.Left">
            <summary>
            Pointers to the left node
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeNode.Right">
            <summary>
            Pointers to the right node
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeNode.Split">
            <summary>
            Pointer to the first (primary) split. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeNode.SampleCount">
            <summary>
            The number of samples that fall into the node at the training stage. 
            It is used to resolve the difficult cases - when the variable for the primary split is missing, 
            and all the variables for other surrogate splits are missing too,
            the sample is directed to the left if left-&lt;sample_count&lt;right-&lt;sample_count and to the right otherwise. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeNode.Depth">
            <summary>
            The node depth, the root node depth is 0, the child nodes depth is the parent's depth + 1. 
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvDTreeSplit">
            <summary>
            Decision tree node split
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeSplit.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeSplit.VarIdx">
            <summary>
            Index of the variable used in the split 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeSplit.Inversed">
            <summary>
            When true, the inverse split rule is used (i.e. left and right branches are exchanged in the expressions below) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeSplit.Quality">
            <summary>
            The split quality, a positive number. 
            It is used to choose the best primary split, then to choose and sort the surrogate splits. 
            After the tree is constructed, it is also used to compute variable importance.  
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeSplit.Next">
            <summary>
            Pointer to the next split in the node split list. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeSplit.Subset">
            <summary>
            Bit array indicating the value subset in case of split on a categorical variable.
            The rule is: if var_value in subset then next_node&lt;-left else next_node&lt;-right
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeSplit.OrdC">
            <summary>
            The threshold value in case of split on an ordered variable.
            The rule is: if var_value &lt; c then next_node&lt;-left else next_node&lt;-right
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeSplit.OrdSplitPoint">
            <summary>
            Used internally by the training algorithm. 
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvDTreeTrainData">
            <summary>
            Decision tree node
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvDTreeTrainData.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeTrainData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeTrainData.#ctor(System.IntPtr)">
            <summary>
            Initializes from pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeTrainData.#ctor(OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.DTreeDataLayout,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.CvDTreeParams,System.Boolean,System.Boolean)">
            <summary>
            Training constructor
            </summary>
            <param name="trainData"></param>
            <param name="tflag"></param>
            <param name="responses"></param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="varType"></param>
            <param name="missingMask"></param>
            <param name="param"></param>
            <param name="shared"></param>
            <param name="addLabels"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeTrainData.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeTrainData.SetData(OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.DTreeDataLayout,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.CvDTreeParams,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="trainData"></param>
            <param name="tflag"></param>
            <param name="responses"></param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="varType"></param>
            <param name="missingMask"></param>
            <param name="param"></param>
            <param name="shared"></param>
            <param name="addLabels"></param>
            <param name="updateData"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeTrainData.GetNumClasses">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeTrainData.GetVarType(System.Int32)">
            <summary>
            
            </summary>
            <param name="vi"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeTrainData.GetWorkVarCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeTrainData.GetClassLabels(OpenCvSharp.CPlusPlus.CvDTreeNode,System.Int32[])">
            <summary>
            
            </summary>
            <param name="n"></param>
            <param name="labelsBuf"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeTrainData.GetOrdResponses(OpenCvSharp.CPlusPlus.CvDTreeNode,System.Single[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="n"></param>
            <param name="valuesBuf"></param>
            <param name="sampleIndicesBuf"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeTrainData.GetLabels(OpenCvSharp.CPlusPlus.CvDTreeNode,System.Int32[])">
            <summary>
            
            </summary>
            <param name="n"></param>
            <param name="labelsBuf"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeTrainData.GetCatVarData(OpenCvSharp.CPlusPlus.CvDTreeNode,System.Int32,System.Int32[])">
            <summary>
            
            </summary>
            <param name="n"></param>
            <param name="vi"></param>
            <param name="catValuesBuf"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeTrainData.GetOrdVarData(OpenCvSharp.CPlusPlus.CvDTreeNode,System.Int32,System.Single[],System.Int32[],System.Single[][],System.Int32[][],System.Int32[])">
            <summary>
            
            </summary>
            <param name="n"></param>
            <param name="vi"></param>
            <param name="ordValuesBuf"></param>
            <param name="sortedIndicesBuf"></param>
            <param name="ordValues"></param>
            <param name="sortedIndices"></param>
            <param name="sampleIndicesBuf"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeTrainData.GetChildBufIdx(OpenCvSharp.CPlusPlus.CvDTreeNode)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.SampleCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.VarAll">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.VarCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.MaxCCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.OrdVarCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.CatVarCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.HaveLabels">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.HavePriors">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.IsClassifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.BufCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.BufSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.Shared">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.Rng">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.CatCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.CatOfs">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.CatMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.Counts">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.Buf">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.SplitBuf">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.VarIdx">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.VarType">
            <summary>
            i-th element =
            k&lt;0  - ordered, 
            k&gt;=0 - categorical, see k-th element of cat_* arrays
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeTrainData.Priors">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvMLData">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvMLData.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.ReadCsv(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.GetValues">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.GetResponses">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.GetMissing">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.GetResponseIdx">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.SetResponseIdx(System.Int32)">
            <summary>
            
            </summary>
            <param name="idx"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.GetTrainSampleIdx">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.GetTestSampleIdx">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.MixTrainAndTestIdx">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.SetTrainTestSplit(OpenCvSharp.CPlusPlus.CvTrainTestSplit)">
            <summary>
            
            </summary>
            <param name="spl"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.GetVarIdx">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.ChangeVarIdx(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="vi"></param>
            <param name="state"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.GetVarTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.GetVarType(System.Int32)">
            <summary>
            
            </summary>
            <param name="varIdx"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.SetVarTypes(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.ChangeVarType(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="varIdx"></param>
            <param name="type"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.SetDelimiter(System.Byte)">
            <summary>
            
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.GetDelimiter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.SetMissCh(System.Byte)">
            <summary>
            
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvMLData.GetMissCh">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvParamGrid">
            <summary>
            A grid for the SVM algorithm.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvParamGrid.MinVal">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvParamGrid.MaxVal">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvParamGrid.Step">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvParamGrid.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvParamGrid.Check">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvRTParams">
            <summary>
            Training Parameters of Random Trees
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvDTreeParams">
            <summary>
            Decision tree training parameters
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvDTreeParams.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeParams.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeParams.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeParams.#ctor(System.Int32,System.Int32,System.Single,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Single[])">
            <summary>
            Training constructor
            </summary>
            <param name="maxDepth">This parameter specifies the maximum possible depth of the tree. That is the training algorithms attempts to split a node while its depth is less than max_depth. The actual depth may be smaller if the other termination criteria are met (see the outline of the training procedure in the beginning of the section), and/or if the tree is pruned. </param>
            <param name="minSampleCount">A node is not split if the number of samples directed to the node is less than the parameter value. </param>
            <param name="regressionAccuracy">Another stop criteria - only for regression trees. As soon as the estimated node value differs from the node training samples responses by less than the parameter value, the node is not split further. </param>
            <param name="useSurrogates">If true, surrogate splits are built. Surrogate splits are needed to handle missing measurements and for variable importance estimation. </param>
            <param name="maxCategories">If a discrete variable, on which the training procedure tries to make a split, takes more than max_categories values, the precise best subset estimation may take a very long time (as the algorithm is exponential). Instead, many decision trees engines (including ML) try to find sub-optimal split in this case by clustering all the samples into max_categories clusters (i.e. some categories are merged together). Note that this technique is used only in N(>2)-class classification problems. In case of regression and 2-class classification the optimal split can be found efficiently without employing clustering, thus the parameter is not used in these cases. </param>
            <param name="cvFolds">If this parameter is >1, the tree is pruned using cv_folds-fold cross validation. </param>
            <param name="use1seRule">If true, the tree is truncated a bit more by the pruning procedure. That leads to compact, and more resistant to the training data noise, but a bit less accurate decision tree. </param>
            <param name="truncatePrunedTree">If true, the cut off nodes (with Tn≤CvDTree::pruned_tree_idx) are physically removed from the tree. Otherwise they are kept, and by decreasing CvDTree::pruned_tree_idx (e.g. setting it to -1) it is still possible to get the results from the original un-pruned (or pruned less aggressively) tree. </param>
            <param name="priors">The array of a priori class probabilities, sorted by the class label value. The parameter can be used to tune the decision tree preferences toward a certain class. For example, if users want to detect some rare anomaly occurrence, the training base will likely contain much more normal cases than anomalies, so a very good classification performance will be achieved just by considering every case as normal. To avoid this, the priors can be specified, where the anomaly probability is artificially increased (up to 0.5 or even greater), so the weight of the misclassified anomalies becomes much bigger, and the tree is adjusted properly. </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTreeParams.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeParams.MaxCategories">
            <summary>
            If a discrete variable, on which the training procedure tries to make a split, takes more than MaxCategories values, 
            the precise best subset estimation may take a very long time (as the algorithm is exponential). 
            Instead, many decision trees engines (including ML) try to find sub-optimal split in this case by clustering 
            all the samples into MaxCategories clusters (i.e. some categories are merged together).
            Note that this technique is used only in N(>2)-class classification problems. In case of regression and 2-class classification
            the optimal split can be found efficiently without employing clustering, thus the parameter is not used in these cases. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeParams.MaxDepth">
            <summary>
            This parameter specifies the maximum possible depth of the tree. That is the training algorithms attempts to split a node 
            while its depth is less than max_depth. The actual depth may be smaller if the other termination criteria are met
            (see the outline of the training procedure in the beginning of the section), and/or if the tree is pruned. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeParams.MinSampleCount">
            <summary>
            A node is not split if the number of samples directed to the node is less than the parameter value. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeParams.CvFolds">
            <summary>
            If this parameter is >1, the tree is pruned using cv_folds-fold cross validation. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeParams.UseSurrogates">
            <summary>
            If true, surrogate splits are built. Surrogate splits are needed to handle missing measurements and for variable importance estimation. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeParams.Use1seRule">
            <summary>
            If true, the tree is truncated a bit more by the pruning procedure. 
            That leads to compact, and more resistant to the training data noise, but a bit less accurate decision tree. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeParams.TruncatePrunedTree">
            <summary>
            If true, the cut off nodes (with Tn≤CvDTree::pruned_tree_idx) are physically removed from the tree. 
            Otherwise they are kept, and by decreasing CvDTree::PrunedTreeIdx (e.g. setting it to -1) 
            it is still possible to get the results from the original un-pruned (or pruned less aggressively) tree. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeParams.RegressionAccuracy">
            <summary>
            Another stop criteria - only for regression trees. As soon as the estimated node value differs 
            from the node training samples responses by less than the parameter value, the node is not split further. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvDTreeParams.Priors">
            <summary>
            The array of a priori class probabilities, sorted by the class label value. 
            The parameter can be used to tune the decision tree preferences toward a certain class. 
            For example, if users want to detect some rare anomaly occurrence, the training base will likely contain much more normal cases
            than anomalies, so a very good classification performance will be achieved just by considering every case as normal. 
            To avoid this, the priors can be specified, where the anomaly probability is artificially increased (up to 0.5 or even greater), 
            so the weight of the misclassified anomalies becomes much bigger, and the tree is adjusted properly. 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvRTParams.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTParams.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTParams.#ctor(System.Int32,System.Int32,System.Single,System.Boolean,System.Int32,System.Single[],System.Boolean,System.Int32,OpenCvSharp.CvTermCriteria)">
            <summary>
            Training constructor
            </summary>
            <param name="maxDepth">This parameter specifies the maximum possible depth of the tree. That is the training algorithms attempts to split a node while its depth is less than max_depth. The actual depth may be smaller if the other termination criteria are met (see the outline of the training procedure in the beginning of the section), and/or if the tree is pruned. </param>
            <param name="minSampleCount">A node is not split if the number of samples directed to the node is less than the parameter value. </param>
            <param name="regressionAccuracy">Another stop criteria - only for regression trees. As soon as the estimated node value differs from the node training samples responses by less than the parameter value, the node is not split further. </param>
            <param name="useSurrogates">If true, surrogate splits are built. Surrogate splits are needed to handle missing measurements and for variable importance estimation. </param>
            <param name="maxCategories">If a discrete variable, on which the training procedure tries to make a split, takes more than max_categories values, the precise best subset estimation may take a very long time (as the algorithm is exponential). Instead, many decision trees engines (including ML) try to find sub-optimal split in this case by clustering all the samples into max_categories clusters (i.e. some categories are merged together). Note that this technique is used only in N(>2)-class classification problems. In case of regression and 2-class classification the optimal split can be found efficiently without employing clustering, thus the parameter is not used in these cases. </param>
            <param name="priors">The array of a priori class probabilities, sorted by the class label value. The parameter can be used to tune the decision tree preferences toward a certain class. For example, if users want to detect some rare anomaly occurrence, the training base will likely contain much more normal cases than anomalies, so a very good classification performance will be achieved just by considering every case as normal. To avoid this, the priors can be specified, where the anomaly probability is artificially increased (up to 0.5 or even greater), so the weight of the misclassified anomalies becomes much bigger, and the tree is adjusted properly. </param>
            <param name="calcVarImportance">If it is set, then variable importance is computed by the training procedure. To retrieve the computed variable importance array, call the method CvRTrees::get_var_importance(). </param>
            <param name="nactiveVars">The number of variables that are randomly selected at each tree node and that are used to find the best split(s). </param>
            <param name="termCrit">Termination criteria for growing the forest: term_crit.max_iter is the maximum number of trees in the forest (see also max_tree_count parameter of the constructor, by default it is set to 50) term_crit.epsilon is the sufficient accuracy (OOB error). </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTParams.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvRTParams.CalcVarImportance">
            <summary>
            If it is set, then variable importance is computed by the training procedure. To retrieve the computed variable importance array, call the method CvRTrees::get_var_importance(). 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvRTParams.NactiveVars">
            <summary>
            The number of variables that are randomly selected at each tree node and that are used to find the best split(s). 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvRTParams.TermCrit">
            <summary>
            Termination criteria for growing the forest: 
            term_crit.max_iter is the maximum number of trees in the forest (see also max_tree_count parameter of the constructor, by default it is set to 50)
            term_crit.epsilon is the sufficient accuracy (OOB error). 
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvSVMParams">
            <summary>
            SVM training parameters
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVMParams.#ctor(OpenCvSharp.CPlusPlus.WCvSVMParams)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVMParams.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVMParams.#ctor(OpenCvSharp.CPlusPlus.SVMType,OpenCvSharp.CPlusPlus.SVMKernelType,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,OpenCvSharp.CvMat,OpenCvSharp.CvTermCriteria)">
            <summary>
            Constructor
            </summary>
            <param name="svmType">Type of SVM</param>
            <param name="kernelType">The kernel type</param>
            <param name="degree">for poly</param>
            <param name="gamma">for poly/rbf/sigmoid</param>
            <param name="coef0">for poly/sigmoid</param>
            <param name="c">for SVMType.CSvc, SVMType.EpsSvr and SVMType.NuSvr</param>
            <param name="nu">for SVMType.NuSvc, SVMType.OneClass and SVMType.NuSvr</param>
            <param name="p">for SVMType.EpsSvr</param>
            <param name="classWeights">for SVMType.CSvc</param>
            <param name="termCrit">Termination criteria</param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvSVMParams.NativeStruct">
            <summary>
            Native struct
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvSVMParams.SVMType">
            <summary>
            Type of SVM
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvSVMParams.KernelType">
            <summary>
            The kernel type
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvSVMParams.Degree">
            <summary>
            for poly
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvSVMParams.Gamma">
            <summary>
            for poly/rbf/sigmoid
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvSVMParams.Coef0">
            <summary>
            for poly/sigmoid
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvSVMParams.C">
            <summary>
            for SVMType.CSvc, SVMType.EpsSvr and SVMType.NuSvr
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvSVMParams.Nu">
            <summary>
            for SVMType.NuSvc, SVMType.OneClass and SVMType.NuSvr
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvSVMParams.P">
            <summary>
            for SVMType.EpsSvr
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvSVMParams.ClassWeights">
            <summary>
            for SVMType.CSvc
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvSVMParams.TermCrit">
            <summary>
            Termination criteria
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvTrainTestSplit">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvTrainTestSplit.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvTrainTestSplit.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvTrainTestSplit.#ctor(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="trainSampleCount"></param>
            <param name="mix"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvTrainTestSplit.#ctor(System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="trainSamplePortion"></param>
            <param name="mix"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvTrainTestSplit.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvTrainTestSplit.TrainSamplePartCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvTrainTestSplit.TrainSamplePartPortion">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvTrainTestSplit.TrainSamplePartMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvTrainTestSplit.Mix">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvBoost">
            <summary>
            Boosted tree classifier
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvStatModel">
            <summary>
            Base class for statistical models in ML
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvStatModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvStatModel.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvStatModel.Clear">
            <summary>
            Deallocates memory and resets the model state
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvStatModel.Save(System.String)">
            <summary>
            Saves the model to file
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvStatModel.Save(System.String,System.String)">
            <summary>
            Saves the model to file
            </summary>
            <param name="filename"></param>
            <param name="name"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvStatModel.Load(System.String)">
            <summary>
            Loads the model from file
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvStatModel.Load(System.String,System.String)">
            <summary>
            Loads the model from file
            </summary>
            <param name="filename"></param>
            <param name="name"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvStatModel.Write(OpenCvSharp.CvFileStorage,System.String)">
            <summary>
            Writes the model to file storage
            </summary>
            <param name="storage"></param>
            <param name="name"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvStatModel.Read(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode)">
            <summary>
            Reads the model from file storage
            </summary>
            <param name="storage"></param>
            <param name="node"></param>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvBoost.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoost.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoost.#ctor(OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.DTreeDataLayout,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.CvBoostParams)">
            <summary>
            Training constructor
            </summary>
            <param name="trainData"></param>
            <param name="tflag"></param>
            <param name="responses"></param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="varType"></param>
            <param name="missingMask"></param>
            <param name="param"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoost.#ctor(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.DTreeDataLayout,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.CvBoostParams)">
            <summary>
            Training constructor
            </summary>
            <param name="trainData"></param>
            <param name="tflag"></param>
            <param name="responses"></param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="varType"></param>
            <param name="missingMask"></param>
            <param name="param"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoost.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoost.Train(OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.DTreeDataLayout,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.CvBoostParams,System.Boolean)">
            <summary>
            Trains boosted tree classifier
            </summary>
            <param name="trainData"></param>
            <param name="tflag"></param>
            <param name="responses"></param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="varType"></param>
            <param name="missingMask"></param>
            <param name="param"></param>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoost.Train(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.DTreeDataLayout,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.CvBoostParams,System.Boolean)">
            <summary>
            Trains boosted tree classifier
            </summary>
            <param name="trainData"></param>
            <param name="tflag"></param>
            <param name="responses"></param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="varType"></param>
            <param name="missingMask"></param>
            <param name="param"></param>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoost.Predict(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Nullable{OpenCvSharp.CvSlice},System.Boolean,System.Boolean)">
            <summary>
            Predicts response for the input sample
            </summary>
            <param name="sample">The input sample. </param>
            <param name="missing">The optional mask of missing measurements. To handle missing measurements, the weak classifiers must include surrogate splits. </param>
            <param name="weakResponses">The optional output parameter, a floating-point vector, of responses from each individual weak classifier. The number of elements in the vector must be equal to the slice length. </param>
            <param name="slice">The continuous subset of the sequence of weak classifiers to be used for prediction. By default, all the weak classifiers are used. </param>
            <param name="rawMode">The last parameter is normally set to false that implies a regular input. If it is true, the method assumes that all the values of the discrete input variables have been already normalized to 0..&lt;num_of_categoriesi&gt;-1 ranges. (as the decision tree uses such normalized representation internally). It is useful for faster prediction with tree ensembles. For ordered input variables the flag is not used. </param>
            <param name="returnSum"></param>
            <returns>the output class label based on the weighted voting. </returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoost.Predict(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,System.Nullable{OpenCvSharp.CPlusPlus.Range},System.Boolean,System.Boolean)">
            <summary>
            Predicts response for the input sample
            </summary>
            <param name="sample">The input sample. </param>
            <param name="missing">The optional mask of missing measurements. To handle missing measurements, the weak classifiers must include surrogate splits. </param>
            <param name="slice">The continuous subset of the sequence of weak classifiers to be used for prediction. By default, all the weak classifiers are used. </param>
            <param name="rawMode">The last parameter is normally set to false that implies a regular input. If it is true, the method assumes that all the values of the discrete input variables have been already normalized to 0..&lt;num_of_categoriesi&gt;-1 ranges. (as the decision tree uses such normalized representation internally). It is useful for faster prediction with tree ensembles. For ordered input variables the flag is not used. </param>
            <param name="returnSum"></param>
            <returns>the output class label based on the weighted voting. </returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoost.Prune(OpenCvSharp.CPlusPlus.Range)">
            <summary>
            Removes specified weak classifiers
            </summary>
            <param name="slice"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoost.GetWeights">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoost.GetSubtreeWeights">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoost.GetWeakResponse">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoost.GetParams">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoost.GetWeakPredictors">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoost.Clear">
            <summary>
            Deallocates memory and resets the model state
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoost.Write(OpenCvSharp.CvFileStorage,System.String)">
            <summary>
            Writes the model to file storage
            </summary>
            <param name="storage"></param>
            <param name="name"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoost.Read(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode)">
            <summary>
            Reads the model from file storage
            </summary>
            <param name="storage"></param>
            <param name="node"></param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvBoostParams">
            <summary>
            Boosting training parameters
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvBoostParams.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoostParams.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
            <param name="isEnabledDispose"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoostParams.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoostParams.#ctor(OpenCvSharp.CPlusPlus.BoostType,System.Int32,System.Double,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Training constructor
            </summary>
            <param name="boostType">Boosting type</param>
            <param name="weakCount">The number of weak classifiers to build. </param>
            <param name="weightTrimRate">he weight trimming ratio, within 0..1. If the parameter is ≤0 or >1, the trimming is not used, all the samples are used at each iteration. The default value is 0.95. </param>
            <param name="maxDepth">This parameter specifies the maximum possible depth of the tree. That is the training algorithms attempts to split a node while its depth is less than max_depth. The actual depth may be smaller if the other termination criteria are met (see the outline of the training procedure in the beginning of the section), and/or if the tree is pruned. </param>
            <param name="useSurrogates">If true, surrogate splits are built. Surrogate splits are needed to handle missing measurements and for variable importance estimation. </param>
            <param name="priors">The array of a priori class probabilities, sorted by the class label value. The parameter can be used to tune the decision tree preferences toward a certain class. For example, if users want to detect some rare anomaly occurrence, the training base will likely contain much more normal cases than anomalies, so a very good classification performance will be achieved just by considering every case as normal. To avoid this, the priors can be specified, where the anomaly probability is artificially increased (up to 0.5 or even greater), so the weight of the misclassified anomalies becomes much bigger, and the tree is adjusted properly. </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoostParams.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvBoostParams.BoostType">
            <summary>
            Boosting type
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvBoostParams.WeakCount">
            <summary>
            The number of weak classifiers to build. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvBoostParams.SplitCriteria">
            <summary>
            Splitting criteria, used to choose optimal splits during a weak tree construction
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvBoostParams.WeightTrimRate">
            <summary>
            The weight trimming ratio, within 0..1. 
            If the parameter is ≤0 or >1, the trimming is not used, 
            all the samples are used at each iteration. The default value is 0.95. 
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvBoostTree">
            <summary>
            Weak tree classifier
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvDTree">
            <summary>
            Decision tree
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvDTree.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.#ctor(System.IntPtr)">
            <summary>
            Initializes by pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.Train(OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.DTreeDataLayout,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.CvDTreeParams)">
            <summary>
            Trains decision tree
            </summary>
            <param name="trainData"></param>
            <param name="tflag"></param>
            <param name="responses"></param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="varType"></param>
            <param name="missingMask"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.Train(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.DTreeDataLayout,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.CvDTreeParams)">
            <summary>
            Trains decision tree
            </summary>
            <param name="trainData"></param>
            <param name="tflag"></param>
            <param name="responses"></param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="varType"></param>
            <param name="missingMask"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.Train(OpenCvSharp.CPlusPlus.CvDTreeTrainData,OpenCvSharp.CvMat)">
            <summary>
            Trains decision tree
            </summary>
            <param name="trainData"></param>
            <param name="subsampleIdx"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.Train(OpenCvSharp.CPlusPlus.CvMLData,OpenCvSharp.CPlusPlus.CvDTreeParams)">
            <summary>
            Trains decision tree
            </summary>
            <param name="trainData"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.Predict(OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            Returns the leaf node of decision tree corresponding to the input vector
            </summary>
            <param name="sample"></param>
            <param name="missingDataMask"></param>
            <param name="preprocessedInput"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.Predict(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,System.Boolean)">
            <summary>
            Returns the leaf node of decision tree corresponding to the input vector
            </summary>
            <param name="sample"></param>
            <param name="missingDataMask"></param>
            <param name="preprocessedInput"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.GetVarImportance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.GetRoot">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.GetPrunedTreeIdx">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.GetData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.Read(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode)">
            <summary>
            Reads the model from file storage
            </summary>
            <param name="fs"></param>
            <param name="node"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.Read(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,OpenCvSharp.CPlusPlus.CvDTreeTrainData)">
            <summary>
            Reads the model from file storage
            </summary>
            <param name="fs"></param>
            <param name="node"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.Write(OpenCvSharp.CvFileStorage)">
            <summary>
            Writes the model to file storage
            </summary>
            <param name="fs"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.Write(OpenCvSharp.CvFileStorage,System.String)">
            <summary>
            Writes the model to file storage
            </summary>
            <param name="fs"></param>
            <param name="name"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvDTree.Clear">
            <summary>
            Deallocates memory and resets the model state
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvBoostTree.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoostTree.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoostTree.#ctor(System.IntPtr)">
            <summary>
            Initializes by pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoostTree.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoostTree.Train(OpenCvSharp.CPlusPlus.CvDTreeTrainData,OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.CvBoost)">
            <summary>
            Trains decision tree
            </summary>
            <param name="trainData"></param>
            <param name="subsampleIdx"></param>
            <param name="ensemble"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoostTree.Scale(System.Double)">
            <summary>
            
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoostTree.Read(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,OpenCvSharp.CPlusPlus.CvBoost,OpenCvSharp.CPlusPlus.CvDTreeTrainData)">
            <summary>
            
            </summary>
            <param name="fs"></param>		
            <param name="node"></param>
            <param name="ensemble"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvBoostTree.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvERTrees">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvRTrees">
            <summary>
            Random Trees
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvRTrees.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.#ctor(System.IntPtr)">
            <summary>
            Initializes by pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.Train(OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.DTreeDataLayout,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.CvRTParams)">
            <summary>
            Trains Random Trees model
            </summary>
            <param name="trainData"></param>
            <param name="tflag"></param>
            <param name="responses"></param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="varType"></param>
            <param name="missingMask"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.Train(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.DTreeDataLayout,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.CvRTParams)">
            <summary>
            Trains Random Trees model
            </summary>
            <param name="trainData"></param>
            <param name="tflag"></param>
            <param name="responses"></param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="varType"></param>
            <param name="missingMask"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.Predict(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Predicts the output for the input sample
            </summary>
            <param name="sample"></param>
            <param name="missing"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.Predict(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Predicts the output for the input sample
            </summary>
            <param name="sample"></param>
            <param name="missing"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.PredictProb(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Predicts the output for the input sample
            </summary>
            <param name="sample"></param>
            <param name="missing"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.PredictProb(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Predicts the output for the input sample
            </summary>
            <param name="sample"></param>
            <param name="missing"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.GetVarImportance">
            <summary>
            Retrieves the variable importance array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.GetProximity(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Retrieves proximity measure between two training samples
            </summary>
            <param name="sample1"></param>
            <param name="sample2"></param>
            <param name="missing1"></param>
            <param name="missing2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.GetActiveVarMask">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.GetRng">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.GetTreeCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.GetTree(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.Clear">
            <summary>
            Deallocates memory and resets the model state
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.Write(OpenCvSharp.CvFileStorage,System.String)">
            <summary>
            Writes the model to file storage
            </summary>
            <param name="storage"></param>
            <param name="name"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvRTrees.Read(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode)">
            <summary>
            Reads the model from file storage
            </summary>
            <param name="fs"></param>
            <param name="node"></param>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvERTrees.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvERTrees.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvERTrees.#ctor(System.IntPtr)">
            <summary>
            Initializes by pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvERTrees.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvERTrees.Train(OpenCvSharp.CvMat,System.Int32,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.CvRTParams)">
            <summary>
            
            </summary>
            <param name="trainData"></param>
            <param name="tflag"></param>
            <param name="responses"></param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="varType"></param>
            <param name="missingMask"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvERTrees.Train(OpenCvSharp.CPlusPlus.CvMLData)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvERTrees.Train(OpenCvSharp.CPlusPlus.CvMLData,OpenCvSharp.CPlusPlus.CvRTParams)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvERTrees.GrowForest(OpenCvSharp.CvTermCriteria)">
            <summary>
            
            </summary>
            <param name="termCrit"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvForestTree">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvForestTree.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvForestTree.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvForestTree.#ctor(System.IntPtr)">
            <summary>
            Initializes by pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvForestTree.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvForestTree.Train(OpenCvSharp.CPlusPlus.CvDTreeTrainData,OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.CvRTrees)">
            <summary>
            
            </summary>
            <param name="trainData"></param>
            <param name="subsampleIdx"></param>
            <param name="forest"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvForestTree.GetVarCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvForestTree.Read(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,OpenCvSharp.CPlusPlus.CvRTrees,OpenCvSharp.CPlusPlus.CvDTreeTrainData)">
            <summary>
            
            </summary>
            <param name="fs"></param>
            <param name="node"></param>
            <param name="forest"></param>
            <param name="data"></param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvNormalBayesClassifier">
            <summary>
            Bayes classifier for normally distributed data
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvNormalBayesClassifier.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvNormalBayesClassifier.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvNormalBayesClassifier.#ctor(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Bayes classifier for normally distributed data
            </summary>
            <param name="trainData">Known samples (m*n)</param>
            <param name="responses">Classes for known samples (m*1)</param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvNormalBayesClassifier.#ctor(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Bayes classifier for normally distributed data
            </summary>
            <param name="trainData">Known samples (m*n)</param>
            <param name="responses">Classes for known samples (m*1)</param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvNormalBayesClassifier.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvNormalBayesClassifier.Train(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            Trains the model
            </summary>
            <param name="trainData">Known samples (m*n)</param>
            <param name="responses">Classes for known samples (m*1)</param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="update">Adds known samples to model(true) or makes a new one(false)</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvNormalBayesClassifier.Train(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,System.Boolean)">
            <summary>
            Trains the model
            </summary>
            <param name="trainData">Known samples (m*n)</param>
            <param name="responses">Classes for known samples (m*1)</param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="update">Adds known samples to model(true) or makes a new one(false)</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvNormalBayesClassifier.Predict(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Predicts the response for sample(s)
            </summary>
            <param name="sample">Unkown samples (l*n)</param>
            <param name="results">Classes for known samples (l*1)</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvNormalBayesClassifier.Predict(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Predicts the response for sample(s)
            </summary>
            <param name="sample">Unkown samples (l*n)</param>
            <param name="results">Classes for known samples (l*1)</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvNormalBayesClassifier.Clear">
            <summary>
            Deallocates memory and resets the model state
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvNormalBayesClassifier.Write(OpenCvSharp.CvFileStorage,System.String)">
            <summary>
            Writes the model to file storage
            </summary>
            <param name="storage"></param>
            <param name="name"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvNormalBayesClassifier.Read(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode)">
            <summary>
            Reads the model from file storage
            </summary>
            <param name="storage"></param>
            <param name="node"></param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.EM">
            <summary>
            EM model (cv::EM)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.EM.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EM.#ctor(System.Int32,OpenCvSharp.CPlusPlus.EMCovMatType,System.Nullable{OpenCvSharp.CPlusPlus.TermCriteria})">
            <summary>
            Training constructor
            </summary>
            <param name="nClusters"></param>
            <param name="covMatType"></param>
            <param name="termCrit"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EM.#ctor(OpenCvSharp.CPlusPlus.Ptr{OpenCvSharp.CPlusPlus.EM})">
            <summary>
            Creates instance by cv::Ptr&lt;cv::SURF&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EM.#ctor(System.IntPtr)">
            <summary>
            Creates instance by raw pointer cv::SURF*
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EM.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EM.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EM.Train(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Estimates Gaussian mixture parameters from the sample set
            </summary>
            <param name="samples"></param>
            <param name="logLikelihoods"></param>
            <param name="labels"></param>
            <param name="probs"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EM.TrainE(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Estimates Gaussian mixture parameters from the sample set
            </summary>
            <param name="samples"></param>
            <param name="means0"></param>
            <param name="covs0"></param>
            <param name="weights0"></param>
            <param name="logLikelihoods"></param>
            <param name="labels"></param>
            <param name="probs"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EM.TrainM(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Estimates Gaussian mixture parameters from the sample set
            </summary>
            <param name="samples"></param>
            <param name="probs0"></param>
            <param name="logLikelihoods"></param>
            <param name="labels"></param>
            <param name="probs"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EM.Predict(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Predicts the response for sample
            </summary>
            <param name="sample"></param>
            <param name="probs"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.EM.Clear">
            <summary>
            Deallocates memory and resets the model state
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.EM.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.EM.IsTrained">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvKNearest">
            <summary>
            K nearest neighbors classifier
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvKNearest.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvKNearest.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvKNearest.#ctor(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Boolean,System.Int32)">
            <summary>
            Training constructor
            </summary>
            <param name="trainData">Known samples (m*n)</param>
            <param name="responses">Classes for known samples (m*1)</param>
            <param name="sampleIdx"></param>
            <param name="isRegression"></param>
            <param name="maxK">Maximum number of neighbors to return</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvKNearest.#ctor(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,System.Boolean,System.Int32)">
            <summary>
            Training constructor
            </summary>
            <param name="trainData">Known samples (m*n)</param>
            <param name="responses">Classes for known samples (m*1)</param>
            <param name="sampleIdx"></param>
            <param name="isRegression"></param>
            <param name="maxK">Maximum number of neighbors to return</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvKNearest.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvKNearest.Train(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Trains the model
            </summary>
            <param name="trainData">Known samples (m*n)</param>
            <param name="responses">Classes for known samples (m*1)</param>
            <param name="sampleIdx"></param>
            <param name="isRegression"></param>
            <param name="maxK">Maximum number of neighbors to return</param>
            <param name="updateBase">Adds known samples to model(true) or makes a new one(false)</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvKNearest.Train(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Trains the model
            </summary>
            <param name="trainData">Known samples (m*n)</param>
            <param name="responses">Classes for known samples (m*1)</param>
            <param name="sampleIdx"></param>
            <param name="isRegression"></param>
            <param name="maxK">Maximum number of neighbors to return</param>
            <param name="updateBase">Adds known samples to model(true) or makes a new one(false)</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvKNearest.FindNearest(OpenCvSharp.CvMat,System.Int32,OpenCvSharp.CvMat,System.Single[][],OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Finds the K nearest neighbors of samples
            </summary>
            <param name="samples">Known samples (l*n)</param>
            <param name="k">max neighbors to find</param>
            <param name="results"></param>
            <param name="neighbors"></param>
            <param name="neighborResponses">Neighbors for each samples (l*k)</param>
            <param name="dist">Distance from each sample to neighbors</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvKNearest.FindNearest(OpenCvSharp.CPlusPlus.Mat,System.Int32,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Finds the K nearest neighbors of samples
            </summary>
            <param name="samples">Known samples (l*n)</param>
            <param name="k">max neighbors to find</param>
            <param name="results"></param>
            <param name="neighborResponses">Neighbors for each samples (l*k)</param>
            <param name="dists">Distance from each sample to neighbors</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvKNearest.GetMaxK">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvKNearest.GetVarCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvKNearest.GetSampleCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvKNearest.IsRegression">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvKNearest.Clear">
            <summary>
            Deallocates memory and resets the model state
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvSVM">
            <summary>
            Support Vector Machines
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvSVM.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.#ctor(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.CvSVMParams)">
            <summary>
            Training constructor
            </summary>
            <param name="trainData"></param>
            <param name="responses"></param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="param"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.#ctor(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.CvSVMParams)">
            <summary>
            Training constructor
            </summary>
            <param name="trainData"></param>
            <param name="responses"></param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="param"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.GetDefaultGrid(OpenCvSharp.CPlusPlus.SVMParamType)">
            <summary>
            Generates a grid for SVM parameters
            </summary>
            <param name="paramId"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.GetSupportVectorCount">
            <summary>
            Retrieves the number of support vectors
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.GetSupportVector(System.Int32)">
            <summary>
            Retrieves the particular vector
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.GetParams">
            <summary>
            Returns current SVM parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.GetVarCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.Train(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.CvSVMParams)">
            <summary>
            Trains SVM
            </summary>
            <param name="trainData"></param>
            <param name="responses"></param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="param"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.Train(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.CvSVMParams)">
            <summary>
            Trains SVM
            </summary>
            <param name="trainData"></param>
            <param name="responses"></param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="param"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.TrainAuto(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.CvSVMParams,System.Int32,System.Nullable{OpenCvSharp.CPlusPlus.CvParamGrid},System.Nullable{OpenCvSharp.CPlusPlus.CvParamGrid},System.Nullable{OpenCvSharp.CPlusPlus.CvParamGrid},System.Nullable{OpenCvSharp.CPlusPlus.CvParamGrid},System.Nullable{OpenCvSharp.CPlusPlus.CvParamGrid},System.Nullable{OpenCvSharp.CPlusPlus.CvParamGrid},System.Boolean)">
            <summary>
            Trains SVM with optimal parameters
            </summary>
            <param name="trainData"></param>
            <param name="responses"></param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="param"></param>
            <param name="kFold">Cross-validation parameter. The training set is divided into k_fold subsets, one subset being used to train the model, the others forming the test set. So, the SVM algorithm is executed k_fold times. </param>
            <param name="cGrid"></param>
            <param name="gammaGrid"></param>
            <param name="pGrid"></param>
            <param name="nuGrid"></param>
            <param name="coefGrid"></param>
            <param name="degreeGrid"></param>
            <param name="balanced"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.TrainAuto(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.CvSVMParams,System.Int32,System.Nullable{OpenCvSharp.CPlusPlus.CvParamGrid},System.Nullable{OpenCvSharp.CPlusPlus.CvParamGrid},System.Nullable{OpenCvSharp.CPlusPlus.CvParamGrid},System.Nullable{OpenCvSharp.CPlusPlus.CvParamGrid},System.Nullable{OpenCvSharp.CPlusPlus.CvParamGrid},System.Nullable{OpenCvSharp.CPlusPlus.CvParamGrid},System.Boolean)">
            <summary>
            Trains SVM with optimal parameters
            </summary>
            <param name="trainData"></param>
            <param name="responses"></param>
            <param name="varIdx"></param>
            <param name="sampleIdx"></param>
            <param name="param"></param>
            <param name="kFold">Cross-validation parameter. The training set is divided into k_fold subsets, one subset being used to train the model, the others forming the test set. So, the SVM algorithm is executed k_fold times. </param>
            <param name="cGrid"></param>
            <param name="gammaGrid"></param>
            <param name="pGrid"></param>
            <param name="nuGrid"></param>
            <param name="coefGrid"></param>
            <param name="degreeGrid"></param>
            <param name="balanced"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.Predict(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            Predicts the response for sample
            </summary>
            <param name="sample"></param>
            <param name="returnDfVal"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.Predict(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Predicts the response for sample
            </summary>
            <param name="sample"></param>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.Predict(OpenCvSharp.CPlusPlus.Mat,System.Boolean)">
            <summary>
            Predicts the response for sample
            </summary>
            <param name="sample"></param>
            <param name="returnDfVal"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.Predict(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Predicts the response for sample
            </summary>
            <param name="sample"></param>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.Clear">
            <summary>
            Deallocates memory and resets the model state
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.Write(OpenCvSharp.CvFileStorage,System.String)">
            <summary>
            Writes the model to file storage
            </summary>
            <param name="storage"></param>
            <param name="name"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvSVM.Read(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode)">
            <summary>
            Reads the model from file storage
            </summary>
            <param name="storage"></param>
            <param name="node"></param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.BoostSplitCriteria">
            <summary>
            Splitting criteria, used to choose optimal splits during a weak tree construction
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.BoostSplitCriteria.Default">
            <summary>
            Use the default criteria for the particular boosting method.
            [CvBoost::DEFAULT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.BoostSplitCriteria.Gini">
            <summary>
            Use Gini index. This is default option for Real AdaBoost; may be also used for Discrete AdaBoost.
            [CvBoost::GINI]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.BoostSplitCriteria.Misclass">
            <summary>
            Use misclassification rate. This is default option for Discrete AdaBoost; may be also used for Real AdaBoost.
            [CvBoost::MISCLASS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.BoostSplitCriteria.Sqerr">
            <summary>
            Use least squares criteria. This is default and the only option for LogitBoost and Gentle AdaBoost.最小二乗基準を用いる．
            [CvBoost::SQERR]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.BoostType">
            <summary>
            Data layout of decision tree
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.BoostType.Discrete">
            <summary>
            Discrete AdaBoost
            [CvBoost::DISCRETE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.BoostType.Real">
            <summary>
            Real AdaBoost
            [CvBoost::REAL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.BoostType.Logit">
            <summary>
            LogitBoost
            [CvBoost::LOGIT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.BoostType.Gentle">
            <summary>
            Gentle AdaBoost
            [CvBoost::GENTLE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.DTreeDataLayout">
            <summary>
            Data layout of decision tree
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DTreeDataLayout.RowSample">
            <summary>
            
            [CV_ROW_SAMPLE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DTreeDataLayout.ColSample">
            <summary>
            
            [CV_COL_SAMPLE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.EMCovMatType">
            <summary>
            The type of the mixture covariation matrices
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.EMCovMatType.Spherical">
            <summary>
            A covariation matrix of each mixture is a scaled identity matrix, μk*I, 
            so the only parameter to be estimated is μk. The option may be used in special cases, 
            when the constraint is relevant, or as a first step in the optimization 
            (e.g. in case when the data is preprocessed with PCA). The results of such preliminary estimation 
            may be passed again to the optimization procedure, this time with cov_mat_type=Diagonal. 
            [CvEM::COV_MAT_SPHERICAL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.EMCovMatType.Diagonal">
            <summary>
            A covariation matrix of each mixture may be arbitrary diagonal matrix with positive diagonal elements, 
            that is, non-diagonal elements are forced to be 0's, so the number of free parameters is d for each matrix. 
            This is most commonly used option yielding good estimation results.
            [CvEM::COV_MAT_DIAGONAL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.EMCovMatType.Generic">
            <summary>
            A covariation matrix of each mixture may be arbitrary symmetrical positively defined matrix, 
            so the number of free parameters in each matrix is about d^2/2. 
            It is not recommended to use this option, unless there is pretty accurate 
            initial estimation of the parameters and/or a huge number of training samples.
            [CvEM::COV_MAT_GENERIC]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.EMStartStep">
            <summary>
            The initial step the algorithm starts from
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.EMStartStep.E">
            <summary>
            The algorithm starts with E-step. 
            At least, the initial values of mean vectors, CvEMParams.Means must be passed. 
            Optionally, the user may also provide initial values for weights (CvEMParams.Weights) 
            and/or covariation matrices (CvEMParams.Covs).
            [CvEM::START_E_STEP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.EMStartStep.M">
            <summary>
            The algorithm starts with M-step. The initial probabilities p_i,k must be provided.
            [CvEM::START_M_STEP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.EMStartStep.Auto">
            <summary>
            No values are required from the user, k-means algorithm is used to estimate initial mixtures parameters. 
            [CvEM::START_AUTO_STEP]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MLPActivationFunc">
            <summary>
            Splitting criteria, used to choose optimal splits during a weak tree construction
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MLPActivationFunc.Identity">
            <summary>
            
            [CvANN_MLP::IDENTITY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MLPActivationFunc.SigmoidSym">
            <summary>
            U
            [CvANN_MLP::SIGMOID_SYM]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MLPActivationFunc.Gaussian">
            <summary>
            
            [CvANN_MLP::GAUSSIAN]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MLPTrainingFlag">
            <summary>
            The MLP training algorithm to use
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MLPTrainingFlag.Zero">
            <summary>
            No flags
            [0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MLPTrainingFlag.UpdateWeights">
            <summary>
            1 - algorithm updates the network weights, rather than computes them from scratch 
            (in the latter case the weights are initialized using Nguyen-Widrow algorithm).
            [CvANN_MLP::UPDATE_WEIGHTS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MLPTrainingFlag.NoInputScale">
            <summary>
            algorithm does not normalize the input vectors. 
            If this flag is not set, the training algorithm normalizes each input feature independently, 
            shifting its mean value to 0 and making the standard deviation =1. If the network is assumed to be updated frequently, 
            the new training data could be much different from original one. In this case user should take care of proper normalization.
            [CvANN_MLP::NO_INPUT_SCALE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MLPTrainingFlag.NoOutputScale">
            <summary>
            algorithm does not normalize the output vectors. 
            If the flag is not set, the training algorithm normalizes each output features independently, 
            by transforming it to the certain range depending on the activation function used.
            [CvANN_MLP::NO_OUTPUT_SCALE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MLPTrainingMethod">
            <summary>
            The MLP training algorithm to use
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MLPTrainingMethod.BACKPROP">
            <summary>
            sequential backpropagation algorithm
            [CvANN_MLP_TrainParams::BACKPROP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MLPTrainingMethod.RPROP">
            <summary>
            RPROP algorithm, default value
            [CvANN_MLP_TrainParams::RPROP]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.SVMKernelType">
            <summary>
            The kernel type of SVM
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SVMKernelType.Linear">
            <summary>
            no mapping is done, linear discrimination (or regression) is done in the original feature space. It is the fastest option. d(x,y) = x•y == (x,y) 
            [CvSVM::LINEAR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SVMKernelType.Poly">
            <summary>
            polynomial kernel: d(x,y) = (gamma*(x•y)+coef0)^degree 
            [CvSVM::POLY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SVMKernelType.Rbf">
            <summary>
            radial-basis-function kernel; a good choice in most cases: d(x,y) = exp(-gamma*|x-y|^2) 
            [CvSVM::RBF]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SVMKernelType.Sigmoid">
            <summary>
            sigmoid function is used as a kernel: d(x,y) = tanh(gamma*(x•y)+coef0) 
            [CvSVM::SIGMOID]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.SVMParamType">
            <summary>
            SVM params type
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SVMParamType.C">
            <summary>
            [CvSVM::C]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SVMParamType.Gamma">
            <summary>
            [CvSVM::GAMMA]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SVMParamType.P">
            <summary>
            [CvSVM::P]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SVMParamType.Nu">
            <summary>
            [CvSVM::NU]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SVMParamType.Coef">
            <summary>
            [CvSVM::COEF]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SVMParamType.Degree">
            <summary>
            [CvSVM::DEGREE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.SVMType">
            <summary>
            Type of SVM
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SVMType.CSvc">
            <summary>
            n-class classification (n>=2), allows imperfect separation of classes with penalty multiplier C for outliers.
            [CvSVM::C_SVC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SVMType.NuSvc">
            <summary>
            n-class classification with possible imperfect separation. Parameter nu (in the range 0..1, the larger the value, the smoother the decision boundary) is used instead of C.
            [CvSVM::NU_SVC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SVMType.OneClass">
            <summary>
            one-class SVM. All the training data are from the same class, SVM builds a boundary that separates the class from the rest of the feature space.
            [CvSVM::ONE_CLASS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SVMType.EpsSvr">
            <summary>
            regression. The distance between feature vectors from the training set and the fitting hyper-plane must be less than p. For outliers the penalty multiplier C is used.
            [CvSVM::EPS_SVR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SVMType.NuSvr">
            <summary>
            regression; nu is used instead of p. 
            [CvSVM::NU_SVR]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.TrainSamplePartMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.TrainSamplePartMode.Count">
            <summary>
            [CV_COUNT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.TrainSamplePartMode.Portion">
            <summary>
            [CV_PORTION]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Stitcher">
            <summary>
            High level image stitcher. 
            It's possible to use this class without being aware of the entire stitching 
            pipeline. However, to be able to achieve higher stitching stability and 
            quality of the final images at least being familiar with the theory is recommended
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Stitcher.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="ptr">cv::Stitcher*</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Stitcher.CreateDefault(System.Boolean)">
            <summary>
            Creates a stitcher with the default parameters.
            </summary>
            <param name="tryUseGpu">Flag indicating whether GPU should be used 
            whenever it's possible.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Stitcher.Dispose(System.Boolean)">
            <summary>
            Deletes all resources 
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Stitcher.Stitch(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Try to stitch the given images.
            </summary>
            <param name="images">Input images.</param>
            <param name="pano">Final pano.</param>
            <returns>Status code.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Stitcher.Stitch(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Try to stitch the given images.
            </summary>
            <param name="images">Input images.</param>
            <param name="pano">Final pano.</param>
            <returns>Status code.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Stitcher.Stitch(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Rect[][],OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Try to stitch the given images.
            </summary>
            <param name="images">Input images.</param>
            <param name="rois">Region of interest rectangles.</param>
            <param name="pano">Final pano.</param>
            <returns>Status code.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Stitcher.Stitch(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},OpenCvSharp.CPlusPlus.Rect[][],OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Try to stitch the given images.
            </summary>
            <param name="images">Input images.</param>
            <param name="rois">Region of interest rectangles.</param>
            <param name="pano">Final pano.</param>
            <returns>Status code.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Stitcher.Status">
            <summary>
            Status code
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.OpticalFlowFlags">
            <summary>
            cv::calcOpticalFlowPyrLK flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.OpticalFlowFlags.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.OpticalFlowFlags.PyrAReady">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.OpticalFlowFlags.PyrBReady">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.OpticalFlowFlags.UseInitialFlow">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.OpticalFlowFlags.LkGetMinEigenvals">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.OpticalFlowFlags.FarnebackGaussian">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.SolvePnPFlag">
            <summary>
            Method for solving a PnP problem:
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SolvePnPFlag.Iterative">
            <summary>
            Iterative method is based on Levenberg-Marquardt optimization. 
            In this case the function finds such a pose that minimizes reprojection error, 
            that is the sum of squared distances between the observed projections imagePoints and the projected (using projectPoints() ) objectPoints .
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SolvePnPFlag.P3P">
            <summary>
            Method is based on the paper of X.S. Gao, X.-R. Hou, J. Tang, H.-F. Chang“Complete Solution Classification for 
            the Perspective-Three-Point Problem”. In this case the function requires exactly four object and image points.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SolvePnPFlag.EPNP">
            <summary>
            Method has been introduced by F.Moreno-Noguer, V.Lepetit and P.Fua in the paper “EPnP: Efficient Perspective-n-Point Camera Pose Estimation”.
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.DrawMatchesFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DrawMatchesFlags.Default">
            <summary>
            Output image matrix will be created (Mat::create),
            i.e. existing memory of output image may be reused.
            Two source image, matches and single keypoints will be drawn.
            For each keypoint only the center point will be drawn (without
            the circle around keypoint with keypoint size and orientation).
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DrawMatchesFlags.DrawOverOutImg">
            <summary>
            Output image matrix will not be created (Mat::create).
            Matches will be drawn on existing content of output image.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DrawMatchesFlags.NotDrawSinglePoints">
            <summary>
            Single keypoints will not be drawn.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DrawMatchesFlags.DrawRichKeypoints">
            <summary>
            For each keypoint the circle around keypoint with keypoint size and
            orientation will be drawn.
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.ORBScore">
            <summary>
            cv::ORB score flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.ORBScore.Fast">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.ORBScore.Harris">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.ProjectionType">
            <summary>
            cv::initWideAngleProjMap flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.ProjectionType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.ProjectionType.SphericalOrtho">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.ProjectionType.SphericalEqRect">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.GrabCutFlag">
            <summary>
            GrabCut algorithm flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.GrabCutFlag.InitWithRect">
            <summary>
             The function initializes the state and the mask using the provided rectangle. 
            After that it runs iterCount iterations of the algorithm.
            [GC_INIT_WITH_RECT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.GrabCutFlag.InitWithMask">
            <summary>
             The function initializes the state using the provided mask. 
            Note that GC_INIT_WITH_RECT and GC_INIT_WITH_MASK can be combined. 
            Then, all the pixels outside of the ROI are automatically initialized with GC_BGD .
            [GC_INIT_WITH_MASK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.GrabCutFlag.Rows">
            <summary>
             The value means that the algorithm should just resume.
            [GC_EVAL]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.DistanceMaskSize">
            <summary>
            Mask size for distance transform
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DistanceMaskSize.Mask3">
            <summary>
            
            [CV_DIST_MASK_3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DistanceMaskSize.Mask5">
            <summary>
            
            [CV_DIST_MASK_5]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DistanceMaskSize.Precise">
            <summary>
            
            [CV_DIST_MASK_PRECISE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.AlgorithmParamType">
            <summary>
            cv::Algorithm parameter type
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.SparseMatIndexer`1">
            <summary>
            Abstract definition of Mat indexer
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SparseMatIndexer`1.parent">
            <summary>
            Parent matrix object
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMatIndexer`1.#ctor(OpenCvSharp.CPlusPlus.SparseMat)">
            <summary>
            Constructor
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SparseMatIndexer`1.Item(System.Int32,System.Nullable{System.Int64})">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SparseMatIndexer`1.Item(System.Int32,System.Int32,System.Nullable{System.Int64})">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SparseMatIndexer`1.Item(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int64})">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SparseMatIndexer`1.Item(System.Int32[],System.Nullable{System.Int64})">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.SparseMat">
            <summary>
            Sparse matrix class.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::SparseMat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.#ctor">
            <summary>
            Creates empty SparseMat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            constructs n-dimensional sparse matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="type">Array type. Use MatType.CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, 
            or MatType. CV_8UC(n), ..., CV_64FC(n) to create multi-channel matrices.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">cv::Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.#ctor(OpenCvSharp.CvSparseMat)">
            <summary>
            converts old-style CvSparseMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvSparseMat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Release">
            <summary>
            Releases the resources
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.FromMat(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.FromCvSparseMat(OpenCvSharp.CvSparseMat)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SparseMat.SizeOf">
            <summary>
            sizeof(cv::Mat)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.op_Explicit(OpenCvSharp.CPlusPlus.SparseMat)~OpenCvSharp.CvSparseMat">
            <summary>
            Creates the CvMat clone instance for the matrix.
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.ToCvSparseMat">
            <summary>
            Creates the CvMat header or clone instance for the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.AssignFrom(OpenCvSharp.CPlusPlus.SparseMat)">
            <summary>
            Assignment operator. This is O(1) operation, i.e. no data is copied
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.AssignFrom(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Assignment operator. equivalent to the corresponding constructor.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Clone">
            <summary>
            creates full copy of the matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.CopyTo(OpenCvSharp.CPlusPlus.SparseMat)">
            <summary>
            copies all the data to the destination matrix. All the previous content of m is erased.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.CopyTo(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            converts sparse matrix to dense matrix.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.ConvertTo(OpenCvSharp.CPlusPlus.SparseMat,System.Int32,System.Double)">
            <summary>
            multiplies all the matrix elements by the specified scale factor alpha and converts the results to the specified data type
            </summary>
            <param name="m"></param>
            <param name="rtype"></param>
            <param name="alpha"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.ConvertTo(OpenCvSharp.CPlusPlus.Mat,System.Int32,System.Double,System.Double)">
            <summary>
            converts sparse matrix to dense n-dim matrix with optional type conversion and scaling.
            </summary>
            <param name="m"></param>
            <param name="rtype">The output matrix data type. When it is =-1, the output array will have the same data type as (*this)</param>
            <param name="alpha">The scale factor</param>
            <param name="beta">The optional delta added to the scaled values before the conversion</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.AssignTo(OpenCvSharp.CPlusPlus.SparseMat,System.Int32)">
            <summary>
            not used now
            </summary>
            <param name="m"></param>
            <param name="type"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Create(OpenCvSharp.CPlusPlus.MatType,System.Int32[])">
            <summary>
            Reallocates sparse matrix.
            If the matrix already had the proper size and type,
            it is simply cleared with clear(), otherwise,
            the old matrix is released (using release()) and the new one is allocated.
            </summary>
            <param name="type"></param>
            <param name="sizes"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Clear">
            <summary>
            sets all the sparse matrix elements to 0, which means clearing the hash table.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Addref">
            <summary>
            manually increments the reference counter to the header.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.ElemSize">
            <summary>
            returns the size of each element in bytes (not including the overhead - the space occupied by SparseMat::Node elements)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.ElemSize1">
            <summary>
            returns elemSize()/channels()
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Type">
            <summary>
            Returns the type of sparse matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Depth">
            <summary>
            Returns the depth of sparse matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Dims">
            <summary>
            Returns the matrix dimensionality
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Channels">
            <summary>
            Returns the number of sparse matrix channels.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Size">
            <summary>
            Returns the array of sizes, or null if the matrix is not allocated
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Size(System.Int32)">
            <summary>
            Returns the size of i-th matrix dimension (or 0)
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Hash(System.Int32)">
            <summary>
            Computes the element hash value (1D case)
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Hash(System.Int32,System.Int32)">
            <summary>
            Computes the element hash value (2D case)
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Hash(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes the element hash value (3D case)
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2">Index along the dimension 2</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Hash(System.Int32[])">
            <summary>
            Computes the element hash value (nD case)
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Ptr(System.Int32,System.Boolean,System.Nullable{System.Int64})">
            <summary>
            Low-level element-access function.
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="createMissing">Create new element with 0 value if it does not exist in SparseMat.</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Ptr(System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int64})">
            <summary>
            Low-level element-access function.
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="createMissing">Create new element with 0 value if it does not exist in SparseMat.</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Ptr(System.Int32,System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int64})">
            <summary>
            Low-level element-access function.
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2">Index along the dimension 2</param>
            <param name="createMissing">Create new element with 0 value if it does not exist in SparseMat.</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Ptr(System.Int32[],System.Boolean,System.Nullable{System.Int64})">
            <summary>
            Low-level element-access function.
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <param name="createMissing">Create new element with 0 value if it does not exist in SparseMat.</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Find``1(System.Int32,System.Nullable{System.Int64})">
            <summary>
            Return pthe specified sparse matrix element if it exists; otherwise, null.
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Find``1(System.Int32,System.Int32,System.Nullable{System.Int64})">
            <summary>
            Return pthe specified sparse matrix element if it exists; otherwise, null.
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Find``1(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int64})">
            <summary>
            Return pthe specified sparse matrix element if it exists; otherwise, null.
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2">Index along the dimension 2</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Find``1(System.Int32[],System.Nullable{System.Int64})">
            <summary>
            Return pthe specified sparse matrix element if it exists; otherwise, null.
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Value``1(System.Int32,System.Nullable{System.Int64})">
            <summary>
            Return pthe specified sparse matrix element if it exists; otherwise, default(T).
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Value``1(System.Int32,System.Int32,System.Nullable{System.Int64})">
            <summary>
            Return pthe specified sparse matrix element if it exists; otherwise, default(T).
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Value``1(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int64})">
            <summary>
            Return pthe specified sparse matrix element if it exists; otherwise, default(T).
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2">Index along the dimension 2</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Value``1(System.Int32[],System.Nullable{System.Int64})">
            <summary>
            Return pthe specified sparse matrix element if it exists; otherwise, default(T).
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Ref``1">
            <summary>
            Gets a type-specific indexer. 
            The indexer has getters/setters to access each matrix element.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.GetIndexer``1">
            <summary>
            Gets a type-specific indexer. 
            The indexer has getters/setters to access each matrix element.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Get``1(System.Int32,System.Nullable{System.Int64})">
            <summary>
            Returns a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Get``1(System.Int32,System.Int32,System.Nullable{System.Int64})">
            <summary>
            Returns a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Get``1(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int64})">
            <summary>
            Returns a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2">Index along the dimension 2</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Get``1(System.Int32[],System.Nullable{System.Int64})">
            <summary>
            Returns a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="idx">Array of Mat::dims indices.</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Set``1(System.Int32,``0,System.Nullable{System.Int64})">
            <summary>
            Set a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <param name="value"></param>
            <param name="hashVal"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Set``1(System.Int32,System.Int32,``0,System.Nullable{System.Int64})">
            <summary>
            Set a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="value"></param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Set``1(System.Int32,System.Int32,System.Int32,``0,System.Nullable{System.Int64})">
            <summary>
            Set a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2">Index along the dimension 2</param>
            <param name="value"></param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.Set``1(System.Int32[],``0,System.Nullable{System.Int64})">
            <summary>
            Set a value to the specified array element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="idx">Array of Mat::dims indices.</param>
            <param name="value"></param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SparseMat.ToString">
            <summary>
            Returns a string that represents this Mat.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.SparseMat.Indexer`1">
            <summary>
            Mat Indexer
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SparseMat.Indexer`1.Item(System.Int32,System.Nullable{System.Int64})">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SparseMat.Indexer`1.Item(System.Int32,System.Int32,System.Nullable{System.Int64})">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SparseMat.Indexer`1.Item(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int64})">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SparseMat.Indexer`1.Item(System.Int32[],System.Nullable{System.Int64})">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <param name="hashVal">If hashVal is not null, the element hash value is not computed but hashval is taken instead.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvANN_MLP">
            <summary>
            MLP model
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvANN_MLP.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvANN_MLP.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvANN_MLP.#ctor(OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.MLPActivationFunc,System.Double,System.Double)">
            <summary>
            Training constructor
            </summary>
            <param name="layerSizes">The integer vector specifies the number of neurons in each layer including the input and output layers. </param>
            <param name="activFunc">Specifies the activation function for each neuron</param>
            <param name="fParam1">Free parameter α of the activation function</param>
            <param name="fParam2">Free parameter β of the activation function</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvANN_MLP.#ctor(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.MLPActivationFunc,System.Double,System.Double)">
            <summary>
            Training constructor
            </summary>
            <param name="layerSizes">The integer vector specifies the number of neurons in each layer including the input and output layers. </param>
            <param name="activFunc">Specifies the activation function for each neuron</param>
            <param name="fParam1">Free parameter α of the activation function</param>
            <param name="fParam2">Free parameter β of the activation function</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvANN_MLP.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvANN_MLP.Create(OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.MLPActivationFunc,System.Double,System.Double)">
            <summary>
            Constructs the MLP with the specified topology
            </summary>
            <param name="layerSizes">The integer vector specifies the number of neurons in each layer including the input and output layers. </param>
            <param name="activFunc">Specifies the activation function for each neuron</param>
            <param name="fParam1">Free parameter α of the activation function</param>
            <param name="fParam2">Free parameter β of the activation function</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvANN_MLP.Create(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.MLPActivationFunc,System.Double,System.Double)">
            <summary>
            Constructs the MLP with the specified topology
            </summary>
            <param name="layerSizes">The integer vector specifies the number of neurons in each layer including the input and output layers. </param>
            <param name="activFunc">Specifies the activation function for each neuron</param>
            <param name="fParam1">Free parameter α of the activation function</param>
            <param name="fParam2">Free parameter β of the activation function</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvANN_MLP.Train(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CPlusPlus.CvANN_MLP_TrainParams,OpenCvSharp.CPlusPlus.MLPTrainingFlag)">
            <summary>
            Trains/updates MLP
            </summary>
            <param name="inputs">A floating-point matrix of input vectors, one vector per row. </param>
            <param name="outputs">A floating-point matrix of the corresponding output vectors, one vector per row. </param>
            <param name="sampleWeights">(RPROP only) The optional floating-point vector of weights for each sample. Some samples may be more important than others for training, e.g. user may want to gain the weight of certain classes to find the right balance between hit-rate and false-alarm rate etc. </param>
            <param name="sampleIdx">The optional integer vector indicating the samples (i.e. rows of _inputs and _outputs) that are taken into account. </param>
            <param name="param">The training params.</param>
            <param name="flags">The various parameters to control the training algorithm.</param>
            <returns>the number of done iterations.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvANN_MLP.Train(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.CvANN_MLP_TrainParams,OpenCvSharp.CPlusPlus.MLPTrainingFlag)">
            <summary>
            Trains/updates MLP
            </summary>
            <param name="inputs">A floating-point matrix of input vectors, one vector per row. </param>
            <param name="outputs">A floating-point matrix of the corresponding output vectors, one vector per row. </param>
            <param name="sampleWeights">(RPROP only) The optional floating-point vector of weights for each sample. Some samples may be more important than others for training, e.g. user may want to gain the weight of certain classes to find the right balance between hit-rate and false-alarm rate etc. </param>
            <param name="sampleIdx">The optional integer vector indicating the samples (i.e. rows of _inputs and _outputs) that are taken into account. </param>
            <param name="param">The training params.</param>
            <param name="flags">The various parameters to control the training algorithm.</param>
            <returns>the number of done iterations.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvANN_MLP.Predict(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Predicts response for the input sample
            </summary>
            <param name="inputs">The input sample. </param>
            <param name="outputs"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvANN_MLP.Predict(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Predicts response for the input sample
            </summary>
            <param name="inputs">The input sample. </param>
            <param name="outputs"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvANN_MLP.GetLayerCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvANN_MLP.GetLayerSizes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvANN_MLP.Clear">
            <summary>
            Deallocates memory and resets the model state
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvANN_MLP.Write(OpenCvSharp.CvFileStorage,System.String)">
            <summary>
            Writes the model to file storage
            </summary>
            <param name="storage"></param>
            <param name="name"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvANN_MLP.Read(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode)">
            <summary>
            Reads the model from file storage
            </summary>
            <param name="fs"></param>
            <param name="node"></param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvANN_MLP_TrainParams">
            <summary>
            Parameters of MLP training algorithm
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvANN_MLP_TrainParams.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvANN_MLP_TrainParams.#ctor(OpenCvSharp.CPlusPlus.TermCriteria,OpenCvSharp.CPlusPlus.MLPTrainingMethod,System.Double,System.Double)">
            <summary>
            Training constructor
            </summary>
            <param name="termCrit">The termination criteria for the training algorithm. It identifies how many iterations is done by the algorithm (for sequential backpropagation algorithm the number is multiplied by the size of the training set) and how much the weights could change between the iterations to make the algorithm continue. </param>
            <param name="trainMethod">The training algorithm to use</param>
            <param name="param1"></param>
            <param name="param2"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvANN_MLP_TrainParams.TermCrit">
            <summary>
            The termination criteria for the training algorithm. 
            It identifies how many iterations is done by the algorithm (for sequential backpropagation algorithm the number is multiplied by the size of the training set) 
            and how much the weights could change between the iterations to make the algorithm continue. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvANN_MLP_TrainParams.TrainMethod">
            <summary>
            The training algorithm to use
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvANN_MLP_TrainParams.BpDwScale">
            <summary>
            (Backpropagation only): The coefficient to multiply the computed weight gradient by. 
            The recommended value is about 0.1. The parameter can be set via param1 of the constructor. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvANN_MLP_TrainParams.BpMomentScale">
            <summary>
            (Backpropagation only): The coefficient to multiply the difference between weights on the 2 previous iterations. 
            This parameter provides some inertia to smooth the random fluctuations of the weights. It can vary from 0 (the feature is disabled) to 1 and beyond. 
            The value 0.1 or so is good enough. The parameter can be set via param2 of the constructor. 		
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvANN_MLP_TrainParams.RpDw0">
            <summary>
            (RPROP only): Initial magnitude of the weight delta. 
            The default value is 0.1. This parameter can be set via param1 of the constructor. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvANN_MLP_TrainParams.RpDwPlus">
            <summary>
            (RPROP only): The increase factor for the weight delta. 
            It must be >1, default value is 1.2 that should work well in most cases, according to the algorithm's author. 
            The parameter can only be changed explicitly by modifying the structure member. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvANN_MLP_TrainParams.RpDwMinus">
            <summary>
            (RPROP only): The decrease factor for the weight delta. 
            It must be &lt;1, default value is 0.5 that should work well in most cases, according to the algorithm's author.
            The parameter can only be changed explicitly by modifying the structure member. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvANN_MLP_TrainParams.RpDwMin">
            <summary>
            (RPROP only): The minimum value of the weight delta. 
            It must be &gt;0, the default value is FLT_EPSILON. The parameter can be set via param2 of the constructor. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.CvANN_MLP_TrainParams.RpDwMax">
            <summary>
            (RPROP only): The maximum value of the weight delta. 
            It must be >1, the default value is 50. The parameter can only be changed explicitly by modifying the structure member. 
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CascadeClassifier">
            <summary>
            Cascade classifier class for object detection.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CascadeClassifier.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CascadeClassifier.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CascadeClassifier.#ctor(System.String)">
            <summary>
            Loads a classifier from a file.
            </summary>
            <param name="fileName">Name of the file from which the classifier is loaded.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CascadeClassifier.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CascadeClassifier.Empty">
            <summary>
            Checks whether the classifier has been loaded.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CascadeClassifier.Load(System.String)">
            <summary>
            Loads a classifier from a file.
            </summary>
            <param name="fileName">Name of the file from which the classifier is loaded. 
            The file may contain an old HAAR classifier trained by the haartraining application 
            or a new cascade classifier trained by the traincascade application.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CascadeClassifier.DetectMultiScale(OpenCvSharp.CPlusPlus.Mat,System.Double,System.Int32,OpenCvSharp.HaarDetectionType,System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Nullable{OpenCvSharp.CPlusPlus.Size})">
            <summary>
            Detects objects of different sizes in the input image. The detected objects are returned as a list of rectangles.
            </summary>
            <param name="image">Matrix of the type CV_8U containing an image where objects are detected.</param>
            <param name="scaleFactor">Parameter specifying how much the image size is reduced at each image scale.</param>
            <param name="minNeighbors">Parameter specifying how many neighbors each candidate rectangle should have to retain it.</param>
            <param name="flags">Parameter with the same meaning for an old cascade as in the function cvHaarDetectObjects. 
            It is not used for a new cascade.</param>
            <param name="minSize">Minimum possible object size. Objects smaller than that are ignored.</param>
            <param name="maxSize">Maximum possible object size. Objects larger than that are ignored.</param>
            <returns>Vector of rectangles where each rectangle contains the detected object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CascadeClassifier.DetectMultiScale(OpenCvSharp.CPlusPlus.Mat,System.Int32[]@,System.Double[]@,System.Double,System.Int32,OpenCvSharp.HaarDetectionType,System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Boolean)">
            <summary>
            Detects objects of different sizes in the input image. The detected objects are returned as a list of rectangles.
            </summary>
            <param name="image">Matrix of the type CV_8U containing an image where objects are detected.</param>
            <param name="rejectLevels"></param>
            <param name="levelWeights"></param>
            <param name="scaleFactor">Parameter specifying how much the image size is reduced at each image scale.</param>
            <param name="minNeighbors">Parameter specifying how many neighbors each candidate rectangle should have to retain it.</param>
            <param name="flags">Parameter with the same meaning for an old cascade as in the function cvHaarDetectObjects. 
            It is not used for a new cascade.</param>
            <param name="minSize">Minimum possible object size. Objects smaller than that are ignored.</param>
            <param name="maxSize">Maximum possible object size. Objects larger than that are ignored.</param>
            <param name="outputRejectLevels"></param>
            <returns>Vector of rectangles where each rectangle contains the detected object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CascadeClassifier.IsOldFormatCascade">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CascadeClassifier.GetOriginalWindowSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CascadeClassifier.GetFeatureType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CascadeClassifier.SetImage(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.SimilarRects">
            <summary>
            Class for grouping object candidates, detected by Cascade Classifier, HOG etc.
            instance of the class is to be passed to cv::partition (see cxoperations.hpp)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SimilarRects.Compare(System.Double,OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            
            </summary>
            <param name="eps"></param>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.LatentSvmDetector">
            <summary>
            Find rectangular regions in the given image that are likely
            to contain objects and corresponding confidence levels
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.LatentSvmDetector.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.LatentSvmDetector.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.LatentSvmDetector.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates the HOG descriptor and detector.
            </summary>
            <param name="fileNames">A set of filenames storing the trained detectors (models). Each file contains one model. 
            See examples of such files here /opencv_extra/testdata/cv/latentsvmdetector/models_VOC2007/.</param>
            <param name="classNames">A set of trained models names. If it’s empty then the name of each model will be 
            constructed from the name of file containing the model. E.g. the model stored in "/home/user/cat.xml" will get the name "cat".</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.LatentSvmDetector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.LatentSvmDetector.Clear">
            <summary>
            Clear all trained models and their names stored in an class object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.LatentSvmDetector.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.LatentSvmDetector.Load(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="fileNames">A set of filenames storing the trained detectors (models). Each file contains one model. 
            See examples of such files here /opencv_extra/testdata/cv/latentsvmdetector/models_VOC2007/.</param>
            <param name="classNames">A set of trained models names. If it’s empty then the name of each model will be 
            constructed from the name of file containing the model. E.g. the model stored in "/home/user/cat.xml" will get the name "cat".</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.LatentSvmDetector.Detect(OpenCvSharp.CPlusPlus.Mat,System.Single,System.Int32)">
            <summary>
            Find rectangular regions in the given image that are likely to contain objects of 
            loaded classes (models) and corresponding confidence levels.
            </summary>
            <param name="image">An image.</param>
            <param name="overlapThreshold">Threshold for the non-maximum suppression algorithm.</param>
            <param name="numThreads">Number of threads used in parallel version of the algorithm.</param>
            <returns>The detections: rectangulars, scores and class IDs.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.LatentSvmDetector.GetClassNames">
            <summary>
            Return the class (model) names that were passed in constructor or method load or extracted from models filenames in those methods.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.LatentSvmDetector.GetClassCount">
            <summary>
            Return a count of loaded models (classes).
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.LatentSvmDetector.ObjectDetection">
            <summary>
            Structure contains the detection information.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.LatentSvmDetector.ObjectDetection.#ctor(System.Nullable{OpenCvSharp.CPlusPlus.Rect},System.Single,System.Int32)">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <param name="score"></param>
            <param name="classId"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.LatentSvmDetector.ObjectDetection.Rect">
            <summary>
            bounding box for a detected object
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.LatentSvmDetector.ObjectDetection.Score">
            <summary>
            confidence level
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.LatentSvmDetector.ObjectDetection.ClassId">
            <summary>
            class (model or detector) ID that detect an object
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.FrameSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FrameSource.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FrameSource.CreateEmptySource">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FrameSource.CreateVideoSource(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FrameSource.CreateVideoSourceGpu(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FrameSource.CreateCameraSource(System.Int32)">
            <summary>
            
            </summary>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FrameSource.NextFrame(OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FrameSource.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.DenseOpticalFlowExt">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExt.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExt.CreateFarneback">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExt.CreateFarneback_GPU">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExt.CreateFarneback_OCL">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExt.CreateSimple">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExt.CreateDualTVL1">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExt.CreateDualTVL1_GPU">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExt.CreateDualTVL1_OCL">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExt.CreateBrox_GPU">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExt.CreatePyrLK_GPU">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExt.CreatePyrLK_OCL">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExt.CollectGarbage">
            <summary>
            Clear all inner buffers.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExt.Calc(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="frame0"></param>
            <param name="frame1"></param>
            <param name="flow1"></param>
            <param name="flow2"></param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.SuperResolution">
            <summary>
            Base class for Super Resolution algorithms.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SuperResolution.frameSource">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SuperResolution.firstCall">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolution.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolution.CreateBTVL1">
            <summary>
            Create Bilateral TV-L1 Super Resolution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolution.CreateBTVL1_GPU">
            <summary>
            Create Bilateral TV-L1 Super Resolution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolution.CreateBTVL1_OCL">
            <summary>
            Create Bilateral TV-L1 Super Resolution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolution.SetInput(OpenCvSharp.CPlusPlus.FrameSource)">
            <summary>
            Set input frame source for Super Resolution algorithm.
            </summary>
            <param name="fs">Input frame source</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolution.NextFrame(OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            Process next frame from input and return output result.
            </summary>
            <param name="frame">Output result</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolution.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolution.CollectGarbage">
            <summary>
            Clear all inner buffers.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolution.InitImpl(OpenCvSharp.CPlusPlus.FrameSource)">
            <summary>
            
            </summary>
            <param name="fs"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolution.ProcessImpl(OpenCvSharp.CPlusPlus.FrameSource,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="fs"></param>
            <param name="output"></param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.DenseOpticalFlowExtImpl">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DenseOpticalFlowExtImpl.detectorPtr">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExtImpl.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExtImpl.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExtImpl.FromRawPtr(System.IntPtr)">
            <summary>
            Creates instance from raw pointer T*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExtImpl.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExtImpl.Calc(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="frame0"></param>
            <param name="frame1"></param>
            <param name="flow1"></param>
            <param name="flow2"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowExtImpl.CollectGarbage">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.DenseOpticalFlowExtImpl.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.SuperResolutionImpl">
            <summary>
            class for defined Super Resolution algorithm.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.SuperResolutionImpl.detectorPtr">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolutionImpl.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolutionImpl.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolutionImpl.FromRawPtr(System.IntPtr)">
            <summary>
            Creates instance from raw pointer T*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolutionImpl.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolutionImpl.SetInput(OpenCvSharp.CPlusPlus.FrameSource)">
            <summary>
            
            </summary>
            <param name="fs"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolutionImpl.NextFrame(OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolutionImpl.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolutionImpl.CollectGarbage">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolutionImpl.InitImpl(OpenCvSharp.CPlusPlus.FrameSource)">
            <summary>
            
            </summary>
            <param name="fs"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SuperResolutionImpl.ProcessImpl(OpenCvSharp.CPlusPlus.FrameSource,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="fs"></param>
            <param name="output"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SuperResolutionImpl.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.FrameSourceImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FrameSourceImpl.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FrameSourceImpl.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FrameSourceImpl.FromRawPtr(System.IntPtr)">
            <summary>
            Creates instance from raw pointer T*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FrameSourceImpl.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FrameSourceImpl.NextFrame(OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FrameSourceImpl.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.BackgroundSubtractorGMG">
            <summary>
            The Base Class for Background/Foreground Segmentation.
            The class is only used to define the common interface for
            the whole family of background/foreground segmentation algorithms.
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.BackgroundSubtractor">
            <summary>
            The Base Class for Background/Foreground Segmentation.
            The class is only used to define the common interface for
            the whole family of background/foreground segmentation algorithms.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.BackgroundSubtractor.objectPtr">
            <summary>
            cv::Ptr&lt;FeatureDetector&gt;
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.BackgroundSubtractor.disposed">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractor.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractor.FromRawPtr(System.IntPtr)">
            <summary>
            Creates instance from raw T*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractor.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractor.Run(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double)">
            <summary>
            the update operator that takes the next video frame and returns the current foreground mask as 8-bit binary image.
            </summary>
            <param name="image"></param>
            <param name="fgmask"></param>
            <param name="learningRate"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractor.GetBackgroundImage(OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            computes a background image
            </summary>
            <param name="backgroundImage"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.BackgroundSubtractor.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorGMG.#ctor">
            <summary>
            the default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorGMG.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorGMG.FromRawPtr(System.IntPtr)">
            <summary>
            Creates instance from raw T*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorGMG.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorGMG.Run(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double)">
            <summary>
            Performs single-frame background subtraction and builds up a statistical background image
            </summary>
            <param name="image">Input image</param>
            <param name="fgmask">Output mask image representing foreground and background pixels</param>
            <param name="learningRate"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorGMG.Initialize(OpenCvSharp.CPlusPlus.Size,System.Double,System.Double)">
            <summary>
            Validate parameters and set up data structures for appropriate image size.
            Must call before running on data.
            </summary>
            <param name="frameSize">input frame size</param>
            <param name="min">minimum value taken on by pixels in image sequence. Usually 0</param>
            <param name="max">maximum value taken on by pixels in image sequence. e.g. 1.0 or 255</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorGMG.Release">
            <summary>
            Releases all inner buffers.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.BackgroundSubtractorGMG.MaxFeatures">
            <summary>
            Total number of distinct colors to maintain in histogram.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.BackgroundSubtractorGMG.LearningRate">
            <summary>
            Set between 0.0 and 1.0, determines how quickly features are "forgotten" from histograms.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.BackgroundSubtractorGMG.NumInitializationFrames">
            <summary>
            Number of frames of video to use to initialize histograms.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.BackgroundSubtractorGMG.QuantizationLevels">
            <summary>
            Number of discrete levels in each channel to be used in histograms.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.BackgroundSubtractorGMG.BackgroundPrior">
            <summary>
            Prior probability that any given pixel is a background pixel. A sensitivity parameter.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.BackgroundSubtractorGMG.DecisionThreshold">
            <summary>
            Value above which pixel is determined to be FG.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.BackgroundSubtractorGMG.SmoothingRadius">
            <summary>
            Smoothing radius, in pixels, for cleaning up FG image.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.BackgroundSubtractorGMG.UpdateBackgroundModel">
            <summary>
            Perform background model update
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.BackgroundSubtractorGMG.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG2">
            <summary>
            The Base Class for Background/Foreground Segmentation.
            The class is only used to define the common interface for
            the whole family of background/foreground segmentation algorithms.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG2.objectPtr">
            <summary>
            cv::Ptr&lt;FeatureDetector&gt;
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG2.disposed">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG2.#ctor">
            <summary>
            the default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG2.#ctor(System.Int32,System.Single,System.Boolean)">
            <summary>
            the full constructor that takes the length of the history, the number of gaussian mixtures, the background ratio parameter and the noise strength
            </summary>
            <param name="history"></param>
            <param name="varThreshold"></param>
            <param name="bShadowDetection"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG2.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG2.FromRawPtr(System.IntPtr)">
            <summary>
            Creates instance from raw T*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG2.Run(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double)">
            <summary>
            the update operator
            </summary>
            <param name="image"></param>
            <param name="fgmask"></param>
            <param name="learningRate"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG2.GetBackgroundImage(OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            computes a background image
            </summary>
            <param name="backgroundImage"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG2.Initialize(OpenCvSharp.CPlusPlus.Size,System.Int32)">
            <summary>
            re-initiaization method
            </summary>
            <param name="frameSize"></param>
            <param name="frameType"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG2.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.DenseOpticalFlow">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlow.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlow.CreateOptFlow_DualTVL1">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlow.CollectGarbage">
            <summary>
            Clear all inner buffers.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlow.Calc(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="frame0"></param>
            <param name="frame1"></param>
            <param name="flow"></param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.DenseOpticalFlowImpl">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DenseOpticalFlowImpl.detectorPtr">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowImpl.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowImpl.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowImpl.FromRawPtr(System.IntPtr)">
            <summary>
            Creates instance from raw pointer T*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowImpl.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowImpl.Calc(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="frame0"></param>
            <param name="frame1"></param>
            <param name="flow"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseOpticalFlowImpl.CollectGarbage">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.DenseOpticalFlowImpl.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.KalmanFilter">
            <summary>
            Kalman filter.
            The class implements standard Kalman filter \url{http://en.wikipedia.org/wiki/Kalman_filter}.
            However, you can modify KalmanFilter::transitionMatrix, KalmanFilter::controlMatrix and
            KalmanFilter::measurementMatrix to get the extended Kalman filter functionality.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.KalmanFilter.#ctor">
            <summary>
            the default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.KalmanFilter.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            the full constructor taking the dimensionality of the state, of the measurement and of the control vector
            </summary>
            <param name="dynamParams"></param>
            <param name="measureParams"></param>
            <param name="controlParams"></param>
            <param name="type"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.KalmanFilter.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.KalmanFilter.Init(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            re-initializes Kalman filter. The previous content is destroyed.
            </summary>
            <param name="dynamParams"></param>
            <param name="measureParams"></param>
            <param name="controlParams"></param>
            <param name="type"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.KalmanFilter.Predict(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            computes predicted state
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.KalmanFilter.Correct(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            updates the predicted state from the measurement
            </summary>
            <param name="measurement"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.KalmanFilter.StatePre">
            <summary>
            predicted state (x'(k)): x(k)=A*x(k-1)+B*u(k)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.KalmanFilter.StatePost">
            <summary>
            corrected state (x(k)): x(k)=x'(k)+K(k)*(z(k)-H*x'(k))
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.KalmanFilter.TransitionMatrix">
            <summary>
            state transition matrix (A)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.KalmanFilter.ControlMatrix">
            <summary>
            control matrix (B) (not used if there is no control)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.KalmanFilter.MeasurementMatrix">
            <summary>
            measurement matrix (H)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.KalmanFilter.ProcessNoiseCov">
            <summary>
            process noise covariance matrix (Q)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.KalmanFilter.MeasurementNoiseCov">
            <summary>
            measurement noise covariance matrix (R)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.KalmanFilter.ErrorCovPre">
            <summary>
            priori error estimate covariance matrix (P'(k)): P'(k)=A*P(k-1)*At + Q)*/
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.KalmanFilter.Gain">
            <summary>
            Kalman gain matrix (K(k)): K(k)=P'(k)*Ht*inv(H*P'(k)*Ht+R)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.KalmanFilter.ErrorCovPost">
            <summary>
            posteriori error estimate covariance matrix (P(k)): P(k)=(I-K(k)*H)*P'(k)
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.NativeMethods">
            <summary>
            P/Invoke methods of OpenCV 2.x C++ interface
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.NativeMethods.DllExtern">
            <summary>
            DLL file name
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.NativeMethods.tried">
            <summary>
            Is tried P/Invoke once
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.NativeMethods.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.NativeMethods.LoadLibraries(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load DLL files dynamically using Win32 LoadLibrary
            </summary>
            <param name="additionalPaths"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.NativeMethods.TryPInvoke">
            <summary>
            Checks whether PInvoke functions can be called
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.StereoBM">
            <summary>
            Class for computing stereo correspondence using the block matching algorithm.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.StereoBM.PREFILTER_NORMALIZED_RESPONSE">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.StereoBM.PREFILTER_XSOBEL">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.StereoBM.BASIC_PRESET">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.StereoBM.FISH_EYE_PRESET">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.StereoBM.NARROW_PRESET">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.StereoBM.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.StereoBM.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.StereoBM.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="preset"></param>
            <param name="nDisparities"></param>
            <param name="sadWindowSize"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.StereoBM.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.StereoBM.Init(System.Int32,System.Int32,System.Int32)">
            <summary>
            separate initialization function
            </summary>
            <param name="preset"></param>
            <param name="nDisparities"></param>
            <param name="sadWindowSize"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.StereoBM.Compute(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Int32)">
            <summary>
            computes the disparity for the two rectified 8-bit single-channel images.
            the disparity will be 16-bit signed (fixed-point) or 32-bit floating-point image of the same size as left.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="disp"></param>
            <param name="dispType"></param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfDouble">
            <summary>
            A matrix whose element is 64FC1 (cv::Mat_&lt;double&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(OpenCvSharp.CPlusPlus.Size,System.Double)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(OpenCvSharp.CPlusPlus.MatOfDouble,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(OpenCvSharp.CPlusPlus.MatOfDouble,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(OpenCvSharp.CPlusPlus.MatOfDouble,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(System.Int32,System.Int32,System.Double[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(System.Int32,System.Int32,System.Double[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Double[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Double)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.FromArray(System.Double[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.FromArray(System.Double[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.FromArray(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble.Add(System.Double)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfDouble.Indexer">
            <summary>
            Matrix indexer
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfDouble.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfDouble.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfDouble.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfDouble.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfFloat6">
            <summary>
            A matrix whose element is 32FC6 (cv::Mat_&lt;cv::Vec6f&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec6f)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Vec6f)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(OpenCvSharp.CPlusPlus.MatOfFloat6,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(OpenCvSharp.CPlusPlus.MatOfFloat6,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(OpenCvSharp.CPlusPlus.MatOfFloat6,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec6f[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec6f[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Vec6f[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Vec6f)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.FromArray(OpenCvSharp.CPlusPlus.Vec6f[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.FromArray(OpenCvSharp.CPlusPlus.Vec6f[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.FromArray(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Vec6f})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.ToPrimitiveArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat6.Add(OpenCvSharp.CPlusPlus.Vec6f)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfFloat6.Indexer">
            <summary>
            Matrix indexer
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfFloat6.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfFloat6.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfFloat6.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfFloat6.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfFloat4">
            <summary>
            A matrix whose element is 32FC4 (cv::Mat_&lt;cv::Vec4f&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec4f)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Vec4f)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(OpenCvSharp.CPlusPlus.MatOfFloat4,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(OpenCvSharp.CPlusPlus.MatOfFloat4,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(OpenCvSharp.CPlusPlus.MatOfFloat4,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec4f[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec4f[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Vec4f[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Vec4f)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.FromArray(OpenCvSharp.CPlusPlus.Vec4f[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.FromArray(OpenCvSharp.CPlusPlus.Vec4f[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.FromArray(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Vec4f})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.ToPrimitiveArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat4.Add(OpenCvSharp.CPlusPlus.Vec4f)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfFloat4.Indexer">
            <summary>
            Matrix indexer
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfFloat4.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfFloat4.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfFloat4.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfFloat4.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfDMatch">
            <summary>
            A matrix whose element is cv::DMatch (cv::Mat_&lt;cv::Vec4f&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.DMatch)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.DMatch)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.#ctor(OpenCvSharp.CPlusPlus.MatOfDMatch,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.#ctor(OpenCvSharp.CPlusPlus.MatOfDMatch,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.#ctor(OpenCvSharp.CPlusPlus.MatOfDMatch,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.DMatch)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.FromArray(OpenCvSharp.CPlusPlus.DMatch[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.FromArray(OpenCvSharp.CPlusPlus.DMatch[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.FromArray(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.DMatch})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDMatch.Add(OpenCvSharp.CPlusPlus.DMatch)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfDMatch.Indexer">
            <summary>
            Matrix indexer
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfDMatch.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfDMatch.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfDMatch.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfDMatch.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfDouble3">
            <summary>
            A matrix whose element is cv::Vec3d [CV_64FC3] (cv::Mat_&lt;cv::Vec3d&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec3d)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Vec3d)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(OpenCvSharp.CPlusPlus.MatOfDouble3,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(OpenCvSharp.CPlusPlus.MatOfDouble3,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(OpenCvSharp.CPlusPlus.MatOfDouble3,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec3d[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec3d[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Vec3d[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Vec3d)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.FromArray(OpenCvSharp.CPlusPlus.Vec3d[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.FromArray(OpenCvSharp.CPlusPlus.Vec3d[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.FromArray(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Vec3d})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.ToPrimitiveArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfDouble3.Add(OpenCvSharp.CPlusPlus.Vec3d)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfDouble3.Indexer">
            <summary>
            Matrix indexer
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfDouble3.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfDouble3.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfDouble3.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfDouble3.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfPoint2d">
            <summary>
            A matrix whose element is cv::Point [CV_64FC2] (cv::Mat_&lt;cv::Point2d&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point2d)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Point2d)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint2d,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint2d,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint2d,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point2d[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point2d[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Point2d[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Point2d)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.FromArray(OpenCvSharp.CPlusPlus.Point2d[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.FromArray(OpenCvSharp.CPlusPlus.Point2d[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.FromArray(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2d})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.ToPrimitiveArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2d.Add(OpenCvSharp.CPlusPlus.Point2d)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfPoint2d.Indexer">
            <summary>
            Matrix indexer
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint2d.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint2d.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint2d.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint2d.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfPoint2f">
            <summary>
            A matrix whose element is cv::Point [CV_32FC2] (cv::Mat_&lt;cv::Point2f&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint2f,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint2f,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint2f,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point2f[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point2f[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Point2f[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.FromArray(OpenCvSharp.CPlusPlus.Point2f[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.FromArray(OpenCvSharp.CPlusPlus.Point2f[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.FromArray(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.ToPrimitiveArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint2f.Add(OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfPoint2f.Indexer">
            <summary>
            Matrix indexer
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint2f.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint2f.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint2f.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint2f.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfUShort">
            <summary>
            A matrix whose element is 16UC1 (cv::Mat_&lt;ushort&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(System.Int32,System.Int32,System.UInt16)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(OpenCvSharp.CPlusPlus.Size,System.UInt16)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(OpenCvSharp.CPlusPlus.MatOfUShort,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(OpenCvSharp.CPlusPlus.MatOfUShort,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(OpenCvSharp.CPlusPlus.MatOfUShort,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(System.Int32,System.Int32,System.UInt16[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(System.Int32,System.Int32,System.UInt16[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.UInt16[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.UInt16)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.FromArray(System.UInt16[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.FromArray(System.UInt16[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.FromArray(System.Collections.Generic.IEnumerable{System.UInt16})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfUShort.Add(System.UInt16)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfUShort.Indexer">
            <summary>
            Matrix indexer
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfUShort.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfUShort.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfUShort.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfUShort.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfShort">
            <summary>
            A matrix whose element is 16SC1 (cv::Mat_&lt;short&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(System.Int32,System.Int32,System.Int16)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(OpenCvSharp.CPlusPlus.Size,System.Int16)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(OpenCvSharp.CPlusPlus.MatOfShort,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(OpenCvSharp.CPlusPlus.MatOfShort,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(OpenCvSharp.CPlusPlus.MatOfShort,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(System.Int32,System.Int32,System.Int16[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(System.Int32,System.Int32,System.Int16[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Int16[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Int16)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.FromArray(System.Int16[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.FromArray(System.Int16[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.FromArray(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfShort.Add(System.Int16)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfShort.Indexer">
            <summary>
            Matrix indexer
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfShort.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfShort.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfShort.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfShort.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfInt">
            <summary>
            A matrix whose element is 32SC1 (cv::Mat_&lt;int&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(OpenCvSharp.CPlusPlus.Size,System.Int32)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(OpenCvSharp.CPlusPlus.MatOfInt,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(OpenCvSharp.CPlusPlus.MatOfInt,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(OpenCvSharp.CPlusPlus.MatOfInt,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(System.Int32,System.Int32,System.Int32[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(System.Int32,System.Int32,System.Int32[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Int32[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.FromArray(System.Int32[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.FromArray(System.Int32[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.FromArray(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfInt.Add(System.Int32)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfInt.Indexer">
            <summary>
            Matrix indexer
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfInt.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfInt.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfInt.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfInt.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfFloat">
            <summary>
            A matrix whose element is 32FC1 (cv::Mat_&lt;float&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(OpenCvSharp.CPlusPlus.Size,System.Single)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(OpenCvSharp.CPlusPlus.MatOfFloat,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(OpenCvSharp.CPlusPlus.MatOfFloat,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(OpenCvSharp.CPlusPlus.MatOfFloat,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(System.Int32,System.Int32,System.Single[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(System.Int32,System.Int32,System.Single[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Single[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Single)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.FromArray(System.Single[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.FromArray(System.Single[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.FromArray(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfFloat.Add(System.Single)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfFloat.Indexer">
            <summary>
            Matrix indexer
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfFloat.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfFloat.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfFloat.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfFloat.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfPoint">
            <summary>
            A matrix whose element is cv::Point [CV_32SC2] (cv::Mat_&lt;cv::Point&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Point)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Point[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Point)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.FromArray(OpenCvSharp.CPlusPlus.Point[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.FromArray(OpenCvSharp.CPlusPlus.Point[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.FromArray(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.ToPrimitiveArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint.Add(OpenCvSharp.CPlusPlus.Point)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfPoint.Indexer">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfRect">
            <summary>
            A matrix whose element is cv::Rect [CV_32SC4] (cv::Mat_&lt;cv::Rect&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(OpenCvSharp.CPlusPlus.MatOfRect,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(OpenCvSharp.CPlusPlus.MatOfRect,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(OpenCvSharp.CPlusPlus.MatOfRect,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Rect[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Rect[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Rect[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.FromArray(OpenCvSharp.CPlusPlus.Rect[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.FromArray(OpenCvSharp.CPlusPlus.Rect[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.FromArray(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Rect})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.ToPrimitiveArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfRect.Add(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfRect.Indexer">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfRect.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfRect.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfRect.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfRect.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfPoint3i">
            <summary>
            A matrix whose element is cv::Point3i [CV_32SC3] (cv::Mat_&lt;cv::Point3i&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3i)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Point3i)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint3i,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint3i,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint3i,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3i[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3i[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Point3i[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Point3i)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.FromArray(OpenCvSharp.CPlusPlus.Point3i[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.FromArray(OpenCvSharp.CPlusPlus.Point3i[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.FromArray(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point3i})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.ToPrimitiveArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3i.Add(OpenCvSharp.CPlusPlus.Point3i)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfPoint3i.Indexer">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint3i.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint3i.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint3i.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint3i.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfPoint3f">
            <summary>
            A matrix whose element is cv::Point3f [CV_32FC3] (cv::Mat_&lt;cv::Point3f&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3f)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Point3f)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint3f,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint3f,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint3f,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3f[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3f[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Point3f[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Point3f)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.FromArray(OpenCvSharp.CPlusPlus.Point3f[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.FromArray(OpenCvSharp.CPlusPlus.Point3f[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.FromArray(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point3f})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.ToPrimitiveArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3f.Add(OpenCvSharp.CPlusPlus.Point3f)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfPoint3f.Indexer">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint3f.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint3f.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint3f.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint3f.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfPoint3d">
            <summary>
            A matrix whose element is cv::Point3d [CV_64FC3] (cv::Mat_&lt;cv::Point3d&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3d)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Point3d)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint3d,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint3d,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(OpenCvSharp.CPlusPlus.MatOfPoint3d,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3d[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Point3d[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Point3d[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Point3d)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.FromArray(OpenCvSharp.CPlusPlus.Point3d[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.FromArray(OpenCvSharp.CPlusPlus.Point3d[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.FromArray(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point3d})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.ToPrimitiveArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfPoint3d.Add(OpenCvSharp.CPlusPlus.Point3d)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfPoint3d.Indexer">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint3d.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint3d.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint3d.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfPoint3d.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Ptr`1">
            <summary>
            Template class for smart reference-counting pointers
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Ptr`1.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Ptr`1.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Ptr`1.Dispose(System.Boolean)">
            <summary>
            Release function
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Ptr`1.Obj">
            <summary>
            Returns Ptr&lt;T&gt;.obj pointer
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.RNG">
            <summary>
            Random Number Generator.
            The class implements RNG using Multiply-with-Carry algorithm.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.#ctor(System.UInt64)">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.op_Explicit(OpenCvSharp.CPlusPlus.RNG)~System.Byte">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.op_Explicit(OpenCvSharp.CPlusPlus.RNG)~System.SByte">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.op_Explicit(OpenCvSharp.CPlusPlus.RNG)~System.UInt16">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.op_Explicit(OpenCvSharp.CPlusPlus.RNG)~System.Int16">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.op_Explicit(OpenCvSharp.CPlusPlus.RNG)~System.UInt32">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.op_Explicit(OpenCvSharp.CPlusPlus.RNG)~System.Int32">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.op_Explicit(OpenCvSharp.CPlusPlus.RNG)~System.Single">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.op_Explicit(OpenCvSharp.CPlusPlus.RNG)~System.Double">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.Next">
            <summary>
            updates the state and returns the next 32-bit unsigned integer random number
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.Run(System.UInt32)">
            <summary>
            returns a random integer sampled uniformly from [0, N).
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.Run">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.Uniform(System.Int32,System.Int32)">
            <summary>
            returns uniformly distributed integer random number from [a,b) range
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.Uniform(System.Single,System.Single)">
            <summary>
            returns uniformly distributed floating-point random number from [a,b) range
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.Uniform(System.Double,System.Double)">
            <summary>
            returns uniformly distributed double-precision floating-point random number from [a,b) range
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.Fill(OpenCvSharp.CPlusPlus.InputOutputArray,OpenCvSharp.DistributionType,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,System.Boolean)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <param name="distType"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="saturateRange"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RNG.Gaussian(System.Double)">
            <summary>
            returns Gaussian random variate with mean zero.
            </summary>
            <param name="sigma"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.RNG.State">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.SVD">
            <summary>
            Singular Value Decomposition class
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SVD.#ctor">
            <summary>
            the default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SVD.#ctor(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.SVDFlag)">
            <summary>
            the constructor that performs SVD
            </summary>
            <param name="src"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SVD.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SVD.Run(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.SVDFlag)">
            <summary>
            the operator that performs SVD. The previously allocated SVD::u, SVD::w are SVD::vt are released.
            </summary>
            <param name="src"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SVD.BackSubst(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            performs back substitution, so that dst is the solution or pseudo-solution of m*dst = rhs, where m is the decomposed matrix
            </summary>
            <param name="rhs"></param>
            <param name="dst"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SVD.Compute(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.SVDFlag)">
            <summary>
            decomposes matrix and stores the results to user-provided matrices
            </summary>
            <param name="src"></param>
            <param name="w"></param>
            <param name="u"></param>
            <param name="vt"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SVD.Compute(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,OpenCvSharp.SVDFlag)">
            <summary>
            computes singular values of a matrix
            </summary>
            <param name="src"></param>
            <param name="w"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SVD.BackSubst(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            performs back substitution
            </summary>
            <param name="w"></param>
            <param name="u"></param>
            <param name="vt"></param>
            <param name="rhs"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SVD.SolveZ(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            finds dst = arg min_{|dst|=1} |m*dst|
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SVD.U">
            <summary>
            eigenvalues of the covariation matrix
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SVD.W">
            <summary>
            eigenvalues of the covariation matrix
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SVD.Vt">
            <summary>
            mean value subtracted before the projection and added after the back projection
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.PCA">
            <summary>
            Principal Component Analysis
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.PCA.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.PCA.#ctor(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.PCAFlag,System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="mean"></param>
            <param name="flags"></param>
            <param name="maxComponents"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.PCA.#ctor(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.PCAFlag,System.Double)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="mean"></param>
            <param name="flags"></param>
            <param name="retainedVariance"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.PCA.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.PCA.Compute(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.PCAFlag,System.Int32)">
            <summary>
            operator that performs PCA. The previously stored data, if any, is released
            </summary>
            <param name="data"></param>
            <param name="mean"></param>
            <param name="flags"></param>
            <param name="maxComponents"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.PCA.ComputeVar(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.PCAFlag,System.Double)">
            <summary>
            operator that performs PCA. The previously stored data, if any, is released
            </summary>
            <param name="data"></param>
            <param name="mean"></param>
            <param name="flags"></param>
            <param name="retainedVariance"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.PCA.Project(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            projects vector from the original space to the principal components subspace
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.PCA.Project(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            projects vector from the original space to the principal components subspace
            </summary>
            <param name="vec"></param>
            <param name="result"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.PCA.BackProject(OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            reconstructs the original vector from the projection
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.PCA.BackProject(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            reconstructs the original vector from the projection
            </summary>
            <param name="vec"></param>
            <param name="result"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.PCA.Eigenvectors">
            <summary>
            eigenvalues of the covariation matrix
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.PCA.Eigenvalues">
            <summary>
            eigenvalues of the covariation matrix
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.PCA.Mean">
            <summary>
            mean value subtracted before the projection and added after the back projection
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.InputOutputArray">
            <summary>
            Proxy datatype for passing Mat's and vector&lt;&gt;'s as input parameters.
            Synonym for OutputArray.
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.OutputArray">
            <summary>
            Proxy datatype for passing Mat's and List&lt;&gt;'s as output parameters
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray.#ctor(OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray.op_Implicit(OpenCvSharp.CPlusPlus.Mat)~OpenCvSharp.CPlusPlus.OutputArray">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray.op_Implicit(OpenCvSharp.CPlusPlus.Gpu.GpuMat)~OpenCvSharp.CPlusPlus.OutputArray">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray.IsMat">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray.GetMat">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray.IsGpuMat">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray.GetGpuMat">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray.AssignResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray.Fix">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray.IsReady">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray.ThrowIfNotReady">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray.Create(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Creates a proxy class of the specified matrix
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray.Create(OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Creates a proxy class of the specified matrix
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray.Create``1(System.Collections.Generic.List{``0})">
            <summary>
            Creates a proxy class of the specified list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputOutputArray.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputOutputArray.op_Implicit(OpenCvSharp.CPlusPlus.Mat)~OpenCvSharp.CPlusPlus.InputOutputArray">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.AlgorithmInfo">
            <summary>
            Algorithm Information
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.AlgorithmInfo.ptr">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.AlgorithmInfo.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.AlgorithmInfo.ParamHelp(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.AlgorithmInfo.GetParams">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.AlgorithmInfo.ParamType(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.AlgorithmInfo.CvPtr">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.AlgorithmInfo.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.BFMatcher">
            <summary>
            Brute-force descriptor matcher.
            For each descriptor in the first set, this matcher finds the closest descriptor in the second set by trying each one.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BFMatcher.#ctor(OpenCvSharp.NormType,System.Boolean)">
            <summary>
            
            </summary>
            <param name="normType"></param>
            <param name="crossCheck"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BFMatcher.#ctor(OpenCvSharp.CPlusPlus.Ptr{OpenCvSharp.CPlusPlus.BFMatcher})">
            <summary>
            Creates instance by cv::Ptr&lt;T&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BFMatcher.#ctor(System.IntPtr)">
            <summary>
            Creates instance by raw pointer T*
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BFMatcher.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BFMatcher.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BFMatcher.IsMaskSupported">
            <summary>
            Return true if the matcher supports mask in match methods.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.BFMatcher.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.FREAK">
            <summary>
            FREAK implementation
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FREAK.#ctor(System.Boolean,System.Boolean,System.Single,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Constructor
            </summary>
            <param name="orientationNormalized">enable orientation normalization</param>
            <param name="scaleNormalized">enable scale normalization</param>
            <param name="patternScale">scaling of the description pattern</param>
            <param name="nOctaves">number of octaves covered by the detected keypoints</param>
            <param name="selectedPairs">(optional) user defined selected pairs</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FREAK.#ctor(OpenCvSharp.CPlusPlus.Ptr{OpenCvSharp.CPlusPlus.FREAK})">
            <summary>
            Creates instance by cv::Ptr&lt;cv::SURF&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FREAK.#ctor(System.IntPtr)">
            <summary>
            Creates instance by raw pointer cv::SURF*
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FREAK.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FREAK.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FREAK.DescriptorSize">
            <summary>
            returns the descriptor size in bytes
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FREAK.DescriptorType">
            <summary>
            returns the descriptor type
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FREAK.SelectPairs(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},OpenCvSharp.CPlusPlus.KeyPoint[][]@,System.Double,System.Boolean)">
            <summary>
            select the 512 "best description pairs"
            </summary>
            <param name="images">grayscale images set</param>
            <param name="keypoints">set of detected keypoints</param>
            <param name="corrThresh">correlation threshold</param>
            <param name="verbose">print construction information</param>
            <returns>list of best pair indexes</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FREAK.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.ORB">
            <summary>
            ORB implementation
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Feature2D">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.FeatureDetector">
            <summary>
            Abstract base class for 2D image feature detectors.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.FeatureDetector.detectorPtr">
            <summary>
            cv::Ptr&lt;FeatureDetector&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FeatureDetector.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FeatureDetector.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FeatureDetector.FromRawPtr(System.IntPtr)">
            <summary>
            Creates instance from raw T*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FeatureDetector.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FeatureDetector.Detect(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Detect keypoints in an image.
            </summary>
            <param name="image">The image.</param>
            <param name="mask">Mask specifying where to look for keypoints (optional). 
            Must be a char matrix with non-zero values in the region of interest.</param>
            <returns>The detected keypoints.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FeatureDetector.Detect(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat})">
            <summary>
            Detect keypoints in an image set.
            </summary>
            <param name="images">Image collection.</param>
            <param name="masks">Masks for image set. masks[i] is a mask for images[i].</param>
            <returns>Collection of keypoints detected in an input images. keypoints[i] is a set of keypoints detected in an images[i].</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FeatureDetector.Empty">
            <summary>
            Return true if detector object is empty
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FeatureDetector.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Feature2D.detectorPtr">
            <summary>
            cv::Ptr&lt;Feature2D&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Feature2D.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Feature2D.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Feature2D.FromRawPtr(System.IntPtr)">
            <summary>
            Creates instance from raw pointer T*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Feature2D.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Feature2D.Compute(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.KeyPoint[]@,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Compute the descriptors for a set of keypoints in an image.
            </summary>
            <param name="image">The image.</param>
            <param name="keypoints">The input keypoints. Keypoints for which a descriptor cannot be computed are removed.</param>
            <param name="descriptors">Copmputed descriptors. Row i is the descriptor for keypoint i.</param>param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Feature2D.Compute(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},OpenCvSharp.CPlusPlus.KeyPoint[][]@,System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat})">
            <summary>
            Compute the descriptors for a keypoints collection detected in image collection.
            </summary>
            <param name="images">Image collection.</param>
            <param name="keypoints">Input keypoints collection. keypoints[i] is keypoints detected in images[i].
            Keypoints for which a descriptor cannot be computed are removed.</param>
            <param name="descriptors">Descriptor collection. descriptors[i] are descriptors computed for set keypoints[i].</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.ORB.#ctor(System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CPlusPlus.ORBScore,System.Int32)">
            <summary>
            
            </summary>
            <param name="nFeatures"></param>
            <param name="scaleFactor"></param>
            <param name="nLevels"></param>
            <param name="edgeThreshold"></param>
            <param name="firstLevel"></param>
            <param name="wtaK"></param>
            <param name="scoreType"></param>
            <param name="patchSize"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.ORB.#ctor(OpenCvSharp.CPlusPlus.Ptr{OpenCvSharp.CPlusPlus.ORB})">
            <summary>
            Creates instance by cv::Ptr&lt;cv::SURF&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.ORB.#ctor(System.IntPtr)">
            <summary>
            Creates instance by raw pointer cv::SURF*
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.ORB.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.ORB.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.ORB.DescriptorSize">
            <summary>
            returns the descriptor size in bytes
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.ORB.DescriptorType">
            <summary>
            returns the descriptor type
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.ORB.Run(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Compute the ORB features on an image
            </summary>
            <param name="image"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.ORB.Run(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.KeyPoint[]@,OpenCvSharp.CPlusPlus.OutputArray,System.Boolean)">
            <summary>
            Compute the ORB features and descriptors on an image
            </summary>
            <param name="image"></param>
            <param name="mask"></param>
            <param name="keyPoints"></param>
            <param name="descriptors"></param>
            <param name="useProvidedKeypoints"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.ORB.Run(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.KeyPoint[]@,System.Single[]@,System.Boolean)">
            <summary>
            Compute the ORB features and descriptors on an image
            </summary>
            <param name="image"></param>
            <param name="mask"></param>
            <param name="keyPoints"></param>
            <param name="descriptors"></param>
            <param name="useProvidedKeypoints"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.ORB.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.GFTTDetector">
            <summary>
            Good Features To Track Detector
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.GFTTDetector.#ctor(System.Int32,System.Double,System.Double,System.Int32,System.Boolean,System.Double)">
            <summary>
            
            </summary>
            <param name="maxCorners"></param>
            <param name="qualityLevel"></param>
            <param name="minDistance"></param>
            <param name="blockSize"></param>
            <param name="useHarrisDetector"></param>
            <param name="k"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.GFTTDetector.#ctor(OpenCvSharp.CPlusPlus.Ptr{OpenCvSharp.CPlusPlus.GFTTDetector})">
            <summary>
            Creates instance by cv::Ptr&lt;cv::SURF&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.GFTTDetector.#ctor(System.IntPtr)">
            <summary>
            Creates instance by raw pointer cv::SURF*
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.GFTTDetector.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.GFTTDetector.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.GFTTDetector.Run(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.GFTTDetector.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.FastFeatureDetector">
            <summary>
            Detects corners using FAST algorithm by E. Rosten
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FastFeatureDetector.#ctor(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="threshold"></param>
            <param name="nonmaxSuppression"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FastFeatureDetector.#ctor(OpenCvSharp.CPlusPlus.Ptr{OpenCvSharp.CPlusPlus.FastFeatureDetector})">
            <summary>
            Creates instance by cv::Ptr&lt;cv::SURF&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FastFeatureDetector.#ctor(System.IntPtr)">
            <summary>
            Creates instance by raw pointer cv::SURF*
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FastFeatureDetector.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FastFeatureDetector.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.FastFeatureDetector.Run(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.FastFeatureDetector.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.BRISK">
            <summary>
            BRISK implementation
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BRISK.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="thresh"></param>
            <param name="octaves"></param>
            <param name="patternScale"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BRISK.#ctor(OpenCvSharp.CPlusPlus.Ptr{OpenCvSharp.CPlusPlus.BRISK})">
            <summary>
            Creates instance by cv::Ptr&lt;cv::SURF&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BRISK.#ctor(System.IntPtr)">
            <summary>
            Creates instance by raw pointer cv::SURF*
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BRISK.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BRISK.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BRISK.DescriptorSize">
            <summary>
            returns the descriptor size in bytes
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BRISK.DescriptorType">
            <summary>
            returns the descriptor type
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BRISK.Run(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Compute the BRISK features on an image
            </summary>
            <param name="image"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BRISK.Run(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.KeyPoint[]@,OpenCvSharp.CPlusPlus.OutputArray,System.Boolean)">
            <summary>
            Compute the BRISK features and descriptors on an image
            </summary>
            <param name="image"></param>
            <param name="mask"></param>
            <param name="keyPoints"></param>
            <param name="descriptors"></param>
            <param name="useProvidedKeypoints"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BRISK.Run(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.KeyPoint[]@,System.Single[]@,System.Boolean)">
            <summary>
            Compute the BRISK features and descriptors on an image
            </summary>
            <param name="image"></param>
            <param name="mask"></param>
            <param name="keyPoints"></param>
            <param name="descriptors"></param>
            <param name="useProvidedKeypoints"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.BRISK.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.SimpleBlobDetector">
            <summary>
            Class for extracting blobs from an image.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SimpleBlobDetector.#ctor(OpenCvSharp.CPlusPlus.SimpleBlobDetector.Params)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SimpleBlobDetector.#ctor(OpenCvSharp.CPlusPlus.Ptr{OpenCvSharp.CPlusPlus.SimpleBlobDetector})">
            <summary>
            Creates instance by cv::Ptr&lt;cv::SURF&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SimpleBlobDetector.#ctor(System.IntPtr)">
            <summary>
            Creates instance by raw pointer cv::SURF*
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SimpleBlobDetector.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SimpleBlobDetector.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SimpleBlobDetector.Run(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SimpleBlobDetector.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.SimpleBlobDetector.Params">
            <summary>
            SimpleBlobDetector parameters
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SimpleBlobDetector.Params.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.DenseFeatureDetector">
            <summary>
            Class for generation of image features which are 
            distributed densely and regularly over the image.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseFeatureDetector.#ctor(System.Single,System.Int32,System.Single,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            The detector generates several levels (in the amount of featureScaleLevels) of features. 
            Features of each level are located in the nodes of a regular grid over the image 
            (excluding the image boundary of given size). The level parameters (a feature scale, 
            a node size, a size of boundary) are multiplied by featureScaleMul with level index 
            growing depending on input flags, viz.:
            </summary>
            <param name="initFeatureScale"></param>
            <param name="featureScaleLevels"></param>
            <param name="featureScaleMul"></param>
            <param name="initXyStep"></param>
            <param name="initImgBound"></param>
            <param name="varyXyStepWithScale">The grid node size is multiplied if this is true.</param>
            <param name="varyImgBoundWithScale">Size of image boundary is multiplied if this is true.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseFeatureDetector.#ctor(OpenCvSharp.CPlusPlus.Ptr{OpenCvSharp.CPlusPlus.DenseFeatureDetector})">
            <summary>
            Creates instance by cv::Ptr&lt;cv::SURF&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseFeatureDetector.#ctor(System.IntPtr)">
            <summary>
            Creates instance by raw pointer cv::SURF*
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseFeatureDetector.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DenseFeatureDetector.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.DenseFeatureDetector.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VideoWriter">
            <summary>
            AVI Video File Writer
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VideoWriter.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoWriter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoWriter.#ctor(System.String,System.String,System.Double,OpenCvSharp.CPlusPlus.Size,System.Boolean)">
            <summary>
            Creates video writer structure. 
            </summary>
            <param name="fileName">Name of the output video file. </param>
            <param name="fourcc">4-character code of codec used to compress the frames. For example, "PIM1" is MPEG-1 codec, "MJPG" is motion-jpeg codec etc. 
            Under Win32 it is possible to pass null in order to choose compression method and additional compression parameters from dialog. </param>
            <param name="fps">Framerate of the created video stream. </param>
            <param name="frameSize">Size of video frames. </param>
            <param name="isColor">If it is true, the encoder will expect and encode color frames, otherwise it will work with grayscale frames (the flag is currently supported on Windows only). </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoWriter.#ctor(System.String,OpenCvSharp.FourCC,System.Double,OpenCvSharp.CPlusPlus.Size,System.Boolean)">
            <summary>
            Creates video writer structure. 
            </summary>
            <param name="fileName">Name of the output video file. </param>
            <param name="fourcc">4-character code of codec used to compress the frames. For example, "PIM1" is MPEG-1 codec, "MJPG" is motion-jpeg codec etc. 
            Under Win32 it is possible to pass null in order to choose compression method and additional compression parameters from dialog. </param>
            <param name="fps">Framerate of the created video stream. </param>
            <param name="frameSize">Size of video frames. </param>
            <param name="isColor">If it is true, the encoder will expect and encode color frames, otherwise it will work with grayscale frames (the flag is currently supported on Windows only). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoWriter.#ctor(System.String,System.Int32,System.Double,OpenCvSharp.CPlusPlus.Size,System.Boolean)">
            <summary>
            Creates video writer structure. 
            </summary>
            <param name="fileName">Name of the output video file. </param>
            <param name="fourcc">4-character code of codec used to compress the frames. For example, "PIM1" is MPEG-1 codec, "MJPG" is motion-jpeg codec etc. 
            Under Win32 it is possible to pass null in order to choose compression method and additional compression parameters from dialog. </param>
            <param name="fps">Framerate of the created video stream. </param>
            <param name="frameSize">Size of video frames. </param>
            <param name="isColor">If it is true, the encoder will expect and encode color frames, otherwise it will work with grayscale frames (the flag is currently supported on Windows only). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoWriter.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">CvVideoWriter*</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoWriter.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoWriter.Open(System.String,System.String,System.Double,OpenCvSharp.CPlusPlus.Size,System.Boolean)">
            <summary>
            Creates video writer structure. 
            </summary>
            <param name="fileName">Name of the output video file. </param>
            <param name="fourcc">4-character code of codec used to compress the frames. For example, "PIM1" is MPEG-1 codec, "MJPG" is motion-jpeg codec etc. 
            Under Win32 it is possible to pass null in order to choose compression method and additional compression parameters from dialog. </param>
            <param name="fps">Framerate of the created video stream. </param>
            <param name="frameSize">Size of video frames. </param>
            <param name="isColor">If it is true, the encoder will expect and encode color frames, otherwise it will work with grayscale frames (the flag is currently supported on Windows only). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoWriter.Open(System.String,OpenCvSharp.FourCC,System.Double,OpenCvSharp.CPlusPlus.Size,System.Boolean)">
            <summary>
            Creates video writer structure. 
            </summary>
            <param name="fileName">Name of the output video file. </param>
            <param name="fourcc">4-character code of codec used to compress the frames. For example, "PIM1" is MPEG-1 codec, "MJPG" is motion-jpeg codec etc. 
            Under Win32 it is possible to pass null in order to choose compression method and additional compression parameters from dialog. </param>
            <param name="fps">Framerate of the created video stream. </param>
            <param name="frameSize">Size of video frames. </param>
            <param name="isColor">If it is true, the encoder will expect and encode color frames, otherwise it will work with grayscale frames (the flag is currently supported on Windows only). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoWriter.Open(System.String,System.Int32,System.Double,OpenCvSharp.CPlusPlus.Size,System.Boolean)">
            <summary>
            Creates video writer structure. 
            </summary>
            <param name="fileName">Name of the output video file. </param>
            <param name="fourcc">4-character code of codec used to compress the frames. For example, "PIM1" is MPEG-1 codec, "MJPG" is motion-jpeg codec etc. 
            Under Win32 it is possible to pass null in order to choose compression method and additional compression parameters from dialog. </param>
            <param name="fps">Framerate of the created video stream. </param>
            <param name="frameSize">Size of video frames. </param>
            <param name="isColor">If it is true, the encoder will expect and encode color frames, otherwise it will work with grayscale frames (the flag is currently supported on Windows only). </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoWriter.IsOpened">
            <summary>
            Returns true if video writer has been successfully initialized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoWriter.Release">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoWriter.Write(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Writes/appends one frame to video file. 
            </summary>
            <param name="image">the written frame.</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoWriter.FileName">
            <summary>
            Get output video file name
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoWriter.Fps">
            <summary>
            Frames per second of the output vide
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoWriter.FrameSize">
            <summary>
            Get size of frame image
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoWriter.IsColor">
            <summary>
            Get whether output frames is color or not
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VideoCapture">
            <summary>
            Video capturing class 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VideoCapture.captureType">
            <summary>
            Capture type (File or Camera)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VideoCapture.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.#ctor">
            <summary>
            Initializes empty capture.
            To use this, you should call Open. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.#ctor(System.Int32)">
            <summary>
            Allocates and initialized the CvCapture structure for reading a video stream from the camera. 
            Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL); and two on Linux: V4L and FireWire (IEEE1394).
            </summary>
            <param name="index">Index of the camera to be used. If there is only one camera or it does not matter what camera to use -1 may be passed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.#ctor(OpenCvSharp.CaptureDevice)">
            <summary>
            Allocates and initialized the CvCapture structure for reading a video stream from the camera. 
            Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL); and two on Linux: V4L and FireWire (IEEE1394). 
            </summary>
            <param name="device">Device type</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.#ctor(OpenCvSharp.CaptureDevice,System.Int32)">
            <summary>
            Allocates and initialized the CvCapture structure for reading a video stream from the camera. 
            Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL); and two on Linux: V4L and FireWire (IEEE1394). 
            </summary>
            <param name="device">Device type</param>
            <param name="index">Index of the camera to be used. If there is only one camera or it does not matter what camera to use -1 may be passed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.FromCamera(System.Int32)">
            <summary>
            Allocates and initialized the CvCapture structure for reading a video stream from the camera. 
            Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL); and two on Linux: V4L and FireWire (IEEE1394).
            </summary>
            <param name="index">Index of the camera to be used. If there is only one camera or it does not matter what camera to use -1 may be passed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.FromCamera(OpenCvSharp.CaptureDevice)">
            <summary>
            Allocates and initialized the CvCapture structure for reading a video stream from the camera. 
            Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL); and two on Linux: V4L and FireWire (IEEE1394). 
            </summary>
            <param name="device">Device type</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.FromCamera(OpenCvSharp.CaptureDevice,System.Int32)">
            <summary>
            Allocates and initialized the CvCapture structure for reading a video stream from the camera. 
            Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL); and two on Linux: V4L and FireWire (IEEE1394). 
            </summary>
            <param name="device">Device type</param>
            <param name="index">Index of the camera to be used. If there is only one camera or it does not matter what camera to use -1 may be passed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.#ctor(System.String)">
            <summary>
            Allocates and initialized the CvCapture structure for reading the video stream from the specified file.
            After the allocated structure is not used any more it should be released by cvReleaseCapture function. 
            </summary>
            <param name="fileName">Name of the video file. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.FromFile(System.String)">
            <summary>
            Allocates and initialized the CvCapture structure for reading the video stream from the specified file.
            After the allocated structure is not used any more it should be released by cvReleaseCapture function. 
            </summary>
            <param name="fileName">Name of the video file. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.#ctor(System.IntPtr)">
            <summary>
            Initializes from native pointer
            </summary>
            <param name="ptr">CvCapture*</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.Get(OpenCvSharp.CaptureProperty)">
            <summary>
            Retrieves the specified property of camera or video file. 
            </summary>
            <param name="propertyId">property identifier.</param>
            <returns>property value</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.Get(System.Int32)">
            <summary>
            Retrieves the specified property of camera or video file. 
            </summary>
            <param name="propertyId">property identifier.</param>
            <returns>property value</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.Grab">
            <summary>
            Grabs the frame from camera or file. The grabbed frame is stored internally. 
            The purpose of this function is to grab frame fast that is important for syncronization in case of reading from several cameras simultaneously. 
            The grabbed frames are not exposed because they may be stored in compressed format (as defined by camera/driver). 
            To retrieve the grabbed frame, cvRetrieveFrame should be used. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.Retrieve(OpenCvSharp.CPlusPlus.Mat,System.Int32)">
            <summary>
            Returns the pointer to the image grabbed with cvGrabFrame function. 
            </summary>
            <param name="image"></param>
            <param name="channel">non-zero streamIdx is only valid for multi-head camera live streams</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.Retrieve(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CameraChannels)">
            <summary>
            Returns the pointer to the image grabbed with cvGrabFrame function. 
            The returned image should not be released or modified by user. 
            </summary>
            <param name="image"></param>
            <param name="streamIdx">non-zero streamIdx is only valid for multi-head camera live streams</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.Read(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Grabs a frame from camera or video file, decompresses and returns it. 
            This function is just a combination of cvGrabFrame and cvRetrieveFrame in one call. 
            The returned image should not be released or modified by user. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.Set(OpenCvSharp.CaptureProperty,System.Double)">
            <summary>
            Sets the specified property of video capturing.
            </summary>
            <param name="propertyId">property identifier. </param>
            <param name="value">value of the property. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.Set(System.Int32,System.Double)">
            <summary>
            Sets the specified property of video capturing.
            </summary>
            <param name="propertyId">property identifier. </param>
            <param name="value">value of the property. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.Open(System.String)">
            <summary>
            Opens the specified video file
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.Open(System.Int32)">
            <summary>
            Allocates and initialized the CvCapture structure for reading a video stream from the camera. 
            Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL); and two on Linux: V4L and FireWire (IEEE1394).
            </summary>
            <param name="index">Index of the camera to be used. If there is only one camera or it does not matter what camera to use -1 may be passed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.Open(OpenCvSharp.CaptureDevice)">
            <summary>
            Allocates and initialized the CvCapture structure for reading a video stream from the camera. 
            Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL); and two on Linux: V4L and FireWire (IEEE1394). 
            </summary>
            <param name="device">Device type</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.Open(OpenCvSharp.CaptureDevice,System.Int32)">
            <summary>
            Allocates and initialized the CvCapture structure for reading a video stream from the camera. 
            Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL); and two on Linux: V4L and FireWire (IEEE1394). 
            </summary>
            <param name="device">Device type</param>
            <param name="index">Index of the camera to be used. If there is only one camera or it does not matter what camera to use -1 may be passed. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.Release">
            <summary>
            Closes video file or capturing device.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VideoCapture.IsOpened">
            <summary>
            Returns true if video capturing has been initialized already.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.CaptureType">
            <summary>
            Gets the capture type (File or Camera) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.PosMsec">
            <summary>
            Gets or sets film current position in milliseconds or video capture timestamp 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.PosFrames">
            <summary>
            Gets or sets 0-based index of the frame to be decoded/captured next
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.PosAviRatio">
            <summary>
            Gets or sets relative position of video file
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.FrameWidth">
            <summary>
            Gets or sets width of frames in the video stream
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.FrameHeight">
            <summary>
            Gets or sets height of frames in the video stream 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.Fps">
            <summary>
            Gets or sets frame rate
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.FourCC">
            <summary>
            Gets or sets 4-character code of codec 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.FrameCount">
            <summary>
            Gets number of frames in video file 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.Brightness">
            <summary>
            Gets or sets brightness of image (only for cameras) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.Contrast">
            <summary>
            Gets or sets contrast of image (only for cameras) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.Saturation">
            <summary>
            Gets or sets saturation of image (only for cameras) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.Hue">
            <summary>
            Gets or sets hue of image (only for cameras) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.Format">
            <summary>
            The format of the Mat objects returned by retrieve()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.Mode">
            <summary>
            A backend-specific value indicating the current capture mode
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.Gain">
            <summary>
            Gain of the image (only for cameras)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.Exposure">
            <summary>
            Exposure (only for cameras)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.ConvertRgb">
            <summary>
            Boolean flags indicating whether images should be converted to RGB
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.WhiteBalance">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.Rectification">
            <summary>
            TOWRITE (note: only supported by DC1394 v 2.x backend currently)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.Monocrome">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.Sharpness">
            <summary>
            
            [CV_CAP_PROP_SHARPNESS]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.AutoExposure">
            <summary>
            exposure control done by camera,
            user can adjust refernce level using this feature
            [CV_CAP_PROP_AUTO_EXPOSURE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.Gamma">
            <summary>
            
            [CV_CAP_PROP_GAMMA]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.Temperature">
            <summary>
            
            [CV_CAP_PROP_TEMPERATURE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.Trigger">
            <summary>
            
            [CV_CAP_PROP_TRIGGER]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.TriggerDelay">
            <summary>
            
            [CV_CAP_PROP_TRIGGER_DELAY]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.WhiteBalanceRedV">
            <summary>
            
            [CV_CAP_PROP_WHITE_BALANCE_RED_V]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.MaxDC1394">
            <summary>
            
            [CV_CAP_PROP_MAX_DC1394]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.AutoGrab">
            <summary>
            property for highgui class CvCapture_Android only
            [CV_CAP_PROP_AUTOGRAB]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.SupportedPreviewSizesString">
            <summary>
            readonly, tricky property, returns cpnst char* indeed
            [CV_CAP_PROP_SUPPORTED_PREVIEW_SIZES_STRING]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.PreviewFormat">
            <summary>
            readonly, tricky property, returns cpnst char* indeed
            [CV_CAP_PROP_PREVIEW_FORMAT]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.OpenNI_OutputMode">
            <summary>
            
            [CV_CAP_PROP_OPENNI_OUTPUT_MODE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.OpenNI_FrameMaxDepth">
            <summary>
            in mm
            [CV_CAP_PROP_OPENNI_FRAME_MAX_DEPTH]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.OpenNI_Baseline">
            <summary>
            in mm
            [CV_CAP_PROP_OPENNI_BASELINE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.OpenNI_FocalLength">
            <summary>
            in pixels
            [CV_CAP_PROP_OPENNI_FOCAL_LENGTH]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.OpenNI_RegistrationON">
            <summary>
            flag
            [CV_CAP_PROP_OPENNI_REGISTRATION_ON]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.OpenNI_Registratiob">
            <summary>
            flag that synchronizes the remapping depth map to image map
            by changing depth generator's view point (if the flag is "on") or
            sets this view point to its normal one (if the flag is "off").
            [CV_CAP_PROP_OPENNI_REGISTRATION]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.OpenNI_ImageGeneratorOutputMode">
            <summary>
            
            [CV_CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.OpenNI_DepthGeneratorBaseline">
            <summary>
            
            [CV_CAP_OPENNI_DEPTH_GENERATOR_BASELINE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.OpenNI_DepthGeneratorFocalLength">
            <summary>
            
            [CV_CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.OpenNI_DepthGeneratorRegistrationON">
            <summary>
            
            [CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.GStreamerQueueLength">
            <summary>
            default is 1
            [CV_CAP_GSTREAMER_QUEUE_LENGTH]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.PvAPIMulticastIP">
            <summary>
            ip for anable multicast master mode. 0 for disable multicast
            [CV_CAP_PROP_PVAPI_MULTICASTIP]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_Downsampling">
            <summary>
            Change image resolution by binning or skipping.  
            [CV_CAP_PROP_XI_DOWNSAMPLING]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_DataFormat">
            <summary>
            Output data format.
            [CV_CAP_PROP_XI_DATA_FORMAT]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_OffsetX">
            <summary>
            Horizontal offset from the origin to the area of interest (in pixels).
            [CV_CAP_PROP_XI_OFFSET_X]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_OffsetY">
            <summary>
            Vertical offset from the origin to the area of interest (in pixels).
            [CV_CAP_PROP_XI_OFFSET_Y]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_TrgSource">
            <summary>
            Defines source of trigger.
            [CV_CAP_PROP_XI_TRG_SOURCE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_TrgSoftware">
            <summary>
            Generates an internal trigger. PRM_TRG_SOURCE must be set to TRG_SOFTWARE.
            [CV_CAP_PROP_XI_TRG_SOFTWARE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_GpiSelector">
            <summary>
            Selects general purpose input
            [CV_CAP_PROP_XI_GPI_SELECTOR]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_GpiMode">
            <summary>
            Set general purpose input mode
            [CV_CAP_PROP_XI_GPI_MODE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_GpiLevel">
            <summary>
            Get general purpose level
            [CV_CAP_PROP_XI_GPI_LEVEL]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_GpoSelector">
            <summary>
            Selects general purpose output 
            [CV_CAP_PROP_XI_GPO_SELECTOR]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_GpoMode">
            <summary>
            Set general purpose output mode
            [CV_CAP_PROP_XI_GPO_MODE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_LedSelector">
            <summary>
            Selects camera signalling LED 
            [CV_CAP_PROP_XI_LED_SELECTOR]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_LedMode">
            <summary>
            Define camera signalling LED functionality
            [CV_CAP_PROP_XI_LED_MODE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_ManualWB">
            <summary>
            Calculates White Balance(must be called during acquisition)
            [CV_CAP_PROP_XI_MANUAL_WB]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_AutoWB">
            <summary>
            Automatic white balance
            [CV_CAP_PROP_XI_AUTO_WB]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_AEAG">
            <summary>
            Automatic exposure/gain
            [CV_CAP_PROP_XI_AEAG]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_ExpPriority">
            <summary>
            Exposure priority (0.5 - exposure 50%, gain 50%).
            [CV_CAP_PROP_XI_EXP_PRIORITY]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_AEMaxLimit">
            <summary>
            Maximum limit of exposure in AEAG procedure
            [CV_CAP_PROP_XI_AE_MAX_LIMIT]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_AGMaxLimit">
            <summary>
            Maximum limit of gain in AEAG procedure
            [CV_CAP_PROP_XI_AG_MAX_LIMIT]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_AEAGLevel">
            <summary>
            default is 1
            [CV_CAP_PROP_XI_AEAG_LEVEL]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VideoCapture.XI_Timeout">
            <summary>
            default is 1
            [CV_CAP_PROP_XI_TIMEOUT]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VideoCapture.IntBytes">
            <summary>
            For accessing each byte of Int32 value
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.HiearchyIndex">
            <summary>
            Information about the image topology for cv::findContours
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HiearchyIndex.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HiearchyIndex.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="next"></param>
            <param name="previous"></param>
            <param name="child"></param>
            <param name="parent"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HiearchyIndex.FromVec4i(OpenCvSharp.CPlusPlus.Vec4i)">
            <summary>
            
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HiearchyIndex.ToVec4i">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.HiearchyIndex.Next">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.HiearchyIndex.Previous">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.HiearchyIndex.Child">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.HiearchyIndex.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Moments">
            <summary>
            Raster image moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.M00">
            <summary>
            spatial moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.M10">
            <summary>
            spatial moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.M01">
            <summary>
            spatial moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.M20">
            <summary>
            spatial moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.M11">
            <summary>
            spatial moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.M02">
            <summary>
            spatial moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.M30">
            <summary>
            spatial moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.M21">
            <summary>
            spatial moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.M12">
            <summary>
            spatial moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.M03">
            <summary>
            spatial moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.Mu20">
            <summary>
            central moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.Mu11">
            <summary>
            central moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.Mu02">
            <summary>
            central moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.Mu30">
            <summary>
            central moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.Mu21">
            <summary>
            central moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.Mu12">
            <summary>
            central moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.Mu03">
            <summary>
            central moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.Nu20">
            <summary>
            central normalized moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.Nu11">
            <summary>
            central normalized moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.Nu02">
            <summary>
            central normalized moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.Nu30">
            <summary>
            central normalized moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.Nu21">
            <summary>
            central normalized moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.Nu12">
            <summary>
            central normalized moments
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Moments.Nu03">
            <summary>
            central normalized moments
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Moments.#ctor">
            <summary>
            Default constructor.
            All moment values are set to 0.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Moments.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="m00"></param>
            <param name="m10"></param>
            <param name="m01"></param>
            <param name="m20"></param>
            <param name="m11"></param>
            <param name="m02"></param>
            <param name="m30"></param>
            <param name="m21"></param>
            <param name="m12"></param>
            <param name="m03"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Moments.#ctor(OpenCvSharp.CPlusPlus.InputArray,System.Boolean)">
            <summary>
            Calculates all of the moments 
            up to the third order of a polygon or rasterized shape.
            </summary>
            <param name="array">A raster image (single-channel, 8-bit or floating-point 
            2D array) or an array ( 1xN or Nx1 ) of 2D points ( Point or Point2f )</param>
            <param name="binaryImage">If it is true, then all the non-zero image pixels are treated as 1’s</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Moments.#ctor(System.Byte[0:,0:],System.Boolean)">
            <summary>
            Calculates all of the moments 
            up to the third order of a polygon or rasterized shape.
            </summary>
            <param name="array">A raster image (8-bit) 2D array</param>
            <param name="binaryImage">If it is true, then all the non-zero image pixels are treated as 1’s</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Moments.#ctor(System.Single[0:,0:],System.Boolean)">
            <summary>
            Calculates all of the moments 
            up to the third order of a polygon or rasterized shape.
            </summary>
            <param name="array">A raster image (floating-point) 2D array</param>
            <param name="binaryImage">If it is true, then all the non-zero image pixels are treated as 1’s</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Moments.#ctor(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point},System.Boolean)">
            <summary>
            Calculates all of the moments 
            up to the third order of a polygon or rasterized shape.
            </summary>
            <param name="array">Array of 2D points</param>
            <param name="binaryImage">If it is true, then all the non-zero image pixels are treated as 1’s</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Moments.#ctor(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f},System.Boolean)">
            <summary>
            Calculates all of the moments 
            up to the third order of a polygon or rasterized shape.
            </summary>
            <param name="array">Array of 2D points</param>
            <param name="binaryImage">If it is true, then all the non-zero image pixels are treated as 1’s</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Moments.InitializeFromInputArray(OpenCvSharp.CPlusPlus.InputArray,System.Boolean)">
            <summary>
            Calculates all of the moments 
            up to the third order of a polygon or rasterized shape.
            </summary>
            <param name="array">A raster image (single-channel, 8-bit or floating-point 
            2D array) or an array ( 1xN or Nx1 ) of 2D points ( Point or Point2f )</param>
            <param name="binaryImage">If it is true, then all the non-zero image pixels are treated as 1’s</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Moments.Initialize(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="m00"></param>
            <param name="m10"></param>
            <param name="m01"></param>
            <param name="m20"></param>
            <param name="m11"></param>
            <param name="m02"></param>
            <param name="m30"></param>
            <param name="m21"></param>
            <param name="m12"></param>
            <param name="m03"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Moments.op_Explicit(OpenCvSharp.CPlusPlus.Moments)~OpenCvSharp.CvMoments">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Moments.op_Explicit(OpenCvSharp.CvMoments)~OpenCvSharp.CPlusPlus.Moments">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Moments.HuMoments">
            <summary>
            computes 7 Hu invariants from the moments
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.SIFT">
            <summary>
            SIFT implementation.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SIFT.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            The SIFT constructor.
            </summary>
            <param name="nFeatures">The number of best features to retain. 
            The features are ranked by their scores (measured in SIFT algorithm as the local contrast)</param>
            <param name="nOctaveLayers">The number of layers in each octave. 3 is the value used in D. Lowe paper. 
            The number of octaves is computed automatically from the image resolution.</param>
            <param name="contrastThreshold">The contrast threshold used to filter out weak features in semi-uniform 
            (low-contrast) regions. The larger the threshold, the less features are produced by the detector.</param>
            <param name="edgeThreshold">The threshold used to filter out edge-like features. Note that the its meaning is 
            different from the contrastThreshold, i.e. the larger the edgeThreshold, the less features are filtered out (more features are retained).</param>
            <param name="sigma">The sigma of the Gaussian applied to the input image at the octave #0. 
            If your image is captured with a weak camera with soft lenses, you might want to reduce the number.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SIFT.#ctor(OpenCvSharp.CPlusPlus.Ptr{OpenCvSharp.CPlusPlus.SIFT})">
            <summary>
            Creates instance by cv::Ptr&lt;cv::SURF&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SIFT.#ctor(System.IntPtr)">
            <summary>
            Creates instance by raw pointer cv::SURF*
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SIFT.CreateAlgorithm(System.String)">
            <summary>
            Creates a cv::Algorithm object using cv::Algorithm::create()
            </summary>
            <param name="name">The algorithm name, one of the names returned by Algorithm.GetList()</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SIFT.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SIFT.FromRawPtr(System.IntPtr)">
            <summary>
            Creates instance from raw pointer T*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SIFT.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SIFT.Run(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray)">
            <summary>
            Extract features and computes their descriptors using SIFT algorithm
            </summary>
            <param name="img">Input 8-bit grayscale image</param>
            <param name="mask">Optional input mask that marks the regions where we should detect features.</param>
            <returns>The output vector of keypoints</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SIFT.Run(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.KeyPoint[]@,OpenCvSharp.CPlusPlus.OutputArray,System.Boolean)">
            <summary>
            detects keypoints and computes the SIFT descriptors for them. 
            </summary>
            <param name="img">Input 8-bit grayscale image</param>
            <param name="mask">Optional input mask that marks the regions where we should detect features.</param>
            <param name="keypoints">The input/output vector of keypoints</param>
            <param name="descriptors">The output matrix of descriptors. </param>
            <param name="useProvidedKeypoints">Boolean flag. If it is true, the keypoint detector is not run. 
            Instead, the provided vector of keypoints is used and the algorithm just computes their descriptors.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SIFT.Run(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.KeyPoint[]@,System.Single[]@,System.Boolean)">
            <summary>
            detects keypoints and computes the SIFT descriptors for them. 
            </summary>
            <param name="img">Input 8-bit grayscale image</param>
            <param name="mask">Optional input mask that marks the regions where we should detect features.</param>
            <param name="keypoints">The input/output vector of keypoints</param>
            <param name="descriptors">The output matrix of descriptors. </param>
            <param name="useProvidedKeypoints">Boolean flag. If it is true, the keypoint detector is not run. 
            Instead, the provided vector of keypoints is used and the algorithm just computes their descriptors.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SIFT.BuildGaussianPyramid(OpenCvSharp.CPlusPlus.Mat,System.Int32)">
            <summary>
            
            </summary>
            <param name="baseMat"></param>
            <param name="nOctaves"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SIFT.BuildDoGPyramid(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat})">
            <summary>
            
            </summary>
            <param name="pyr"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SIFT.FindScaleSpaceExtrema(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat})">
            <summary>
            
            </summary>
            <param name="gaussPyr"></param>
            <param name="dogPyr"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SIFT.DescriptorSize">
            <summary>
            returns the descriptor size in float's (64 or 128)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SIFT.DescriptorType">
            <summary>
            returns the descriptor type
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SIFT.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.DMatch">
            <summary>
            Struct for matching: query descriptor index, train descriptor index, train image index and distance between descriptors.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DMatch.QueryIdx">
            <summary>
            query descriptor index
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DMatch.TrainIdx">
            <summary>
            train descriptor index
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DMatch.ImgIdx">
            <summary>
            train image index
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DMatch.Distance">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DMatch.Empty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DMatch.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="queryIdx"></param>
            <param name="trainIdx"></param>
            <param name="distance"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DMatch.#ctor(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="queryIdx"></param>
            <param name="trainIdx"></param>
            <param name="imgIdx"></param>
            <param name="distance"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DMatch.op_LessThan(OpenCvSharp.CPlusPlus.DMatch,OpenCvSharp.CPlusPlus.DMatch)">
            <summary>
            Compares by distance (less is beter)
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DMatch.op_GreaterThan(OpenCvSharp.CPlusPlus.DMatch,OpenCvSharp.CPlusPlus.DMatch)">
            <summary>
            Compares by distance (less is beter)
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DMatch.op_Explicit(OpenCvSharp.CPlusPlus.DMatch)~OpenCvSharp.CPlusPlus.Vec4f">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DMatch.op_Explicit(OpenCvSharp.CPlusPlus.Vec4f)~OpenCvSharp.CPlusPlus.DMatch">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.DMatch.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Point3d">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point3d.SizeOf">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point3d.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point3d.Y">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point3d.Z">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3d.op_Implicit(OpenCvSharp.CPlusPlus.Point3d)~OpenCvSharp.CvPoint3D64f">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3d.op_Implicit(OpenCvSharp.CvPoint3D64f)~OpenCvSharp.CPlusPlus.Point3d">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3d.op_Implicit(OpenCvSharp.CPlusPlus.Point3d)~OpenCvSharp.CPlusPlus.Vec3d">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3d.op_Implicit(OpenCvSharp.CPlusPlus.Vec3d)~OpenCvSharp.CPlusPlus.Point3d">
            <summary>
            
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3d.Equals(OpenCvSharp.CPlusPlus.Point3d)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3d.op_Equality(OpenCvSharp.CPlusPlus.Point3d,OpenCvSharp.CPlusPlus.Point3d)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the values of the X and Y properties of the two CvPoint objects are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the X and Y values of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3d.op_Inequality(OpenCvSharp.CPlusPlus.Point3d,OpenCvSharp.CPlusPlus.Point3d)">
            <summary>
            Compares two CvPoint2D32f objects. The result specifies whether the values of the X or Y properties of the two CvPoint2D32f objects are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the values of either the X properties or the Y properties of left and right differ; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3d.op_UnaryPlus(OpenCvSharp.CPlusPlus.Point3d)">
            <summary>
            Unary plus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3d.op_UnaryNegation(OpenCvSharp.CPlusPlus.Point3d)">
            <summary>
            Unary minus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3d.op_Addition(OpenCvSharp.CPlusPlus.Point3d,OpenCvSharp.CPlusPlus.Point3d)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3d.op_Subtraction(OpenCvSharp.CPlusPlus.Point3d,OpenCvSharp.CPlusPlus.Point3d)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3d.op_Multiply(OpenCvSharp.CPlusPlus.Point3d,System.Double)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="pt"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3d.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3d.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3d.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Point3i">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point3i.SizeOf">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point3i.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point3i.Y">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point3i.Z">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3i.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3i.op_Implicit(OpenCvSharp.CPlusPlus.Point3i)~OpenCvSharp.CPlusPlus.Vec3i">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3i.op_Implicit(OpenCvSharp.CPlusPlus.Vec3i)~OpenCvSharp.CPlusPlus.Point3i">
            <summary>
            
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3i.Equals(OpenCvSharp.CPlusPlus.Point3i)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3i.op_Equality(OpenCvSharp.CPlusPlus.Point3i,OpenCvSharp.CPlusPlus.Point3i)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the values of the X and Y properties of the two CvPoint objects are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the X and Y values of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3i.op_Inequality(OpenCvSharp.CPlusPlus.Point3i,OpenCvSharp.CPlusPlus.Point3i)">
            <summary>
            Compares two CvPoint2D32f objects. The result specifies whether the values of the X or Y properties of the two CvPoint2D32f objects are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the values of either the X properties or the Y properties of left and right differ; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3i.op_UnaryPlus(OpenCvSharp.CPlusPlus.Point3i)">
            <summary>
            Unary plus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3i.op_UnaryNegation(OpenCvSharp.CPlusPlus.Point3i)">
            <summary>
            Unary minus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3i.op_Addition(OpenCvSharp.CPlusPlus.Point3i,OpenCvSharp.CPlusPlus.Point3i)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3i.op_Subtraction(OpenCvSharp.CPlusPlus.Point3i,OpenCvSharp.CPlusPlus.Point3i)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3i.op_Multiply(OpenCvSharp.CPlusPlus.Point3i,System.Double)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="pt"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3i.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3i.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3i.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Rangef">
            <summary>
            float Range class
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Rangef.Start">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Rangef.End">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rangef.#ctor(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rangef.op_Implicit(OpenCvSharp.CPlusPlus.Rangef)~OpenCvSharp.CPlusPlus.Range">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Rangef.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Point2d">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point2d.SizeOf">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point2d.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point2d.Y">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.op_Implicit(OpenCvSharp.CPlusPlus.Point2d)~OpenCvSharp.CvPoint2D64f">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.op_Implicit(OpenCvSharp.CvPoint2D64f)~OpenCvSharp.CPlusPlus.Point2d">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.op_Implicit(OpenCvSharp.CPlusPlus.Point2d)~OpenCvSharp.CPlusPlus.Point">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.op_Implicit(OpenCvSharp.CPlusPlus.Point)~OpenCvSharp.CPlusPlus.Point2d">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.op_Implicit(OpenCvSharp.CPlusPlus.Point2d)~OpenCvSharp.CPlusPlus.Vec2d">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.op_Implicit(OpenCvSharp.CPlusPlus.Vec2d)~OpenCvSharp.CPlusPlus.Point2d">
            <summary>
            
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.Equals(OpenCvSharp.CPlusPlus.Point2d)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.op_Equality(OpenCvSharp.CPlusPlus.Point2d,OpenCvSharp.CPlusPlus.Point2d)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the values of the X and Y properties of the two CvPoint objects are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the X and Y values of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.op_Inequality(OpenCvSharp.CPlusPlus.Point2d,OpenCvSharp.CPlusPlus.Point2d)">
            <summary>
            Compares two CvPoint2D32f objects. The result specifies whether the values of the X or Y properties of the two CvPoint2D32f objects are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the values of either the X properties or the Y properties of left and right differ; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.op_UnaryPlus(OpenCvSharp.CPlusPlus.Point2d)">
            <summary>
            Unary plus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.op_UnaryNegation(OpenCvSharp.CPlusPlus.Point2d)">
            <summary>
            Unary minus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.op_Addition(OpenCvSharp.CPlusPlus.Point2d,OpenCvSharp.CPlusPlus.Point2d)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.op_Subtraction(OpenCvSharp.CPlusPlus.Point2d,OpenCvSharp.CPlusPlus.Point2d)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.op_Multiply(OpenCvSharp.CPlusPlus.Point2d,System.Double)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="pt"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.Distance(OpenCvSharp.CPlusPlus.Point2d,OpenCvSharp.CPlusPlus.Point2d)">
            <summary>
            Returns the distance between the specified two points
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.DistanceTo(OpenCvSharp.CPlusPlus.Point2d)">
            <summary>
            Returns the distance between the specified two points
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.DotProduct(OpenCvSharp.CPlusPlus.Point2d,OpenCvSharp.CPlusPlus.Point2d)">
            <summary>
            Calculates the dot product of two 2D vectors.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.DotProduct(OpenCvSharp.CPlusPlus.Point2d)">
            <summary>
            Calculates the dot product of two 2D vectors.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.CrossProduct(OpenCvSharp.CPlusPlus.Point2d,OpenCvSharp.CPlusPlus.Point2d)">
            <summary>
            Calculates the cross product of two 2D vectors.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2d.CrossProduct(OpenCvSharp.CPlusPlus.Point2d)">
            <summary>
            Calculates the cross product of two 2D vectors.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfDouble">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.IStdVector`1">
            <summary>
            Represents std::vector 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.IStdVector`1.ToArray">
            <summary>
            Convert std::vector&lt;T&gt; to managed array T[]
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.IStdVector`1.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.IStdVector`1.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfDouble.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfDouble.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfDouble.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfDouble.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfDouble.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfDouble.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfDouble.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfDouble.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfInt32">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfInt32.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfInt32.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfInt32.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfInt32.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfInt32.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfInt32.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfInt32.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfInt32.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfInt32.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfDMatch">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfDMatch.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfDMatch.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfDMatch.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfDMatch.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfDMatch.#ctor(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.DMatch})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfDMatch.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfDMatch.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfDMatch.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfDMatch.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfVec6d">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfVec6d.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec6d.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec6d.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec6d.#ctor(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Vec6d})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec6d.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec6d.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec6d.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec6d.ToArray``1">
            <summary>
            Converts std::vector to managed array
            </summary>
            <typeparam name="T">structure that has four int members (ex. CvLineSegmentPoint, CvRect)</typeparam>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVec6d.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVec6d.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfVectorDouble">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfVectorDouble.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorDouble.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorDouble.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorDouble.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorDouble.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorDouble.Size1">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorDouble.Size2">
            <summary>
            vector[i].size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorDouble.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfVectorFloat">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfVectorFloat.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorFloat.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorFloat.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorFloat.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorFloat.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorFloat.Size1">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorFloat.Size2">
            <summary>
            vector[i].size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorFloat.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfVectorDMatch">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfVectorDMatch.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorDMatch.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorDMatch.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorDMatch.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorDMatch.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorDMatch.Size1">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorDMatch.Size2">
            <summary>
            vector[i].size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorDMatch.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfVectorPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfVectorPoint.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorPoint.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorPoint.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorPoint.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorPoint.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorPoint.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorPoint.Size1">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorPoint.Size2">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorPoint.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfString">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfString.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfString.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfString.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfString.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfString.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfString.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfString.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfString.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Window">
            <summary>
            Wrapper of HighGUI window
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Window.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.#ctor">
            <summary>
            Creates a window with a random name
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Creates a window with a random name and a specified image
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.#ctor(OpenCvSharp.WindowMode,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Creates a window with a specified image and flag
            </summary>
            <param name="flags">Flags of the window. Currently the only supported flag is WindowMode.AutoSize. 
            If it is set, window size is automatically adjusted to fit the displayed image (see cvShowImage), while user can not change the window size manually. </param>
            <param name="image"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.#ctor(System.String)">
            <summary>
            Creates a window
            </summary>
            <param name="name">Name of the window which is used as window identifier and appears in the window caption. </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.#ctor(System.String,OpenCvSharp.WindowMode)">
            <summary>
            Creates a window
            </summary>
            <param name="name">Name of the window which is used as window identifier and appears in the window caption. </param>
            <param name="flags">Flags of the window. Currently the only supported flag is WindowMode.AutoSize. 
            If it is set, window size is automatically adjusted to fit the displayed image (see cvShowImage), while user can not change the window size manually. </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.#ctor(System.String,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Creates a window
            </summary>
            <param name="name">Name of the window which is used as window identifier and appears in the window caption. </param>
            <param name="image">Image to be shown.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.#ctor(System.String,OpenCvSharp.WindowMode,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Creates a window
            </summary>
            <param name="name">Name of the window which is used as window identifier and appears in the window caption. </param>
            <param name="flags">Flags of the window. Currently the only supported flag is WindowMode.AutoSize. 
            If it is set, window size is automatically adjusted to fit the displayed image (see cvShowImage), while user can not change the window size manually. </param>
            <param name="image">Image to be shown.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.DefaultName">
            <summary>
            ウィンドウ名が指定されなかったときに、適当な名前を作成して返す.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.Close">
            <summary>
            Destroys this window. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.DestroyAllWindows">
            <summary>
            Destroys all the opened HighGUI windows. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.CreateTrackbar(System.String,OpenCvSharp.CvTrackbarCallback)">
            <summary>
            Creates the trackbar and attaches it to this window
            </summary>
            <param name="name">Name of created trackbar. </param>
            <param name="callback">the function to be called every time the slider changes the position. This function should be prototyped as void Foo(int);</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.CreateTrackbar(System.String,System.Int32,System.Int32,OpenCvSharp.CvTrackbarCallback)">
            <summary>
            Creates the trackbar and attaches it to this window
            </summary>
            <param name="name">Name of created trackbar. </param>
            <param name="value">The position of the slider</param>
            <param name="max">Maximal position of the slider. Minimal position is always 0. </param>
            <param name="callback">the function to be called every time the slider changes the position. This function should be prototyped as void Foo(int);</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.CreateTrackbar2(System.String,System.Int32,System.Int32,OpenCvSharp.CvTrackbarCallback2,System.Object)">
            <summary>
            Creates the trackbar and attaches it to this window
            </summary>
            <param name="name">Name of created trackbar. </param>
            <param name="value">The position of the slider</param>
            <param name="max">Maximal position of the slider. Minimal position is always 0. </param>
            <param name="callback">the function to be called every time the slider changes the position. This function should be prototyped as void Foo(int);</param>
            <param name="userdata"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.DisplayOverlay(System.String,System.Int32)">
            <summary>
            Display text on the window's image as an overlay for delay milliseconds. This is not editing the image's data. The text is display on the top of the image.
            </summary>
            <param name="text">Overlay text to write on the window’s image</param>
            <param name="delayms">Delay to display the overlay text. If this function is called before the previous overlay text time out, the timer is restarted and the text updated. . If this value is zero, the text never disapers.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.DisplayStatusBar(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="text">Text to write on the window’s statusbar</param>
            <param name="delayms">Delay to display the text. If this function is called before the previous text time out, the timer is restarted and the text updated. If this value is zero, the text never disapers.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.GetProperty(OpenCvSharp.WindowProperty)">
            <summary>
            Get Property of the window
            </summary>
            <param name="propId">Property identifier</param>
            <returns>Value of the specified property</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.LoadWindowParameters">
            <summary>
            Load parameters of the window.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.Move(System.Int32,System.Int32)">
            <summary>
            Sets window position
            </summary>
            <param name="x">New x coordinate of top-left corner </param>
            <param name="y">New y coordinate of top-left corner </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.Resize(System.Int32,System.Int32)">
            <summary>
            Sets window size
            </summary>
            <param name="width">New width </param>
            <param name="height">New height </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.SaveWindowParameters">
            <summary>
            Save parameters of the window.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.SetProperty(OpenCvSharp.WindowProperty,OpenCvSharp.WindowPropertyValue)">
            <summary>
            Set Property of the window
            </summary>
            <param name="propId">Property identifier</param>
            <param name="propValue">New value of the specified property</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.SetProperty(OpenCvSharp.WindowProperty,System.Double)">
            <summary>
            Set Property of the window
            </summary>
            <param name="propId">Property identifier</param>
            <param name="propValue">New value of the specified property</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.ShowImage(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Shows the image in this window
            </summary>
            <param name="img">Image to be shown. </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.WaitKey">
            <summary>
            Waits for a pressed key
            </summary>
            <returns>Key code</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.WaitKey(System.Int32)">
            <summary>
            Waits for a pressed key
            </summary>
            <param name="delay">Delay in milliseconds. </param>
            <returns>Key code</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.ShowImages(OpenCvSharp.CPlusPlus.Mat[])">
            <summary>
            
            </summary>
            <param name="images"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.ShowImages(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Mat},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="images"></param>
            <param name="names"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Window.GetWindowByName(System.String)">
            <summary>
            Retrieves a created window by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Window.Image">
            <summary>
            Gets or sets an image to be shown
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Window.Name">
            <summary>
            Gets window name
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Window.Handle">
            <summary>
            Gets window handle
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Window.MouseCallback">
            <summary>
            
            </summary>
        </member>
        <member name="E:OpenCvSharp.CPlusPlus.Window.OnMouseCallback">
            <summary>
            Event handler to be called every time mouse event occurs in the specified window. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Window.HasQt">
            <summary>
            Returns true if the library is compiled with Qt
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Subdiv2D">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Subdiv2D.PTLOC_ERROR">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Subdiv2D.PTLOC_OUTSIDE_RECT">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Subdiv2D.PTLOC_INSIDE">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Subdiv2D.PTLOC_VERTEX">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Subdiv2D.PTLOC_ON_EDGE">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Subdiv2D.NEXT_AROUND_ORG">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Subdiv2D.NEXT_AROUND_DST">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Subdiv2D.PREV_AROUND_ORG">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Subdiv2D.PREV_AROUND_DST">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Subdiv2D.NEXT_AROUND_LEFT">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Subdiv2D.NEXT_AROUND_RIGHT">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Subdiv2D.PREV_AROUND_LEFT">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Subdiv2D.PREV_AROUND_RIGHT">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Subdiv2D.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.#ctor(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Subdiv2D Constructor
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.Release">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.InitDelaunay(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.Insert(OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.Insert(OpenCvSharp.CPlusPlus.Point2f[])">
            <summary>
            
            </summary>
            <param name="ptvec"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.Insert(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f})">
            <summary>
            
            </summary>
            <param name="ptvec"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.Locate(OpenCvSharp.CPlusPlus.Point2f,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <param name="edge"></param>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.FindNearest(OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.FindNearest(OpenCvSharp.CPlusPlus.Point2f,OpenCvSharp.CPlusPlus.Point2f@)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <param name="nearestPt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.GetEdgeList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.GetTriangleList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.GetVoronoiFacetList(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Point2f[][]@,OpenCvSharp.CPlusPlus.Point2f[]@)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <param name="facetList"></param>
            <param name="facetCenters"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.GetVertex(System.Int32)">
            <summary>
            
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.GetVertex(System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="vertex"></param>
            <param name="firstEdge"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.GetEdge(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="nextEdgeType"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.NextEdge(System.Int32)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.RotateEdge(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="rotate"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.SymEdge(System.Int32)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.EdgeOrg(System.Int32)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.EdgeOrg(System.Int32,OpenCvSharp.CPlusPlus.Point2f@)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="orgpt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.EdgeDst(System.Int32)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Subdiv2D.EdgeDst(System.Int32,OpenCvSharp.CPlusPlus.Point2f@)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <param name="dstpt"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvAdaptiveSkinDetector">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvAdaptiveSkinDetector.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvAdaptiveSkinDetector.#ctor(System.Int32,OpenCvSharp.CPlusPlus.MorphingMethod)">
            <summary>
            
            </summary>
            <param name="samplingDivider"></param>
            <param name="morphingMethod"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvAdaptiveSkinDetector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvAdaptiveSkinDetector.Process(OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            
            </summary>
            <param name="inputBgrImage"></param>
            <param name="outputHueMask"></param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CvCamShiftTracker">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CvCamShiftTracker.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.GetOrientation">
            <summary>
            orientation of the object in degrees
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.GetLength">
            <summary>
            the larger linear size of the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.GetWidth">
            <summary>
            the smaller linear size of the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.GetCenter">
            <summary>
            center of the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.GetWindow">
            <summary>
            bounding rectangle for the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.GetThreshold">
            <summary>
            thresholding value that applied to back project
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.GetHistDims(System.Int32[])">
            <summary>
            returns number of histogram dimensions and sets
            </summary>
            <param name="dims"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.GetMinChVal(System.Int32)">
            <summary>
            get the minimum allowed value of the specified channel
            </summary>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.GetMaxChVal(System.Int32)">
            <summary>
            get the maximum allowed value of the specified channel
            </summary>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.SetWindow(OpenCvSharp.CvRect)">
            <summary>
            set initial object rectangle (must be called before initial calculation of the histogram)
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.SetThreshold(System.Int32)">
            <summary>
            threshold applied to the histogram bins
            </summary>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.SetHistBinRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="dim"></param>
            <param name="minVal"></param>
            <param name="maxVal"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.SetHistDims(System.Int32,System.Int32[])">
            <summary>
            set the histogram parameters
            </summary>
            <param name="cDims"></param>
            <param name="dims"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.SetMinChVal(System.Int32,System.Int32)">
            <summary>
            set the minimum allowed value of the specified channel
            </summary>
            <param name="channel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.SetMaxChVal(System.Int32,System.Int32)">
            <summary>
            set the maximum allowed value of the specified channel
            </summary>
            <param name="channel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.TrackObject(OpenCvSharp.IplImage)">
            <summary>
            update object position
            </summary>
            <param name="curFrame"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.UpdateHistogram(OpenCvSharp.IplImage)">
            <summary>
            update object histogram
            </summary>
            <param name="curFrame"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.ResetHistogram">
            <summary>
            reset histogram
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.GetBackProject">
            <summary>
            get back project image
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.CvCamShiftTracker.Query(System.Int32[])">
            <summary>
            
            </summary>
            <param name="bin"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.DumpFormat">
            <summary>
            Output string format of Mat.Dump()
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DumpFormat.Default">
            <summary>
            Default format. 
            [1, 2, 3, 4, 5, 6; \n
            7, 8, 9, ... ]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DumpFormat.Python">
            <summary>
            Python format. 
            [[[1, 2, 3], [4, 5, 6]], \n
            [[7, 8, 9], ... ]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DumpFormat.NumPy">
            <summary>
            NumPy format. 
            array([[[1, 2, 3], [4, 5, 6]], \n
            [[7, 8, 9], .... ]]], type='uint8');
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DumpFormat.Csv">
            <summary>
            CSV format. 
            1, 2, 3, 4, 5, 6\n
            7, 8, 9, ...
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.DumpFormat.C">
            <summary>
            C language format. 
            {1, 2, 3, 4, 5, 6, \n
            7, 8, 9, ...}; 
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.InOutArrayKind">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.StructuringElementShape">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.StructuringElementShape.Rect">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.StructuringElementShape.Cross">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.StructuringElementShape.Ellipse">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.HOGDescriptor">
            <summary>
            HOG (Histogram-of-Oriented-Gradients) Descriptor and Object Detector
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.HOGDescriptor.L2Hys">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.HOGDescriptor.DefaultNlevels">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.HOGDescriptor.SizeOf">
            <summary>
            sizeof(HOGDescriptor) 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.HOGDescriptor.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.HOGDescriptor.DefaultPeopleDetector">
            <summary>
            Returns coefficients of the classifier trained for people detection (for default window size).
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.HOGDescriptor.DaimlerPeopleDetector">
            <summary>
            This field returns 1981 SVM coeffs obtained from daimler's base.
            To use these coeffs the detection window size should be (48,96)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.#ctor(System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Int32,System.Int32,System.Double,OpenCvSharp.CPlusPlus.HistogramNormType,System.Double,System.Boolean,System.Int32)">
            <summary>
            Creates the HOG descriptor and detector.
            </summary>
            <param name="winSize">Detection window size. Align to block size and block stride.</param>
            <param name="blockSize">Block size in pixels. Align to cell size. Only (16,16) is supported for now.</param>
            <param name="blockStride">Block stride. It must be a multiple of cell size.</param>
            <param name="cellSize">Cell size. Only (8, 8) is supported for now.</param>
            <param name="nbins">Number of bins. Only 9 bins per cell are supported for now.</param>
            <param name="derivAperture"></param>
            <param name="winSigma">Gaussian smoothing window parameter.</param>
            <param name="histogramNormType"></param>
            <param name="l2HysThreshold">L2-Hys normalization method shrinkage.</param>
            <param name="gammaCorrection">Flag to specify whether the gamma correction preprocessing is required or not.</param>
            <param name="nlevels">Maximum number of detection window increases.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.#ctor(System.IntPtr)">
            <summary>
            Initializes from pointer
            </summary>
            <param name="ptr">class HOGDescriptor*</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.GetDefaultPeopleDetector">
            <summary>
            Returns coefficients of the classifier trained for people detection (for default window size).
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.GetDaimlerPeopleDetector">
            <summary>
            This method returns 1981 SVM coeffs obtained from daimler's base.
            To use these coeffs the detection window size should be (48,96)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.SetSVMDetector(System.Single[])">
            <summary>
            
            </summary>
            <param name="svmDetector"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.Load(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="objName"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.Save(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="objName"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.GetDescriptorSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.CheckDetectorSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.GetWinSigma">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.Compute(OpenCvSharp.CPlusPlus.Mat,System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Nullable{OpenCvSharp.CPlusPlus.Size},OpenCvSharp.CPlusPlus.Point[])">
            <summary>
            
            </summary>
            <param name="img"></param>
            <param name="winStride"></param>
            <param name="padding"></param>
            <param name="locations"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.Detect(OpenCvSharp.CPlusPlus.Mat,System.Double,System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Nullable{OpenCvSharp.CPlusPlus.Size},OpenCvSharp.CPlusPlus.Point[])">
            <summary>
            Performs object detection without a multi-scale window.
            </summary>
            <param name="img">Source image. CV_8UC1 and CV_8UC4 types are supported for now.</param>
            <param name="hitThreshold">Threshold for the distance between features and SVM classifying plane. 
            Usually it is 0 and should be specfied in the detector coefficients (as the last free coefficient). 
            But if the free coefficient is omitted (which is allowed), you can specify it manually here.</param>
            <param name="winStride">Window stride. It must be a multiple of block stride.</param>
            <param name="padding">Mock parameter to keep the CPU interface compatibility. It must be (0,0).</param>
            <param name="searchLocations"></param>
            <returns>Left-top corner points of detected objects boundaries.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.Detect(OpenCvSharp.CPlusPlus.Mat,System.Double[]@,System.Double,System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Nullable{OpenCvSharp.CPlusPlus.Size},OpenCvSharp.CPlusPlus.Point[])">
            <summary>
            Performs object detection without a multi-scale window.
            </summary>
            <param name="img">Source image. CV_8UC1 and CV_8UC4 types are supported for now.</param>
            <param name="weights"></param>
            <param name="hitThreshold">Threshold for the distance between features and SVM classifying plane. 
            Usually it is 0 and should be specfied in the detector coefficients (as the last free coefficient). 
            But if the free coefficient is omitted (which is allowed), you can specify it manually here.</param>
            <param name="winStride">Window stride. It must be a multiple of block stride.</param>
            <param name="padding">Mock parameter to keep the CPU interface compatibility. It must be (0,0).</param>
            <param name="searchLocations"></param>
            <returns>Left-top corner points of detected objects boundaries.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.DetectMultiScale(OpenCvSharp.CPlusPlus.Mat,System.Double,System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Double,System.Int32)">
            <summary>
            Performs object detection with a multi-scale window.
            </summary>
            <param name="img">Source image. CV_8UC1 and CV_8UC4 types are supported for now.</param>
            <param name="hitThreshold">Threshold for the distance between features and SVM classifying plane.</param>
            <param name="winStride">Window stride. It must be a multiple of block stride.</param>
            <param name="padding">Mock parameter to keep the CPU interface compatibility. It must be (0,0).</param>
            <param name="scale">Coefficient of the detection window increase.</param>
            <param name="groupThreshold">Coefficient to regulate the similarity threshold. 
            When detected, some objects can be covered by many rectangles. 0 means not to perform grouping.</param>
            <returns>Detected objects boundaries.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.DetectMultiScale(OpenCvSharp.CPlusPlus.Mat,System.Double[]@,System.Double,System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Double,System.Int32)">
            <summary>
            Performs object detection with a multi-scale window.
            </summary>
            <param name="img">Source image. CV_8UC1 and CV_8UC4 types are supported for now.</param>
            <param name="foundWeights"></param>
            <param name="hitThreshold">Threshold for the distance between features and SVM classifying plane.</param>
            <param name="winStride">Window stride. It must be a multiple of block stride.</param>
            <param name="padding">Mock parameter to keep the CPU interface compatibility. It must be (0,0).</param>
            <param name="scale">Coefficient of the detection window increase.</param>
            <param name="groupThreshold">Coefficient to regulate the similarity threshold. 
            When detected, some objects can be covered by many rectangles. 0 means not to perform grouping.</param>
            <returns>Detected objects boundaries.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.ComputeGradient(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Nullable{OpenCvSharp.CPlusPlus.Size})">
            <summary>
            
            </summary>
            <param name="img"></param>
            <param name="grad"></param>
            <param name="angleOfs"></param>
            <param name="paddingTL"></param>
            <param name="paddingBR"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.DetectROI(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Point[],OpenCvSharp.CPlusPlus.Point[]@,System.Double[]@,System.Double,System.Nullable{OpenCvSharp.CPlusPlus.Size},System.Nullable{OpenCvSharp.CPlusPlus.Size})">
            <summary>
            evaluate specified ROI and return confidence value for each location
            </summary>
            <param name="img"></param>
            <param name="locations"></param>
            <param name="foundLocations"></param>
            <param name="confidences"></param>
            <param name="hitThreshold"></param>
            <param name="winStride"></param>
            <param name="padding"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.DetectMultiScaleROI(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Rect[]@,OpenCvSharp.CPlusPlus.DetectionROI[]@,System.Double,System.Int32)">
            <summary>
            evaluate specified ROI and return confidence value for each location in multiple scales
            </summary>
            <param name="img"></param>
            <param name="foundLocations"></param>
            <param name="locations"></param>
            <param name="hitThreshold"></param>
            <param name="groupThreshold"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.ReadALTModel(System.String)">
            <summary>
            read/parse Dalal's alt model file
            </summary>
            <param name="modelFile"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.HOGDescriptor.GroupRectangles(OpenCvSharp.CPlusPlus.Rect[]@,System.Double[]@,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="rectList"></param>
            <param name="weights"></param>
            <param name="groupThreshold"></param>
            <param name="eps"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.HOGDescriptor.WinSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.HOGDescriptor.BlockSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.HOGDescriptor.BlockStride">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.HOGDescriptor.CellSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.HOGDescriptor.Nbins">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.HOGDescriptor.DerivAperture">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.HOGDescriptor.WinSigma">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.HOGDescriptor.HistogramNormType">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.HOGDescriptor.L2HysThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.HOGDescriptor.GammaCorrection">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.HOGDescriptor.NLevels">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.DetectionROI">
            <summary>
            struct for detection region of interest (ROI)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.DetectionROI.Scale">
            <summary>
            scale(size) of the bounding box
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.DetectionROI.Locations">
            <summary>
            set of requrested locations to be evaluated
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.DetectionROI.Confidences">
            <summary>
            vector that will contain confidence values for each location
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.IVec`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.IVec`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatType">
            <summary>
            Matrix data type (depth and number of channels)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_8U">
            <summary>
            type depth constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_8S">
            <summary>
            type depth constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_16U">
            <summary>
            type depth constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_16S">
            <summary>
            type depth constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_32S">
            <summary>
            type depth constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_32F">
            <summary>
            type depth constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_64F">
            <summary>
            type depth constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_USRTYPE1">
            <summary>
            type depth constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.Value">
            <summary>
            Entity value
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatType.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatType.op_Implicit(OpenCvSharp.CPlusPlus.MatType)~System.Int32">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatType.op_Implicit(System.Int32)~OpenCvSharp.CPlusPlus.MatType">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatType.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_8UC1">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_8UC2">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_8UC3">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_8UC4">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_8SC1">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_8SC2">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_8SC3">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_8SC4">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_16UC1">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_16UC2">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_16UC3">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_16UC4">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_16SC1">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_16SC2">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_16SC3">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_16SC4">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_32SC1">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_32SC2">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_32SC3">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_32SC4">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_32FC1">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_32FC2">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_32FC3">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_32FC4">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_64FC1">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_64FC2">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_64FC3">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatType.CV_64FC4">
            <summary>
            predefined type constants
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatType.Depth">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatType.IsInteger">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatType.Channels">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Point3f">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point3f.SizeOf">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point3f.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point3f.Y">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point3f.Z">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3f.op_Implicit(OpenCvSharp.CPlusPlus.Point3f)~OpenCvSharp.CvPoint3D32f">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3f.op_Implicit(OpenCvSharp.CvPoint3D32f)~OpenCvSharp.CPlusPlus.Point3f">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3f.op_Implicit(OpenCvSharp.CPlusPlus.Point3f)~OpenCvSharp.CPlusPlus.Vec3f">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3f.op_Implicit(OpenCvSharp.CPlusPlus.Vec3f)~OpenCvSharp.CPlusPlus.Point3f">
            <summary>
            
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3f.Equals(OpenCvSharp.CPlusPlus.Point3f)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3f.op_Equality(OpenCvSharp.CPlusPlus.Point3f,OpenCvSharp.CPlusPlus.Point3f)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the values of the X and Y properties of the two CvPoint objects are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the X and Y values of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3f.op_Inequality(OpenCvSharp.CPlusPlus.Point3f,OpenCvSharp.CPlusPlus.Point3f)">
            <summary>
            Compares two CvPoint2D32f objects. The result specifies whether the values of the X or Y properties of the two CvPoint2D32f objects are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the values of either the X properties or the Y properties of left and right differ; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3f.op_UnaryPlus(OpenCvSharp.CPlusPlus.Point3f)">
            <summary>
            Unary plus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3f.op_UnaryNegation(OpenCvSharp.CPlusPlus.Point3f)">
            <summary>
            Unary minus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3f.op_Addition(OpenCvSharp.CPlusPlus.Point3f,OpenCvSharp.CPlusPlus.Point3f)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3f.op_Subtraction(OpenCvSharp.CPlusPlus.Point3f,OpenCvSharp.CPlusPlus.Point3f)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3f.op_Multiply(OpenCvSharp.CPlusPlus.Point3f,System.Double)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="pt"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3f.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3f.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point3f.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Point2f">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point2f.SizeOf">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point2f.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point2f.Y">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.#ctor(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.op_Implicit(OpenCvSharp.CPlusPlus.Point2f)~OpenCvSharp.CvPoint2D32f">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.op_Implicit(OpenCvSharp.CvPoint2D32f)~OpenCvSharp.CPlusPlus.Point2f">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.op_Implicit(OpenCvSharp.CPlusPlus.Point2f)~OpenCvSharp.CPlusPlus.Point">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.op_Implicit(OpenCvSharp.CPlusPlus.Point)~OpenCvSharp.CPlusPlus.Point2f">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.op_Implicit(OpenCvSharp.CPlusPlus.Point2f)~OpenCvSharp.CPlusPlus.Vec2f">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.op_Implicit(OpenCvSharp.CPlusPlus.Vec2f)~OpenCvSharp.CPlusPlus.Point2f">
            <summary>
            
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.Equals(OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.op_Equality(OpenCvSharp.CPlusPlus.Point2f,OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the values of the X and Y properties of the two CvPoint objects are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the X and Y values of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.op_Inequality(OpenCvSharp.CPlusPlus.Point2f,OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            Compares two CvPoint2D32f objects. The result specifies whether the values of the X or Y properties of the two CvPoint2D32f objects are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the values of either the X properties or the Y properties of left and right differ; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.op_UnaryPlus(OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            Unary plus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.op_UnaryNegation(OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            Unary minus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.op_Addition(OpenCvSharp.CPlusPlus.Point2f,OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.op_Subtraction(OpenCvSharp.CPlusPlus.Point2f,OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.op_Multiply(OpenCvSharp.CPlusPlus.Point2f,System.Double)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="pt"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.Distance(OpenCvSharp.CPlusPlus.Point2f,OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            Returns the distance between the specified two points
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.DistanceTo(OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            Returns the distance between the specified two points
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.DotProduct(OpenCvSharp.CPlusPlus.Point2f,OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            Calculates the dot product of two 2D vectors.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.DotProduct(OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            Calculates the dot product of two 2D vectors.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.CrossProduct(OpenCvSharp.CPlusPlus.Point2f,OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            Calculates the cross product of two 2D vectors.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point2f.CrossProduct(OpenCvSharp.CPlusPlus.Point2f)">
            <summary>
            Calculates the cross product of two 2D vectors.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.RotatedRect">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.RotatedRect.Center">
            <summary>
            the rectangle mass center
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.RotatedRect.Size">
            <summary>
            width and height of the rectangle
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.RotatedRect.Angle">
            <summary>
            the rotation angle. When the angle is 0, 90, 180, 270 etc., the rectangle becomes an up-right rectangle.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RotatedRect.#ctor(OpenCvSharp.CPlusPlus.Point2f,OpenCvSharp.CPlusPlus.Size2f,System.Single)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="size"></param>
            <param name="angle"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RotatedRect.#ctor(OpenCvSharp.CvBox2D)">
            <summary>
            
            </summary>
            <param name="box"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RotatedRect.Points">
            <summary>
            returns 4 vertices of the rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RotatedRect.BoundingRect">
            <summary>
            returns the minimal up-right rectangle containing the rotated rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RotatedRect.op_Implicit(OpenCvSharp.CPlusPlus.RotatedRect)~OpenCvSharp.CvBox2D">
            <summary>
            conversion to the old-style CvBox2D structure
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.RotatedRect.op_Implicit(OpenCvSharp.CvBox2D)~OpenCvSharp.CPlusPlus.RotatedRect">
            <summary>
            conversion to the old-style CvBox2D structure
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Size2f">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Size2f.Width">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Size2f.Height">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size2f.#ctor(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size2f.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size2f.op_Implicit(OpenCvSharp.CPlusPlus.Size2f)~OpenCvSharp.CvSize2D32f">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size2f.op_Implicit(OpenCvSharp.CvSize2D32f)~OpenCvSharp.CPlusPlus.Size2f">
            <summary>
            
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size2f.Equals(OpenCvSharp.CPlusPlus.Size2f)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size2f.op_Equality(OpenCvSharp.CPlusPlus.Size2f,OpenCvSharp.CPlusPlus.Size2f)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size2f.op_Inequality(OpenCvSharp.CPlusPlus.Size2f,OpenCvSharp.CPlusPlus.Size2f)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size2f.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size2f.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size2f.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.TermCriteria">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.TermCriteria.Type">
            <summary>
            the type of termination criteria: COUNT, EPS or COUNT + EPS
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.TermCriteria.MaxCount">
            <summary>
            the maximum number of iterations/elements
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.TermCriteria.Epsilon">
            <summary>
            the desired accuracy
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.TermCriteria.#ctor(OpenCvSharp.CriteriaType,System.Int32,System.Double)">
            <summary>
            full constructor
            </summary>
            <param name="type"></param>
            <param name="maxCount"></param>
            <param name="epsilon"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.TermCriteria.Both(System.Int32,System.Double)">
            <summary>
            full constructor with both type (count | epsilon)
            </summary>
            <param name="maxCount"></param>
            <param name="epsilon"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.TermCriteria.#ctor(OpenCvSharp.CvTermCriteria)">
            <summary>
            conversion from CvTermCriteria
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.TermCriteria.op_Implicit(OpenCvSharp.CPlusPlus.TermCriteria)~OpenCvSharp.CvTermCriteria">
            <summary>
            conversion to CvTermCriteria
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.TermCriteria.op_Implicit(OpenCvSharp.CvTermCriteria)~OpenCvSharp.CPlusPlus.TermCriteria">
            <summary>
            conversion to CvTermCriteria
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec2i">
            <summary>
            2-Tuple of int (System.Int32)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec2i.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec2i.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec2i.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec2i.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec3i">
            <summary>
            3-Tuple of int (System.Int32)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3i.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3i.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3i.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec3i.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec3i.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec4i">
            <summary>
            4-Tuple of int (System.Int32)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4i.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4i.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4i.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4i.Item3">
            <summary>
            The value of the fourth component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec4i.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="item3"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec4i.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec6i">
            <summary>
            6-Tuple of int (System.Int32)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6i.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6i.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6i.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6i.Item3">
            <summary>
            The value of the fourth component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6i.Item4">
            <summary>
            The value of the fourth component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6i.Item5">
            <summary>
            The value of the sixth component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec6i.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="item3"></param>
            <param name="item4"></param>
            <param name="item5"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec6i.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfByte">
            <summary>
            A matrix whose element is 8UC1 (cv::Mat_&lt;uchar&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(System.Int32,System.Int32,System.Byte)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(OpenCvSharp.CPlusPlus.Size,System.Byte)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(OpenCvSharp.CPlusPlus.MatOfByte,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(OpenCvSharp.CPlusPlus.MatOfByte,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(OpenCvSharp.CPlusPlus.MatOfByte,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(System.Int32,System.Int32,System.Byte[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(System.Int32,System.Int32,System.Byte[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Byte[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Byte)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.GetIndexer">
            <summary>
            Gets a type-specific indexer. The indexer has getters/setters to access each matrix element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.FromArray(System.Byte[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.FromArray(System.Byte[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.FromArray(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.Add(System.Byte)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte.Add(System.SByte)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfByte.Indexer">
            <summary>
            Matrix indexer
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfByte.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfByte.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfByte.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfByte.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.SURF">
            <summary>
            Class for extracting Speeded Up Robust Features from an image.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SURF.#ctor">
            <summary>
            Creates SURF default parameters
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SURF.#ctor(System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            The SURF constructor.
            </summary>
            <param name="hessianThreshold">Only features with keypoint.hessian larger than that are extracted. </param>
            <param name="nOctaves">The number of a gaussian pyramid octaves that the detector uses. It is set to 4 by default. 
            If you want to get very large features, use the larger value. If you want just small features, decrease it.</param>
            <param name="nOctaveLayers">The number of images within each octave of a gaussian pyramid. It is set to 2 by default.</param>
            <param name="extended">false means basic descriptors (64 elements each), true means extended descriptors (128 elements each) </param>
            <param name="upright">false means that detector computes orientation of each feature.
            true means that the orientation is not computed (which is much, much faster).</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SURF.#ctor(OpenCvSharp.CPlusPlus.Ptr{OpenCvSharp.CPlusPlus.SURF})">
            <summary>
            Creates instance by cv::Ptr&lt;cv::SURF&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SURF.#ctor(System.IntPtr)">
            <summary>
            Creates instance by raw pointer cv::SURF*
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SURF.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SURF.FromRawPtr(System.IntPtr)">
            <summary>
            Creates instance from raw pointer T*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SURF.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SURF.Run(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            detects keypoints using fast multi-scale Hessian detector
            </summary>
            <param name="img"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SURF.Run(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.KeyPoint[]@,System.Single[]@,System.Boolean)">
            <summary>
            detects keypoints and computes the SURF descriptors for them. [useProvidedKeypoints = true]
            </summary>
            <param name="img"></param>
            <param name="mask"></param>
            <param name="keypoints"></param>
            <param name="descriptors"></param>
            <param name="useProvidedKeypoints"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.SURF.Run(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.KeyPoint[]@,OpenCvSharp.CPlusPlus.OutputArray,System.Boolean)">
            <summary>
            detects keypoints and computes the SURF descriptors for them. [useProvidedKeypoints = true]
            </summary>
            <param name="img"></param>
            <param name="mask"></param>
            <param name="keypoints"></param>
            <param name="descriptors"></param>
            <param name="useProvidedKeypoints"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SURF.DescriptorSize">
            <summary>
            returns the descriptor size in float's (64 or 128)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SURF.DescriptorType">
            <summary>
            returns the descriptor type
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SURF.HessianThreshold">
            <summary>
            Threshold for the keypoint detector. Only features, whose hessian is larger than hessianThreshold 
            are retained by the detector. Therefore, the larger the value, the less keypoints you will get. 
            A good default value could be from 300 to 500, depending from the image contrast.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SURF.NOctaves">
            <summary>
            The number of a gaussian pyramid octaves that the detector uses. It is set to 4 by default. 
            If you want to get very large features, use the larger value. If you want just small features, decrease it.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SURF.NOctaveLayers">
            <summary>
            The number of images within each octave of a gaussian pyramid. It is set to 2 by default.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SURF.Extended">
            <summary>
            false means that the basic descriptors (64 elements each) shall be computed. 
            true means that the extended descriptors (128 elements each) shall be computed
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SURF.Upright">
            <summary>
            false means that detector computes orientation of each feature.
            true means that the orientation is not computed (which is much, much faster). 
            For example, if you match images from a stereo pair, or do image stitching, the matched features 
            likely have very similar angles, and you can speed up feature extraction by setting upright=true.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.SURF.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.StarDetector">
            <summary>
            The "Star" Detector
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.StarDetector.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxSize"></param>
            <param name="responseThreshold"></param>
            <param name="lineThresholdProjected"></param>
            <param name="lineThresholdBinarized"></param>
            <param name="suppressNonmaxSize"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.StarDetector.#ctor(OpenCvSharp.CPlusPlus.Ptr{OpenCvSharp.CPlusPlus.StarDetector})">
            <summary>
            Creates instance by cv::Ptr&lt;cv::SURF&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.StarDetector.#ctor(System.IntPtr)">
            <summary>
            Creates instance by raw pointer cv::SURF*
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.StarDetector.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.StarDetector.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.StarDetector.Run(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Retrieves keypoints using the StarDetector algorithm.
            </summary>
            <param name="image">The input 8-bit grayscale image</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.StarDetector.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MSER">
            <summary>
            Maximal Stable Extremal Regions class
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MSER.#ctor(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Creates MSER parameters
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="minArea">prune the area which smaller than min_area</param>
            <param name="maxArea">prune the area which bigger than max_area</param>
            <param name="maxVariation">prune the area have simliar size to its children</param>
            <param name="minDiversity">trace back to cut off mser with diversity &lt; min_diversity</param>
            <param name="maxEvolution">for color image, the evolution steps</param>
            <param name="areaThreshold">the area threshold to cause re-initialize</param>
            <param name="minMargin">ignore too small margin</param>
            <param name="edgeBlurSize">the aperture size for edge blur</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MSER.#ctor(OpenCvSharp.CPlusPlus.Ptr{OpenCvSharp.CPlusPlus.MSER})">
            <summary>
            Creates instance by cv::Ptr&lt;cv::SURF&gt;
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MSER.#ctor(System.IntPtr)">
            <summary>
            Creates instance by raw pointer cv::SURF*
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MSER.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MSER.Dispose(System.Boolean)">
            <summary>
            Releases the resources
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MSER.Run(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Extracts the contours of Maximally Stable Extremal Regions
            </summary>
            <param name="image"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MSER.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.KeyPoint">
            <summary>
            Data structure for salient point detectors
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.KeyPoint.Pt">
            <summary>
            Coordinate of the point
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.KeyPoint.Size">
            <summary>
            Feature size
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.KeyPoint.Angle">
            <summary>
            Feature orientation in degrees (has negative value if the orientation is not defined/not computed)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.KeyPoint.Response">
            <summary>
            Feature strength (can be used to select only the most prominent key points)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.KeyPoint.Octave">
            <summary>
            Scale-space octave in which the feature has been found; may correlate with the size
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.KeyPoint.ClassID">
            <summary>
            Point class (can be used by feature classifiers or object detectors)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.KeyPoint.#ctor(OpenCvSharp.CvPoint2D32f,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Complete constructor
            </summary>
            <param name="pt">Coordinate of the point</param>
            <param name="size">Feature size</param>
            <param name="angle">Feature orientation in degrees (has negative value if the orientation is not defined/not computed)</param>
            <param name="response">Feature strength (can be used to select only the most prominent key points)</param>
            <param name="octave">Scale-space octave in which the feature has been found; may correlate with the size</param>
            <param name="class_id">Point class (can be used by feature classifiers or object detectors)</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.KeyPoint.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Complete constructor
            </summary>
            <param name="x">X-coordinate of the point</param>
            <param name="y">Y-coordinate of the point</param>
            <param name="size">Feature size</param>
            <param name="angle">Feature orientation in degrees (has negative value if the orientation is not defined/not computed)</param>
            <param name="response">Feature strength (can be used to select only the most prominent key points)</param>
            <param name="octave">Scale-space octave in which the feature has been found; may correlate with the size</param>
            <param name="class_id">Point class (can be used by feature classifiers or object detectors)</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.KeyPoint.Equals(OpenCvSharp.CPlusPlus.KeyPoint)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.KeyPoint.op_Equality(OpenCvSharp.CPlusPlus.KeyPoint,OpenCvSharp.CPlusPlus.KeyPoint)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.KeyPoint.op_Inequality(OpenCvSharp.CPlusPlus.KeyPoint,OpenCvSharp.CPlusPlus.KeyPoint)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.KeyPoint.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.KeyPoint.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.KeyPoint.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.StereoSGBM">
            <summary>
            Semi-Global Stereo Matching
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.StereoSGBM.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.StereoSGBM.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.StereoSGBM.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            StereoSGBM Constructor
            </summary>
            <param name="minDisparity"></param>
            <param name="numDisparities"></param>
            <param name="sadWindowSize"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="disp12MaxDiff"></param>
            <param name="preFilterCap"></param>
            <param name="uniquenessRatio"></param>
            <param name="speckleWindowSize"></param>
            <param name="speckleRange"></param>
            <param name="fullDP"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.StereoSGBM.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.StereoSGBM.Compute(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="disp"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.StereoSGBM.MinDisparity">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.StereoSGBM.NumberOfDisparities">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.StereoSGBM.SADWindowSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.StereoSGBM.PreFilterCap">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.StereoSGBM.UniquenessRatio">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.StereoSGBM.P1">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.StereoSGBM.P2">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.StereoSGBM.SpeckleWindowSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.StereoSGBM.SpeckleRange">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.StereoSGBM.Disp12MaxDiff">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.StereoSGBM.FullDP">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatDiagType">
            <summary>
            diagonal type
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatDiagType.Upper">
            <summary>
            a diagonal from the upper half
            [&lt; 0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatDiagType.Main">
            <summary>
            Main dialonal
            [= 0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MatDiagType.Lower">
            <summary>
            a diagonal from the lower half
            [&gt; 0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatrixDecomposition">
            <summary>
            MatrixDecomposition
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MorphingMethod">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MorphingMethod.None">
            <summary>
            
            [CvAdaptiveSkinDetector::MORPHING_METHOD_NONE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MorphingMethod.Erode">
            <summary>
            
            [CvAdaptiveSkinDetector::MORPHING_METHOD_ERODE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MorphingMethod.ErodeErode">
            <summary>
            
            [CvAdaptiveSkinDetector::MORPHING_METHOD_ERODE_ERODE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.MorphingMethod.ErodeDilate">
            <summary>
            
            [CvAdaptiveSkinDetector::MORPHING_METHOD_ERODE_DILATE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Flann.FlannCentersInit">
            <summary>
            The algorithm to use for selecting the initial centers when performing a k-means clustering step. 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Flann.FlannCentersInit.Random">
            <summary>
            picks the initial cluster centers randomly
            [flann_centers_init_t::CENTERS_RANDOM]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Flann.FlannCentersInit.Gonzales">
            <summary>
            picks the initial centers using Gonzales’ algorithm
            [flann_centers_init_t::CENTERS_GONZALES]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Flann.FlannCentersInit.KMeansPP">
            <summary>
            picks the initial centers using the algorithm suggested in [arthur_kmeanspp_2007]
            [flann_centers_init_t::CENTERS_KMEANSPP]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Flann.Index">
            <summary>
            The FLANN nearest neighbor index class. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.Index.#ctor(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.Flann.IndexParams,OpenCvSharp.CPlusPlus.Flann.FlannDistance)">
            <summary>
            Constructs a nearest neighbor search index for a given dataset.
            </summary>
            <param name="features">features – Matrix of type CV _ 32F containing the features(points) to index. The size of the matrix is num _ features x feature _ dimensionality.</param>
            <param name="params">Structure containing the index parameters. The type of index that will be constructed depends on the type of this parameter. </param>
            <param name="distType"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.Index.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.Index.KnnSearch(System.Single[],System.Int32[]@,System.Single[]@,System.Int32,OpenCvSharp.CPlusPlus.Flann.SearchParams)">
            <summary>
            Performs a K-nearest neighbor search for multiple query points.
            </summary>
            <param name="queries">The query points, one per row</param>
            <param name="indices">Indices of the nearest neighbors found</param>
            <param name="dists">Distances to the nearest neighbors found</param>
            <param name="knn">Number of nearest neighbors to search for</param>
            <param name="params">Search parameters</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.Index.KnnSearch(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,System.Int32,OpenCvSharp.CPlusPlus.Flann.SearchParams)">
            <summary>
            Performs a K-nearest neighbor search for multiple query points.
            </summary>
            <param name="queries">The query points, one per row</param>
            <param name="indices">Indices of the nearest neighbors found</param>
            <param name="dists">Distances to the nearest neighbors found</param>
            <param name="knn">Number of nearest neighbors to search for</param>
            <param name="params">Search parameters</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.Index.KnnSearch(OpenCvSharp.CPlusPlus.Mat,System.Int32[]@,System.Single[]@,System.Int32,OpenCvSharp.CPlusPlus.Flann.SearchParams)">
            <summary>
            Performs a K-nearest neighbor search for multiple query points.
            </summary>
            <param name="queries">The query points, one per row</param>
            <param name="indices">Indices of the nearest neighbors found</param>
            <param name="dists">Distances to the nearest neighbors found</param>
            <param name="knn">Number of nearest neighbors to search for</param>
            <param name="params">Search parameters</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.Index.RadiusSearch(System.Single[],System.Int32[],System.Single[],System.Single,System.Int32,OpenCvSharp.CPlusPlus.Flann.SearchParams)">
            <summary>
            Performs a radius nearest neighbor search for a given query point.
            </summary>
            <param name="queries">The query point</param>
            <param name="indices">Indices of the nearest neighbors found</param>
            <param name="dists">Distances to the nearest neighbors found</param>
            <param name="radius">Number of nearest neighbors to search for</param>
            <param name="maxResults"></param>
            <param name="params">Search parameters</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.Index.RadiusSearch(OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,OpenCvSharp.CPlusPlus.Mat,System.Single,System.Int32,OpenCvSharp.CPlusPlus.Flann.SearchParams)">
            <summary>
            Performs a radius nearest neighbor search for a given query point.
            </summary>
            <param name="queries">The query point</param>
            <param name="indices">Indices of the nearest neighbors found</param>
            <param name="dists">Distances to the nearest neighbors found</param>
            <param name="radius">Number of nearest neighbors to search for</param>
            <param name="maxResults"></param>
            <param name="params">Search parameters</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.Index.RadiusSearch(OpenCvSharp.CPlusPlus.Mat,System.Int32[],System.Single[],System.Single,System.Int32,OpenCvSharp.CPlusPlus.Flann.SearchParams)">
            <summary>
            Performs a radius nearest neighbor search for a given query point.
            </summary>
            <param name="queries">The query point</param>
            <param name="indices">Indices of the nearest neighbors found</param>
            <param name="dists">Distances to the nearest neighbors found</param>
            <param name="radius">Number of nearest neighbors to search for</param>
            <param name="maxResults"></param>
            <param name="params">Search parameters</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.Index.Save(System.String)">
            <summary>
            Saves the index to a file.
            </summary>
            <param name="filename">The file to save the index to</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Flann.AutotunedIndexParams">
            <summary>
            hierarchical k-means tree.
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Flann.IndexParams">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.IndexParams.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.IndexParams.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.IndexParams.GetString(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.IndexParams.GetString(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.IndexParams.GetInt(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.IndexParams.GetInt(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.IndexParams.GetDouble(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.IndexParams.GetDouble(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.IndexParams.SetString(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.IndexParams.SetInt(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.IndexParams.SetDouble(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.IndexParams.SetFloat(System.String,System.Single)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.IndexParams.SetBool(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.IndexParams.SetAlgorithm(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.AutotunedIndexParams.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="targetPrecision">Is a number between 0 and 1 specifying the percentage of the approximate nearest-neighbor searches that return the exact nearest-neighbor. 
            Using a higher value for this parameter gives more accurate results, but the search takes longer. The optimum value usually depends on the application.</param>
            <param name="buildWeight">Specifies the importance of the index build time raported to the nearest-neighbor search time. 
            In some applications it’s acceptable for the index build step to take a long time if the subsequent searches in the index can be performed very fast. 
            In other applications it’s required that the index be build as fast as possible even if that leads to slightly longer search times.</param>
            <param name="memoryWeight">Is used to specify the tradeoff between time (index build time and search time) and memory used by the index. 
            A value less than 1 gives more importance to the time spent and a value greater than 1 gives more importance to the memory usage.</param>
            <param name="sampleFraction">Is a number between 0 and 1 indicating what fraction of the dataset to use in the automatic parameter configuration algorithm. 
            Running the algorithm on the full dataset gives the most accurate results, but for very large datasets can take longer than desired. 
            In such case using just a fraction of the data helps speeding up this algorithm while still giving good approximations of the optimum parameters.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.AutotunedIndexParams.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Flann.CompositeIndexParams">
            <summary>
            When using a parameters object of this type the index created combines the randomized kd-trees and the hierarchical k-means tree.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.CompositeIndexParams.#ctor(System.Int32,System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Flann.FlannCentersInit,System.Single)">
            <summary>
            
            </summary>
            <param name="trees">The number of parallel kd-trees to use. Good values are in the range [1..16]</param>
            <param name="branching">The branching factor to use for the hierarchical k-means tree</param>
            <param name="iterations">The maximum number of iterations to use in the k-means clustering stage when building the k-means tree. A value of -1 used here means that the k-means clustering should be iterated until convergence</param>
            <param name="centersInit">The algorithm to use for selecting the initial centers when performing a k-means clustering step. </param>
            <param name="cbIndex">This parameter (cluster boundary index) influences the way exploration is performed in the hierarchical kmeans tree. When cb_index is zero the next kmeans domain to be explored is choosen to be the one with the closest center. A value greater then zero also takes into account the size of the domain.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.CompositeIndexParams.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Flann.KDTreeIndexParams">
            <summary>
            When passing an object of this type the index constructed will consist of a set
            of randomized kd-trees which will be searched in parallel.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.KDTreeIndexParams.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="trees">The number of parallel kd-trees to use. Good values are in the range [1..16]</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.KDTreeIndexParams.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Flann.KMeansIndexParams">
            <summary>
            When passing an object of this type the index constructed will be a hierarchical k-means tree.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.KMeansIndexParams.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Flann.FlannCentersInit,System.Single)">
            <summary>
            
            </summary>
            <param name="branching">The branching factor to use for the hierarchical k-means tree</param>
            <param name="iterations">The maximum number of iterations to use in the k-means clustering stage when building the k-means tree. A value of -1 used here means that the k-means clustering should be iterated until convergence</param>
            <param name="centersInit">The algorithm to use for selecting the initial centers when performing a k-means clustering step. </param>
            <param name="cbIndex">This parameter (cluster boundary index) influences the way exploration is performed in the hierarchical kmeans tree. When cb_index is zero the next kmeans domain to be explored is choosen to be the one with the closest center. A value greater then zero also takes into account the size of the domain.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.KMeansIndexParams.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Flann.LinearIndexParams">
            <summary>
            the index will perform a linear, brute-force search.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.LinearIndexParams.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.LinearIndexParams.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Flann.SavedIndexParams">
            <summary>
            This object type is used for loading a previously saved index from the disk.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.SavedIndexParams.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="filename">インデックスが保存されたファイル名</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.SavedIndexParams.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Flann.SearchParams">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.SearchParams.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.SearchParams.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="checks"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.SearchParams.#ctor(System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="checks"></param>
            <param name="eps"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.SearchParams.#ctor(System.Int32,System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="checks"></param>
            <param name="eps"></param>
            <param name="sorted"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Flann.SearchParams.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec2b">
            <summary>
            2-Tuple of byte (System.Byte)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec2b.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec2b.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec2b.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec2b.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec3b">
            <summary>
            3-Tuple of byte (System.Byte)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3b.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3b.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3b.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec3b.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec3b.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec4b">
            <summary>
            4-Tuple of byte (System.Byte)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4b.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4b.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4b.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4b.Item3">
            <summary>
            The value of the fourth component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec4b.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="item3"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec4b.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec6b">
            <summary>
            6-Tuple of byte (System.Byte)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6b.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6b.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6b.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6b.Item3">
            <summary>
            The value of the fourth component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6b.Item4">
            <summary>
            The value of the fifth component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6b.Item5">
            <summary>
            The value of the sizth component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec6b.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="item3"></param>
            <param name="item4"></param>
            <param name="item5"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec6b.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.CppConst">
            <summary>
            Constantt values
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.Param_INT">
            <summary>
            cv::Param types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.Param_BOOLEAN">
            <summary>
            cv::Param types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.Param_REAL">
            <summary>
            cv::Param types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.Param_STRING">
            <summary>
            cv::Param types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.Param_MAT">
            <summary>
            cv::Param types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.Param_MAT_VECTOR">
            <summary>
            cv::Param types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.Param_ALGORITHM">
            <summary>
            cv::Param types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.Param_FLOAT">
            <summary>
            cv::Param types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.Param_UNSIGNED_INT">
            <summary>
            cv::Param types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.Param_UINT64">
            <summary>
            cv::Param types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.Param_SHORT">
            <summary>
            cv::Param types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.Param_UCHAR">
            <summary>
            cv::Param types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.DECOMP_LU">
            <summary>
            matrix decomposition types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.DECOMP_SVD">
            <summary>
            matrix decomposition types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.DECOMP_EIG">
            <summary>
            matrix decomposition types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.DECOMP_CHOLESKY">
            <summary>
            matrix decomposition types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.DECOMP_QR">
            <summary>
            matrix decomposition types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.DECOMP_NORMAL">
            <summary>
            matrix decomposition types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.InputArray_KIND_SHIFT">
            <summary>
            InputArray kind
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.InputArray_FIXED_TYPE">
            <summary>
            InputArray kind
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.InputArray_FIXED_SIZE">
            <summary>
            InputArray kind
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.InputArray_KIND_MASK">
            <summary>
            InputArray kind
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.InputArray_NONE">
            <summary>
            InputArray kind
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.InputArray_MAT">
            <summary>
            InputArray kind
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.InputArray_MATX">
            <summary>
            InputArray kind
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.InputArray_STD_VECTOR">
            <summary>
            InputArray kind
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.InputArray_STD_VECTOR_VECTOR">
            <summary>
            InputArray kind
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.InputArray_STD_VECTOR_MAT">
            <summary>
            InputArray kind
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.InputArray_EXPR">
            <summary>
            InputArray kind
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.InputArray_OPENGL_BUFFER">
            <summary>
            InputArray kind
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.InputArray_OPENGL_TEXTURE">
            <summary>
            InputArray kind
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.InputArray_GPU_MAT">
            <summary>
            InputArray kind
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.InputArray_OCL_MAT">
            <summary>
            InputArray kind
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.BORDER_REPLICATE">
            <summary>
            various border interpolation methods
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.BORDER_CONSTANT">
            <summary>
            various border interpolation methods
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.BORDER_REFLECT">
            <summary>
            various border interpolation methods
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.BORDER_WRAP">
            <summary>
            various border interpolation methods
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.BORDER_REFLECT101">
            <summary>
            various border interpolation methods
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.BORDER_TRANSPARENT">
            <summary>
            various border interpolation methods
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.BORDER_DEFAULT">
            <summary>
            various border interpolation methods
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.BORDER_ISOLATED">
            <summary>
            various border interpolation methods
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.MORPH_RECT">
            <summary>
            shape of the structuring element
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.MORPH_CROSS">
            <summary>
            shape of the structuring element
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.MORPH_ELLIPSE">
            <summary>
            shape of the structuring element
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.DFT_INVERSE">
            <summary>
            cv::dft flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.DFT_SCALE">
            <summary>
            cv::dft flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.DFT_ROWS">
            <summary>
            cv::dft flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.DFT_COMPLEX_OUTPUT">
            <summary>
            cv::dft flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.DFT_REAL_OUTPUT">
            <summary>
            cv::dft flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.DCT_INVERSE">
            <summary>
            cv::dct flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.DCT_ROWS">
            <summary>
            cv::dct flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.PROJ_SPHERICAL_ORTHO">
            <summary>
            cv::initWideAngleProjMap flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.PROJ_SPHERICAL_EQRECT">
            <summary>
            cv::initWideAngleProjMap flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.GC_INIT_WITH_RECT">
            <summary>
            GrabCut algorithm flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.GC_INIT_WITH_MASK">
            <summary>
            GrabCut algorithm flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.GC_EVAL">
            <summary>
            GrabCut algorithm flags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.CV_DIST_MASK_3">
            <summary>
            Mask size for distance transform 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.CV_DIST_MASK_5">
            <summary>
            Mask size for distance transform 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.CV_DIST_MASK_PRECISE">
            <summary>
            Mask size for distance transform 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.DrawMatchesFlags_DEFAULT">
            <summary>
            DrawMatchesFlags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.DrawMatchesFlags_DRAW_OVER_OUTIMG">
            <summary>
            DrawMatchesFlags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS">
            <summary>
            DrawMatchesFlags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.DrawMatchesFlags_DRAW_RICH_KEYPOINTS">
            <summary>
            DrawMatchesFlags
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.ORB_HARRIS_SCORE">
            <summary>
            cv::ORB
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.ORB_FAST_SCORE">
            <summary>
            cv::ORB
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.SolvePnP_ITERATIVE">
            <summary>
            cv::solvePnP
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.SolvePnP_EPNP">
            <summary>
            cv::solvePnP
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.SolvePnP_P3P">
            <summary>
            cv::solvePnP
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.CASCADE_DO_CANNY_PRUNING">
            <summary>
            CascadeClassifier
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.CASCADE_SCALE_IMAGE">
            <summary>
            CascadeClassifier
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.CASCADE_FIND_BIGGEST_OBJECT">
            <summary>
            CascadeClassifier
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.CASCADE_DO_ROUGH_SEARCH">
            <summary>
            CascadeClassifier
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.OPTFLOW_PYR_A_READY">
            <summary>
            calcOpticalFlowPyrLK
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.OPTFLOW_PYR_B_READY">
            <summary>
            calcOpticalFlowPyrLK
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.OPTFLOW_USE_INITIAL_FLOW">
            <summary>
            calcOpticalFlowPyrLK
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.OPTFLOW_LK_GET_MIN_EIGENVALS">
            <summary>
            calcOpticalFlowPyrLK
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.OPTFLOW_FARNEBACK_GAUSSIAN">
            <summary>
            calcOpticalFlowPyrLK
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.COLORMAP_AUTUMN">
            <summary>
            applyColorMap
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.COLORMAP_BONE">
            <summary>
            applyColorMap
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.COLORMAP_JET">
            <summary>
            applyColorMap
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.COLORMAP_WINTER">
            <summary>
            applyColorMap
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.COLORMAP_RAINBOW">
            <summary>
            applyColorMap
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.COLORMAP_OCEAN">
            <summary>
            applyColorMap
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.COLORMAP_SUMMER">
            <summary>
            applyColorMap
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.COLORMAP_SPRING">
            <summary>
            applyColorMap
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.COLORMAP_COOL">
            <summary>
            applyColorMap
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.COLORMAP_HSV">
            <summary>
            applyColorMap
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.COLORMAP_PINK">
            <summary>
            applyColorMap
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.COLORMAP_HOT">
            <summary>
            applyColorMap
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.FLANN_DIST_EUCLIDEAN">
            <summary>
            cv::flann distance types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.FLANN_DIST_L2">
            <summary>
            cv::flann distance types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.FLANN_DIST_MANHATTAN">
            <summary>
            cv::flann distance types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.FLANN_DIST_L1">
            <summary>
            cv::flann distance types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.FLANN_DIST_MINKOWSKI">
            <summary>
            cv::flann distance types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.FLANN_DIST_MAX">
            <summary>
            cv::flann distance types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.FLANN_DIST_HIST_INTERSECT">
            <summary>
            cv::flann distance types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.FLANN_DIST_HELLINGER">
            <summary>
            cv::flann distance types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.FLANN_DIST_CHI_SQUARE">
            <summary>
            cv::flann distance types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.FLANN_DIST_CS">
            <summary>
            cv::flann distance types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.FLANN_DIST_KULLBACK_LEIBLER">
            <summary>
            cv::flann distance types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.FLANN_DIST_KL">
            <summary>
            cv::flann distance types
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.CppConst.FLANN_DIST_HAMMING">
            <summary>
            cv::flann distance types
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Point">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point.SizeOf">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Point.Y">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.op_Implicit(OpenCvSharp.CPlusPlus.Point)~OpenCvSharp.CvPoint">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.op_Implicit(OpenCvSharp.CvPoint)~OpenCvSharp.CPlusPlus.Point">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.op_Implicit(OpenCvSharp.CPlusPlus.Point)~OpenCvSharp.CPlusPlus.Vec2i">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.op_Implicit(OpenCvSharp.CPlusPlus.Vec2i)~OpenCvSharp.CPlusPlus.Point">
            <summary>
            
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.Equals(OpenCvSharp.CPlusPlus.Point)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.op_Equality(OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Point)">
            <summary>
            Compares two Point objects. The result specifies whether the values of the X and Y properties of the two Point objects are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the X and Y values of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.op_Inequality(OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Point)">
            <summary>
            Compares two Point objects. The result specifies whether the values of the X or Y properties of the two Point objects are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the values of either the X properties or the Y properties of left and right differ; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.op_UnaryPlus(OpenCvSharp.CPlusPlus.Point)">
            <summary>
            Unary plus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.op_UnaryNegation(OpenCvSharp.CPlusPlus.Point)">
            <summary>
            Unary minus operator
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.op_Addition(OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Point)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.op_Subtraction(OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Point)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.op_Multiply(OpenCvSharp.CPlusPlus.Point,System.Double)">
            <summary>
            Shifts point by a certain offset
            </summary>
            <param name="pt"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.Distance(OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Point)">
            <summary>
            Returns the distance between the specified two points
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.DistanceTo(OpenCvSharp.CPlusPlus.Point)">
            <summary>
            Returns the distance between the specified two points
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.DotProduct(OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Point)">
            <summary>
            Calculates the dot product of two 2D vectors.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.DotProduct(OpenCvSharp.CPlusPlus.Point)">
            <summary>
            Calculates the dot product of two 2D vectors.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.CrossProduct(OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Point)">
            <summary>
            Calculates the cross product of two 2D vectors.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Point.CrossProduct(OpenCvSharp.CPlusPlus.Point)">
            <summary>
            Calculates the cross product of two 2D vectors.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Range">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Range.Start">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Range.End">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Range.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Range.op_Implicit(OpenCvSharp.CPlusPlus.Range)~OpenCvSharp.CvSlice">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Range.op_Implicit(OpenCvSharp.CvSlice)~OpenCvSharp.CPlusPlus.Range">
            <summary>
            
            </summary>
            <param name="slice"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Range.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Rect">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Rect.SizeOf">
            <summary>
            sizeof(Rect)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Rect.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Rect.Y">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Rect.Width">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Rect.Height">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Rect.Empty">
            <summary>
            Represents a Rect structure with its properties left uninitialized. 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.#ctor(OpenCvSharp.CPlusPlus.Point,OpenCvSharp.CPlusPlus.Size)">
            <summary>
            
            </summary>
            <param name="location"></param>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.op_Implicit(OpenCvSharp.CPlusPlus.Rect)~OpenCvSharp.CvRect">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.op_Implicit(OpenCvSharp.CvRect)~OpenCvSharp.CPlusPlus.Rect">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.Equals(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.op_Equality(OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Compares two Rect objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.op_Inequality(OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Compares two Rect objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.op_Addition(OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.Point)">
            <summary>
            Shifts rectangle by a certain offset
            </summary>
            <param name="rect"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.op_Subtraction(OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.Point)">
            <summary>
            Shifts rectangle by a certain offset
            </summary>
            <param name="rect"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.op_Addition(OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.Size)">
            <summary>
            Expands or shrinks rectangle by a certain amount
            </summary>
            <param name="rect"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.op_Subtraction(OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.Size)">
            <summary>
            Expands or shrinks rectangle by a certain amount
            </summary>
            <param name="rect"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.op_BitwiseAnd(OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Determines the Rect structure that represents the intersection of two rectangles. 
            </summary>
            <param name="a">A rectangle to intersect. </param>
            <param name="b">A rectangle to intersect. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.op_BitwiseOr(OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Gets a Rect structure that contains the union of two Rect structures. 
            </summary>
            <param name="a">A rectangle to union. </param>
            <param name="b">A rectangle to union. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.Contains(System.Int32,System.Int32)">
            <summary>
            Determines if the specified point is contained within the rectangular region defined by this Rectangle. 
            </summary>
            <param name="x">x-coordinate of the point</param>
            <param name="y">y-coordinate of the point</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.Contains(OpenCvSharp.CPlusPlus.Point)">
            <summary>
            Determines if the specified point is contained within the rectangular region defined by this Rectangle. 
            </summary>
            <param name="pt">point</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.Contains(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Determines if the specified rectangle is contained within the rectangular region defined by this Rectangle. 
            </summary>
            <param name="rect">rectangle</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.Inflate(System.Int32,System.Int32)">
            <summary>
            Inflates this Rect by the specified amount. 
            </summary>
            <param name="width">The amount to inflate this Rectangle horizontally. </param>
            <param name="height">The amount to inflate this Rectangle vertically. </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.Inflate(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            Inflates this Rect by the specified amount. 
            </summary>
            <param name="size">The amount to inflate this rectangle. </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.Inflate(OpenCvSharp.CPlusPlus.Rect,System.Int32,System.Int32)">
            <summary>
            Creates and returns an inflated copy of the specified Rect structure.
            </summary>
            <param name="rect">The Rectangle with which to start. This rectangle is not modified. </param>
            <param name="x">The amount to inflate this Rectangle horizontally. </param>
            <param name="y">The amount to inflate this Rectangle vertically. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.Intersect(OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Determines the Rect structure that represents the intersection of two rectangles. 
            </summary>
            <param name="a">A rectangle to intersect. </param>
            <param name="b">A rectangle to intersect. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.Intersect(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Determines the Rect structure that represents the intersection of two rectangles. 
            </summary>
            <param name="rect">A rectangle to intersect. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.IntersectsWith(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Determines if this rectangle intersects with rect. 
            </summary>
            <param name="rect">Rectangle</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.Union(OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Gets a Rect structure that contains the union of two Rect structures. 
            </summary>
            <param name="rect">A rectangle to union. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.Union(OpenCvSharp.CPlusPlus.Rect,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            Gets a Rect structure that contains the union of two Rect structures. 
            </summary>
            <param name="a">A rectangle to union. </param>
            <param name="b">A rectangle to union. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Rect.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Rect.Top">
            <summary>
            Gets the y-coordinate of the top edge of this Rect structure. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Rect.Bottom">
            <summary>
            Gets the y-coordinate that is the sum of the Y and Height property values of this Rect structure.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Rect.Left">
            <summary>
            Gets the x-coordinate of the left edge of this Rect structure. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Rect.Right">
            <summary>
            Gets the x-coordinate that is the sum of X and Width property values of this Rect structure. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Rect.Location">
            <summary>
            Coordinate of the left-most rectangle corner [Point(X, Y)]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Rect.Size">
            <summary>
            Size of the rectangle [CvSize(Width, Height)]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Rect.TopLeft">
            <summary>
            Coordinate of the left-most rectangle corner [Point(X, Y)]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Rect.BottomRight">
            <summary>
            Coordinate of the right-most rectangle corner [Point(X+Width, Y+Height)]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Val0">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Val1">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Val2">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Val3">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="v0"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="v2"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.FromRgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.RandomColor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Implicit(OpenCvSharp.CPlusPlus.Scalar)~OpenCvSharp.CvScalar">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Implicit(OpenCvSharp.CvScalar)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Explicit(OpenCvSharp.CPlusPlus.Scalar)~System.Double">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Implicit(System.Double)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Implicit(OpenCvSharp.CPlusPlus.Scalar)~OpenCvSharp.CvColor">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Implicit(OpenCvSharp.CvColor)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Explicit(OpenCvSharp.CPlusPlus.DMatch)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Explicit(OpenCvSharp.CPlusPlus.Scalar)~OpenCvSharp.CPlusPlus.DMatch">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Explicit(OpenCvSharp.CPlusPlus.Vec3b)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Explicit(OpenCvSharp.CPlusPlus.Vec3f)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Explicit(OpenCvSharp.CPlusPlus.Vec4f)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Explicit(OpenCvSharp.CPlusPlus.Vec6f)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Explicit(OpenCvSharp.CPlusPlus.Vec3d)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Explicit(OpenCvSharp.CPlusPlus.Vec4d)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Explicit(OpenCvSharp.CPlusPlus.Vec6d)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Explicit(OpenCvSharp.CPlusPlus.Point)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Explicit(OpenCvSharp.CPlusPlus.Point2f)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Explicit(OpenCvSharp.CPlusPlus.Point2d)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Explicit(OpenCvSharp.CPlusPlus.Point3i)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Explicit(OpenCvSharp.CPlusPlus.Point3f)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Explicit(OpenCvSharp.CPlusPlus.Point3d)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Explicit(OpenCvSharp.CPlusPlus.Rect)~OpenCvSharp.CPlusPlus.Scalar">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Equality(OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.op_Inequality(OpenCvSharp.CPlusPlus.Scalar,OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.All(System.Double)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.Mul(OpenCvSharp.CPlusPlus.Scalar,System.Double)">
            <summary>
            
            </summary>
            <param name="it"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.Mul(OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            
            </summary>
            <param name="it"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.Conj">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.IsReal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Scalar.Equals(OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.AliceBlue">
            <summary>
            #F0F8FF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.AntiqueWhite">
            <summary>
            #FAEBD7 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Aqua">
            <summary>
            #00FFFF 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Aquamarine">
            <summary>
            #7FFFD4
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Azure">
            <summary>
            #F0FFFF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Beige">
            <summary>
            #F5F5DC
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Bisque">
            <summary>
            #FFE4C4
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Black">
            <summary>
            #000000
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.BlanchedAlmond">
            <summary>
            #FFEBCD
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Blue">
            <summary>
            #0000FF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.BlueViolet">
            <summary>
            #8A2BE2
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Brown">
            <summary>
            #A52A2A 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.BurlyWood">
            <summary>
            #DEB887
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.CadetBlue">
            <summary>
            #5F9EA0 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Chartreuse">
            <summary>
            #7FFF00 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Chocolate">
            <summary>
            #D2691E
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Coral">
            <summary>
            #FF7F50
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.CornflowerBlue">
            <summary>
            #6495ED
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Cornsilk">
            <summary>
            #FFF8DC
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Crimson">
            <summary>
            #DC143C
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Cyan">
            <summary>
            #00FFFF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DarkBlue">
            <summary>
            #00008B
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DarkCyan">
            <summary>
            #008B8B
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DarkGoldenrod">
            <summary>
            #B8860B
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DarkGray">
            <summary>
            #A9A9A9
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DarkGreen">
            <summary>
            #006400
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DarkKhaki">
            <summary>
            #BDB76B
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DarkMagenta">
            <summary>
            #8B008B
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DarkOliveGreen">
            <summary>
            #556B2F
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DarkOrange">
            <summary>
            #FF8C00 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DarkOrchid">
            <summary>
            #9932CC
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DarkRed">
            <summary>
            #8B0000
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DarkSalmon">
            <summary>
            #E9967A
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DarkSeaGreen">
            <summary>
            #8FBC8F
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DarkSlateBlue">
            <summary>
            #483D8B
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DarkSlateGray">
            <summary>
            #2F4F4F
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DarkTurquoise">
            <summary>
            #00CED1 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DarkViolet">
            <summary>
            #9400D3
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DeepPink">
            <summary>
            #FF1493
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DeepSkyBlue">
            <summary>
            #00BFFF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DimGray">
            <summary>
            #696969
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.DodgerBlue">
            <summary>
            #1E90FF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Firebrick">
            <summary>
            #B22222
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.FloralWhite">
            <summary>
            #FFFAF0 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.ForestGreen">
            <summary>
            #228B22
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Fuchsia">
            <summary>
            #FF00FF 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Gainsboro">
            <summary>
            #DCDCDC
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.GhostWhite">
            <summary>
            #F8F8FF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Gold">
            <summary>
            #FFD700
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Goldenrod">
            <summary>
            #DAA520
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Gray">
            <summary>
            #808080
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Green">
            <summary>
            #008000
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.GreenYellow">
            <summary>
            #ADFF2F
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Honeydew">
            <summary>
            #F0FFF0
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.HotPink">
            <summary>
            #FF69B4
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.IndianRed">
            <summary>
            #CD5C5C
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Indigo">
            <summary>
            #4B0082
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Ivory">
            <summary>
            #FFFFF0
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Khaki">
            <summary>
            #F0E68C
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Lavender">
            <summary>
            #E6E6FA
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.LavenderBlush">
            <summary>
            #FFF0F5 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.LawnGreen">
            <summary>
            #7CFC00
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.LemonChiffon">
            <summary>
            #FFFACD
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.LightBlue">
            <summary>
            #ADD8E6
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.LightCoral">
            <summary>
            #F08080
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.LightCyan">
            <summary>
            #E0FFFF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.LightGoldenrodYellow">
            <summary>
            #FAFAD2
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.LightGray">
            <summary>
            #D3D3D3
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.LightGreen">
            <summary>
            #90EE90 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.LightPink">
            <summary>
            #FFB6C1
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.LightSalmon">
            <summary>
            #FFA07A
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.LightSeaGreen">
            <summary>
            #20B2AA
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.LightSkyBlue">
            <summary>
            #87CEFA 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.LightSlateGray">
            <summary>
            #778899
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.LightSteelBlue">
            <summary>
            #B0C4DE 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.LightYellow">
            <summary>
            #FFFFE0
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Lime">
            <summary>
            #00FF00
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.LimeGreen">
            <summary>
            #32CD32
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Linen">
            <summary>
            #FAF0E6
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Magenta">
            <summary>
            #FF00FF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Maroon">
            <summary>
            #800000
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.MediumAquamarine">
            <summary>
            #66CDAA
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.MediumBlue">
            <summary>
            #0000CD
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.MediumOrchid">
            <summary>
            #BA55D3
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.MediumPurple">
            <summary>
            #9370DB
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.MediumSeaGreen">
            <summary>
            #3CB371
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.MediumSlateBlue">
            <summary>
            #7B68EE
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.MediumSpringGreen">
            <summary>
            #00FA9A 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.MediumTurquoise">
            <summary>
            #48D1CC
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.MediumVioletRed">
            <summary>
            #C71585
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.MidnightBlue">
            <summary>
            #191970
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.MintCream">
            <summary>
            #F5FFFA
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.MistyRose">
            <summary>
            #FFE4E1
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Moccasin">
            <summary>
            #FFE4B5
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.NavajoWhite">
            <summary>
            #FFDEAD
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Navy">
            <summary>
            #000080
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.OldLace">
            <summary>
            #FDF5E6
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Olive">
            <summary>
            #808000 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.OliveDrab">
            <summary>
            #6B8E23
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Orange">
            <summary>
            #FFA500
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.OrangeRed">
            <summary>
            #FF4500
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Orchid">
            <summary>
            #DA70D6
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.PaleGoldenrod">
            <summary>
            #EEE8AA 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.PaleGreen">
            <summary>
            #98FB98
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.PaleTurquoise">
            <summary>
            #AFEEEE
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.PaleVioletRed">
            <summary>
            #DB7093
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.PapayaWhip">
            <summary>
            #FFEFD5 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.PeachPuff">
            <summary>
            #FFDAB9
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Peru">
            <summary>
            #CD853F
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Pink">
            <summary>
            #FFC0CB
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Plum">
            <summary>
            #DDA0DD
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.PowderBlue">
            <summary>
            #B0E0E6
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Purple">
            <summary>
            #800080
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Red">
            <summary>
            #FF0000
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.RosyBrown">
            <summary>
            #BC8F8F
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.RoyalBlue">
            <summary>
            #4169E1
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.SaddleBrown">
            <summary>
            #8B4513
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Salmon">
            <summary>
            #FA8072
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.SandyBrown">
            <summary>
            #F4A460
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.SeaGreen">
            <summary>
            #2E8B57
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.SeaShell">
            <summary>
            #FFF5EE
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Sienna">
            <summary>
            #A0522D
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Silver">
            <summary>
            #C0C0C0 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.SkyBlue">
            <summary>
            #87CEEB
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.SlateBlue">
            <summary>
            #6A5ACD
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.SlateGray">
            <summary>
            #708090
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Snow">
            <summary>
            #FFFAFA
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.SpringGreen">
            <summary>
            #00FF7F
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.SteelBlue">
            <summary>
            #4682B4
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Tan">
            <summary>
            #D2B48C
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Teal">
            <summary>
            #008080
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Thistle">
            <summary>
            #D8BFD8
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Tomato">
            <summary>
            #FF6347
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Turquoise">
            <summary>
            #40E0D0
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Violet">
            <summary>
            #EE82EE
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Wheat">
            <summary>
            #F5DEB3
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.White">
            <summary>
            #FFFFFF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.WhiteSmoke">
            <summary>
            #F5F5F5
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.Yellow">
            <summary>
            #FFFF00
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Scalar.YellowGreen">
            <summary>
            #9ACD32
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Scalar.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Size">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Size.Width">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Size.Height">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size.op_Implicit(OpenCvSharp.CPlusPlus.Size)~OpenCvSharp.CvSize">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size.op_Implicit(OpenCvSharp.CvSize)~OpenCvSharp.CPlusPlus.Size">
            <summary>
            
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size.Equals(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size.op_Equality(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Size)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are equal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are equal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size.op_Inequality(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Size)">
            <summary>
            Compares two CvPoint objects. The result specifies whether the members of each object are unequal.
            </summary>
            <param name="lhs">A Point to compare.</param>
            <param name="rhs">A Point to compare.</param>
            <returns>This operator returns true if the members of left and right are unequal; otherwise, false.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size.Equals(System.Object)">
            <summary>
            Specifies whether this object contains the same members as the specified Object.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is the same type as this object and has the same members as this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>An integer value that specifies a hash value for this object.</returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Size.ToString">
            <summary>
            Converts this object to a human readable string.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Size.Zero">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec2f">
            <summary>
            2-Tuple of float (System.Single)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec2f.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec2f.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec2f.#ctor(System.Single,System.Single)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec2f.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec3f">
            <summary>
            3-Tuple of float (System.Single)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3f.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3f.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3f.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec3f.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec4f">
            <summary>
            4-Tuple of float (System.Single)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4f.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4f.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4f.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4f.Item3">
            <summary>
            The value of the fourth component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec4f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="item3"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec4f.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec6f">
            <summary>
            6-Tuple of float (System.Single)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6f.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6f.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6f.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6f.Item3">
            <summary>
            The value of the fourth component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6f.Item4">
            <summary>
            The value of the fifth component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6f.Item5">
            <summary>
            The value of the sixth component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec6f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="item3"></param>
            <param name="item4"></param>
            <param name="item5"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec6f.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec2s">
            <summary>
            2-Tuple of short (System.Int16)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec2s.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec2s.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec2s.#ctor(System.Int16,System.Int16)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec2s.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec3s">
            <summary>
            3-Tuple of short (System.Int16)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3s.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3s.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3s.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec3s.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec3s.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec4s">
            <summary>
            4-Tuple of short (System.Int16)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4s.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4s.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4s.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4s.Item3">
            <summary>
            The value of the fourth component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec4s.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="item3"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec4s.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec6s">
            <summary>
            6-Tuple of short (System.Int16)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6s.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6s.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6s.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6s.Item3">
            <summary>
            The value of the fourth component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6s.Item4">
            <summary>
            The value of the fifth component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6s.Item5">
            <summary>
            The value of the sixth component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec6s.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="item3"></param>
            <param name="item4"></param>
            <param name="item5"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec6s.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec2w">
            <summary>
            2-Tuple of ushort (System.UInt16)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec2w.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec2w.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec2w.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec2w.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec3w">
            <summary>
            3-Tuple of ushort (System.UInt16)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3w.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3w.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3w.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec3w.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec3w.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec4w">
            <summary>
            4-Tuple of ushort (System.UInt16)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4w.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4w.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4w.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4w.Item3">
            <summary>
            The value of the fourth component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec4w.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="item3"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec4w.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec6w">
            <summary>
            4-Tuple of ushort (System.UInt16)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6w.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6w.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6w.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6w.Item3">
            <summary>
            The value of the fourth component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6w.Item4">
            <summary>
            The value of the fifth component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6w.Item5">
            <summary>
            The value of the sixth component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec6w.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="item3"></param>
            <param name="item4"></param>
            <param name="item5"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec6w.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec2d">
            <summary>
            2-Tuple of double (System.Double)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec2d.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec2d.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec2d.#ctor(System.Double,System.Double)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec2d.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec3d">
            <summary>
            3-Tuple of double (System.Double)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3d.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3d.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec3d.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec3d.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec4d">
            <summary>
            4-Tuple of double (System.Double)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4d.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4d.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4d.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec4d.Item3">
            <summary>
            The value of the fourth component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec4d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="item3"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec4d.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.Vec6d">
            <summary>
            6-Tuple of double (System.Double)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6d.Item0">
            <summary>
            The value of the first component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6d.Item1">
            <summary>
            The value of the second component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6d.Item2">
            <summary>
            The value of the third component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6d.Item3">
            <summary>
            The value of the fourth component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6d.Item4">
            <summary>
            The value of the fifth component of this object.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.Vec6d.Item5">
            <summary>
            The value of the sixth component of this object.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.Vec6d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializer
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="item3"></param>
            <param name="item4"></param>
            <param name="item5"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.Vec6d.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfByte3">
            <summary>
            A matrix whose element is 8UC3 (cv::Mat_&lt;cv::Vec3b&gt;)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor">
            <summary>
            Creates empty Mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(System.IntPtr)">
            <summary>
            Creates from native cv::Mat* pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Initializes by Mat object
            </summary>
            <param name="mat">Managed Mat object</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(System.Int32,System.Int32)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(OpenCvSharp.CPlusPlus.Size)">
            <summary>
            constructs 2D matrix of the specified size and type
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec3b)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(OpenCvSharp.CPlusPlus.Size,OpenCvSharp.CPlusPlus.Vec3b)">
            <summary>
            constucts 2D matrix and fills it with the specified Scalar value.
            </summary>
            <param name="size">2D array size: Size(cols, rows) . In the Size() constructor, 
            the number of rows and the number of columns go in the reverse order.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(OpenCvSharp.CPlusPlus.MatOfByte3,OpenCvSharp.CPlusPlus.Range,System.Nullable{OpenCvSharp.CPlusPlus.Range})">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat::clone() .</param>
            <param name="rowRange">Range of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. 
            Use Range.All to take all the rows.</param>
            <param name="colRange">Range of the m columns to take. Use Range.All to take all the columns.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(OpenCvSharp.CPlusPlus.MatOfByte3,OpenCvSharp.CPlusPlus.Range[])">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="ranges">Array of selected ranges of m along each dimensionality.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(OpenCvSharp.CPlusPlus.MatOfByte3,OpenCvSharp.CPlusPlus.Rect)">
            <summary>
            creates a matrix header for a part of the bigger matrix
            </summary>
            <param name="m">Array that (as a whole or partly) is assigned to the constructed matrix. 
            No data is copied by these constructors. Instead, the header pointing to m data or its sub-array 
            is constructed and associated with it. The reference counter, if any, is incremented. 
            So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . 
            If you want to have an independent copy of the sub-array, use Mat.Clone() .</param>
            <param name="roi">Region of interest.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(System.Int32,System.Int32,System.IntPtr,System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec3b[],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(System.Int32,System.Int32,OpenCvSharp.CPlusPlus.Vec3b[0:,0:],System.Int64)">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="rows">Number of rows in a 2D array.</param>
            <param name="cols">Number of columns in a 2D array.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="step">Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any.
            If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize() .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IntPtr,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Vec3b[],System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Array,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            constructor for matrix headers pointing to user-allocated data
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="data">Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. 
            Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. 
            This operation is very efficient and can be used to process external data using OpenCV functions. 
            The external data is not automatically deallocated, so you should take care of it.</param>
            <param name="steps">Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). 
            If not specified, the matrix is assumed to be continuous.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(System.Collections.Generic.IEnumerable{System.Int32},OpenCvSharp.CPlusPlus.Vec3b)">
            <summary>
            constructs n-dimensional matrix
            </summary>
            <param name="sizes">Array of integers specifying an n-dimensional array shape.</param>
            <param name="s">An optional value to initialize each matrix element with. 
            To set all the matrix elements to the particular value after the construction, use SetTo(Scalar s) method .</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            converts old-style CvMat to the new matrix; the data is not copied by default
            </summary>
            <param name="m">Old style CvMat object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style CvMat should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.#ctor(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            converts old-style IplImage to the new matrix; the data is not copied by default
            </summary>
            <param name="img">Old style IplImage object</param>
            <param name="copyData">Flag to specify whether the underlying data of the the old-style IplImage should be 
            copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, 
            the allocated buffer is managed using Mat reference counting mechanism. While the data is shared, 
            the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed.</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.GetIndexer">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.FromArray(OpenCvSharp.CPlusPlus.Vec3b[])">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.FromArray(OpenCvSharp.CPlusPlus.Vec3b[0:,0:])">
            <summary>
            Initializes as M x N matrix and copys array data to this
            </summary>
            <param name="arr">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.FromArray(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Vec3b})">
            <summary>
            Initializes as N x 1 matrix and copys array data to this
            </summary>
            <param name="enumerable">Source array data to be copied to this</param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.ToArray">
            <summary>
            Convert this mat to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.ToPrimitiveArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.ToRectangularArray">
            <summary>
            Convert this mat to managed rectangular array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.MatOfByte3.Add(OpenCvSharp.CPlusPlus.Vec3b)">
            <summary>
            Adds elements to the bottom of the matrix. (Mat::push_back)
            </summary>
            <param name="value">Added element(s)</param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.MatOfByte3.Indexer">
            <summary>
            Matrix indexer
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfByte3.Indexer.Item(System.Int32)">
            <summary>
            1-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfByte3.Indexer.Item(System.Int32,System.Int32)">
            <summary>
            2-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfByte3.Indexer.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            3-dimensional indexer
            </summary>
            <param name="i0">Index along the dimension 0</param>
            <param name="i1">Index along the dimension 1</param>
            <param name="i2"> Index along the dimension 2</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.MatOfByte3.Indexer.Item(System.Int32[])">
            <summary>
            n-dimensional indexer
            </summary>
            <param name="idx">Array of Mat::dims indices.</param>
            <returns>A value to the specified array element.</returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.InputArray">
            <summary>
            Proxy datatype for passing Mat's and vector&lt;&gt;'s as input parameters
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.#ctor(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.#ctor(OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.#ctor(OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.#ctor(OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.op_Implicit(OpenCvSharp.CPlusPlus.Mat)~OpenCvSharp.CPlusPlus.InputArray">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.op_Implicit(OpenCvSharp.CPlusPlus.MatExpr)~OpenCvSharp.CPlusPlus.InputArray">
            <summary>
            
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.op_Implicit(OpenCvSharp.CPlusPlus.Scalar)~OpenCvSharp.CPlusPlus.InputArray">
            <summary>
            
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.op_Implicit(System.Double)~OpenCvSharp.CPlusPlus.InputArray">
            <summary>
            
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.op_Implicit(OpenCvSharp.CPlusPlus.Gpu.GpuMat)~OpenCvSharp.CPlusPlus.InputArray">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.Create(OpenCvSharp.CPlusPlus.Mat)">
            <summary>
            Creates a proxy class of the specified Mat
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.Create(OpenCvSharp.CPlusPlus.MatExpr)">
            <summary>
            Creates a proxy class of the specified MatExpr
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.Create(OpenCvSharp.CPlusPlus.Scalar)">
            <summary>
            Creates a proxy class of the specified Scalar
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.Create(System.Double)">
            <summary>
            Creates a proxy class of the specified double
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.Create(OpenCvSharp.CPlusPlus.Gpu.GpuMat)">
            <summary>
            Creates a proxy class of the specified GpuMat
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a proxy class of the specified list
            </summary>
            <param name="enumerable">Array object</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.Create``1(System.Collections.Generic.IEnumerable{``0},OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            Creates a proxy class of the specified list
            </summary>
            <param name="enumerable">Array object</param>
            <param name="type">Matrix depth and channels for converting array to cv::Mat</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.Create``1(``0[])">
            <summary>
            Creates a proxy class of the specified list
            </summary>
            <param name="array">Array object</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.Create``1(``0[],OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            Creates a proxy class of the specified list
            </summary>
            <param name="array">Array object</param>
            <param name="type">Matrix depth and channels for converting array to cv::Mat</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.Create``1(``0[0:,0:])">
            <summary>
            Creates a proxy class of the specified list
            </summary>
            <param name="array">Array object</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.Create``1(``0[0:,0:],OpenCvSharp.CPlusPlus.MatType)">
            <summary>
            Creates a proxy class of the specified list
            </summary>
            <param name="array">Array object</param>
            <param name="type">Matrix depth and channels for converting array to cv::Mat</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.InputArray.EstimateType(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.InputArray.Kind">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.OutputArray`1">
            <summary>
            Proxy datatype for passing Mat's and List&lt;&gt;'s as output parameters
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray`1.AssignResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.OutputArray`1.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfByte">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfByte.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfByte.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfByte.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfByte.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfByte.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfByte.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfByte.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfByte.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfVec6f">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfVec6f.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec6f.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec6f.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec6f.#ctor(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Vec6f})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec6f.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec6f.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec6f.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec6f.ToArray``1">
            <summary>
            Converts std::vector to managed array
            </summary>
            <typeparam name="T">structure that has four int members (ex. CvLineSegmentPoint, CvRect)</typeparam>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVec6f.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVec6f.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfVec4f">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfVec4f.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec4f.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec4f.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec4f.#ctor(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Vec4f})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec4f.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec4f.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec4f.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec4f.ToArray``1">
            <summary>
            Converts std::vector to managed array
            </summary>
            <typeparam name="T">structure that has four int members (ex. CvLineSegmentPoint, CvRect)</typeparam>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVec4f.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVec4f.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfVectorPoint2f">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfVectorPoint2f.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorPoint2f.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorPoint2f.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorPoint2f.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorPoint2f.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorPoint2f.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorPoint2f.Size1">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorPoint2f.Size2">
            <summary>
            vector[i].size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorPoint2f.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfVectorKeyPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfVectorKeyPoint.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorKeyPoint.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorKeyPoint.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorKeyPoint.#ctor(OpenCvSharp.CPlusPlus.KeyPoint[][])">
            <summary>
            
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorKeyPoint.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVectorKeyPoint.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorKeyPoint.Size1">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorKeyPoint.Size2">
            <summary>
            vector[i].size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVectorKeyPoint.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfPoint3f">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfPoint3f.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfPoint3f.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfPoint3f.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfPoint3f.#ctor(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point3f})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfPoint3f.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfPoint3f.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfPoint3f.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfPoint3f.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG">
            <summary>
            The Base Class for Background/Foreground Segmentation.
            The class is only used to define the common interface for
            the whole family of background/foreground segmentation algorithms.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG.#ctor">
            <summary>
            the default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            the full constructor that takes the length of the history, the number of gaussian mixtures, the background ratio parameter and the noise strength
            </summary>
            <param name="history"></param>
            <param name="nmixtures"></param>
            <param name="backgroundRatio"></param>
            <param name="noiseSigma"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG.FromPtr(System.IntPtr)">
            <summary>
            Creates instance from cv::Ptr&lt;T&gt; .
            ptr is disposed when the wrapper disposes. 
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG.FromRawPtr(System.IntPtr)">
            <summary>
            Creates instance from raw T*
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG.Run(OpenCvSharp.CPlusPlus.InputArray,OpenCvSharp.CPlusPlus.OutputArray,System.Double)">
            <summary>
            the update operator
            </summary>
            <param name="image"></param>
            <param name="fgmask"></param>
            <param name="learningRate"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG.Initialize(OpenCvSharp.CPlusPlus.Size,System.Int32)">
            <summary>
            re-initiaization method
            </summary>
            <param name="frameSize"></param>
            <param name="frameType"></param>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.BackgroundSubtractorMOG.InfoPtr">
            <summary>
            Pointer to algorithm information (cv::AlgorithmInfo*)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.HistogramNormType">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.HistogramNormType.L2Hys">
            <summary>
            
            [HOGDescriptor::L2Hys]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfPoint2f">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfPoint2f.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfPoint2f.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfPoint2f.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfPoint2f.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfPoint2f.#ctor(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point2f})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfPoint2f.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfPoint2f.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfPoint2f.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfPoint2f.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfFloat">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfFloat.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfFloat.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfFloat.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfFloat.#ctor(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfFloat.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfFloat.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfFloat.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfFloat.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfRect">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfRect.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfRect.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfRect.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfRect.#ctor(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Rect})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfRect.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfRect.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfRect.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfRect.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfPoint.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfPoint.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfPoint.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfPoint.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfPoint.#ctor(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Point})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfPoint.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfPoint.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfPoint.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfPoint.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfKeyPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfKeyPoint.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfKeyPoint.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfKeyPoint.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfKeyPoint.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfKeyPoint.#ctor(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.KeyPoint})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfKeyPoint.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfKeyPoint.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfKeyPoint.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfKeyPoint.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfVec2f">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfVec2f.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec2f.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec2f.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec2f.#ctor(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Vec2f})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec2f.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec2f.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec2f.ToArray``1">
            <summary>
            Converts std::vector to managed array
            </summary>
            <typeparam name="T">structure that has two float members (ex. CvLineSegmentPolar, CvPoint2D32f, PointF)</typeparam>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVec2f.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVec2f.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfVec4i">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfVec4i.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec4i.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec4i.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec4i.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec4i.#ctor(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Vec4i})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec4i.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec4i.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec4i.ToArray``1">
            <summary>
            Converts std::vector to managed array
            </summary>
            <typeparam name="T">structure that has four int members (ex. CvLineSegmentPoint, CvRect)</typeparam>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVec4i.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVec4i.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfVec3f">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfVec3f.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec3f.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec3f.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec3f.#ctor(System.Collections.Generic.IEnumerable{OpenCvSharp.CPlusPlus.Vec3f})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec3f.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec3f.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfVec3f.ToArray``1">
            <summary>
            Converts std::vector to managed array
            </summary>
            <typeparam name="T">structure that has two float members (ex. CvLineSegmentPolar, CvPoint2D32f, PointF)</typeparam>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVec3f.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfVec3f.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CPlusPlus.VectorOfMat">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CPlusPlus.VectorOfMat.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfMat.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfMat.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfMat.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfMat.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If false, the method has been called by the runtime from inside the finalizer and you should not reference other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfMat.ToArray">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfMat.ToArray``1">
            <summary>
            Converts std::vector to managed array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CPlusPlus.VectorOfMat.AddRef">
            <summary>
            各要素の参照カウントを1追加する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfMat.Size">
            <summary>
            vector.size()
            </summary>
        </member>
        <member name="P:OpenCvSharp.CPlusPlus.VectorOfMat.ElemPtr">
            <summary>
            &amp;vector[0]
            </summary>
        </member>
    </members>
</doc>
